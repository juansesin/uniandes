%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.2%%For: (Hugo) ()%%Title: (firma_fac_med.eps)%%CreationDate: 10/29/07 11:28 PM%%BoundingBox: 74 342 540 448%%HiResBoundingBox: 74.9971 342.3574 539.5088 447.4121%%DocumentProcessColors: Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: 26.5 16 585.5 799%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -354 793 1.2 1589 965 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 32 8%%BeginData: 5638 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFD0FFFA8A8FD057DA8A8FD3BFFA8A87D847DA8A8FD%32FF7D27F8272751517C515127272752FFFF52A852FFFFFF7EA8FD0AFF7D%A8FFA859FD05FF7DFFFFFFA87DFD11FF7E2727272E2E5252522727275252%FFA87DA87DFFFFFFA87DFD0AFFA87DFFA87DFD04FFA87DFFFFFFA87DFD0B%FF7DF87CA4CCFE7C7BCCFECC7B2727FFA8527D52A87DA8A87DA8FFA8A8A8%FFA87DA8A8847DFF5252A87DFFFF7D52FFFFA85252FF7DFD0FFF522752A8%FFFF7D7DFFFFA87DF827FFFF27A852FF7DFF7E7DA8FFA8FFA8FFFD04A87D%A8FF7D52FF7DFFFF7D27FFFFFF527DFFA8FD09FF5227A4FEC6FE2751C6FE%C6FE2727FFFF27A8525227FD04527D52522752277D277D7D7D525252A821%53525227FFA8FD055228FD0EFF52F8FD04FF5227FD04FF52F8FFA8527D52%522E527D525253FD05527D527D7D525227527D27527D2852FFFF5252527D%2752FD08FF7DF8C7FECCC75227CCFECCFE5227FFA852A85252A85253527D%277D277D7D52FF7E7D7D527D7E537D7D5252A853FFA852A8525259A8FD0E%FF5227FD04FF5252FD04FF2727FFFF27A852527D52527D52527D527D7D27%FF7D7E535252A852842E5252A852FFA8527E7D277D7DFD08FF5227A5FEC6%C751517BFEC6FE2727FFFF275252527D52527D7D27FF5252A827AF525252%7DFD0452277D595252FFFF52277D52527DFD0EFF52F8FFFFFFA85227A8FF%FFFF5227FFFF522752527D5252537DF8FF27597D52A87D27535259525227%52527D5252FFFF5252525352A8FD08FF7DF8C7FEFE9F7C517CFECCFE5127%FFFFFF7DFFA8FFA8FFA8FFA8FFFFA8A8FFFFA8A8FFFFFF7DFFA8A8A8FFA8%FD04FFA8A8FF7EA8FD0EFF5227A8FFFFA87D7D53FFFFFF2727FFFFFF7DA8%AFA8A8A8FFFFA8FFFF7DA8A8FF7DA8A8FFA87DA8A87DFFFFA8A8FFFFFF7D%FFFF7EA8FD08FF52279FFEC6A57B7C51FEC6FE2727CAFF7DFD0DFFA87DFD%0AFFA8A8FD17FF52F8FFFFFF7D7E5252FFFFFF5227FFFFA8FD0EFF7DFD0A%FFA984FD11FF7DF8C7FECC9FA69F52FECCFE5127FFFF277DFD0CFF7DF884%FD09FF7D27FD17FF5227FFFFFFA87EA852FFFFFF2727FFFFF8A8FD0CFF53%277DFD09FF7D27FD11FF5227A5FEC69F9FA527CCC6FE2727CFFFF884FF84%52A8FFFF7D7EFD04FF272752FFFFA8527DA8FFFF7D2727FFFF527DFFFFA8%7DA8FD0EFF52F8FFFFFF7DA87D27FFFFFF5227FFA8277DFF7D7DA8FFFFA8%A8FD04FF52F852FFFFA87D7DFFFFFFA85227FFFF7D7DFFFFA87DFD09FF7D%F8A5FECC9FCCA527C7FEFE5227FFA927A87D275227FF525252FFFFFFA827%5227FFFFF8522752FF52275227FF2E52277DA82752A8FD0EFF5227FFFFFF%A8A8A827FFFFFF2727FFFFF8A87D272752FF52277DFD04FF277D27FFA827%272752FF52522727FF52272859FF27527DFD08FF5227A5FEC6A0A4A5F8CC%C6FE2727FFFFF8A8277DFF277D2727FD04FF7D27FFF8A8A827A87D27A8F8%FF7D277D27A852F87DF87DFD0FFF52F8FFFFFF7DFFA827A8FFFF52F8FFA8%277D5252FFF884F852FD04FF5252A8277EA8F8FF5227A827A87D27A8F8FF%522753277DFD09FF7DF8C7FECCA5CCC627C7CCFE5227FFFF277D527DFF27%7DA82727FFFFFF5227522752FFF8FF7D527D27FF7D27A82759527EFF7DF8%7DFD0EFF5227FD06FF27FFFFFF2727FFFF27A8277EFF277DA82759FFFFFF%52277DF87DA827A8A8278427FF7D527D2752537DFF52277DFD08FF5227A5%FEC6FEC6C727CCC6FE2727FFFFF8A82752A8277DFF7D27A8FFA82752A82E%278427A87D27A8F8A87D27A8277DFFA9FFFF2727FD0EFF52F8FD05FFA827%A8FFFF52F8FFA8277D5252FFF8A8FF7DF8A8FFA8F87D7D5227A8F8AF7D27%8427A87D27A8F8A8FD04FF2727FD08FF7DF8C7FEFEFECCA552C6CCFE2727%FFFF27A8A8272752FF522752FFFF7D27FFFFA8F87D27FF7D52FF7D272852%FF5227277D7D5227A8FD0EFF5227A8FD05FF28FFFFFF2752FFFFF8A87D27%2752A8522752FFFF7D27FFFF7D277D27A87D27FF52272752FF5227527DA8%27277DFD08FFCF5251FEC6FEC67C7BFEA45127A8FFFFA8FFFFA87DFFFFA8%A8FFFFFFA8A8FFFFFFA8A8A8FFFFA8FFFFA87DFFFFFF84A8A8FF7DA8FD10%FF277DFD04FF527DFFFF52277EFFA8A8A8FF7EA8FFFF7DA8A8FFFFA8A8FF%FFFF7EA87EFFA8A8FFFF7DA8A8FFFFA87DA8A87E7DFD0BFFA8CDCCFECC27%7C7B5252FD39FF7DFD04FF527DA8527DA8FD34FFCFCEC97D7DA8A8FD3FFF%527D7DA8FD42FFA8A8FD05FFA8A8A8FFFFFFA8FFFFFFA8FFFFFFA8FF7EFF%FFFFA8A8A8FFA8FD23FF7DAFFD06FFA8FD0EFFA8FD04FFA8FD20FF27A87D%A87DA8A87D2752A87EA8527DFF527D7EA8FF525228A884A85252A8A87D7D%7DA87D7EFD1DFFA8277DA8A8A87DA87D5252A884FF27A8FF7D52A8A8FF27%7D27A97DFF52527DA8597E7DFF7DA8FD17FFA8527E52277D7D592E7D537D%277D52A87D52525253FF2E275252277D527D527D7D53277D2E7DFD1EFF27%A852527D7E5253527D7D525252A8A85252277DFF5227FD06527D7D7D5252%7D5252FD17FFA852A82752527D2752597DFD0452A8A8527D287EA87D527D%52527D52527D597D527D522E59FD1DFFA8527D52527D522E527D5252277D%27A87D5252527DA8FD05527D5252527D53525252277DFD1DFFA8FFFFFFA8%FFA8FFA8FD05FFA8FD05FFA8FFA8FFFFFFA8FFA8FFA8FD1FFFA8FFA8FFA8%A8A8FFFFFFA8FFFFA8FFFFA8FFA8FD05FFA8A8FFFFA8FFA8FFA8FFA8A8FD%FCFFFDFCFFFD8CFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 7 Bd[<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br[0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 7 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br[0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.0313 29.4307 L3.0313 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.8906 50.123 L5.8906 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.8906 50.123 m25.0264 50.123 L25.0264 32.4961 L5.8906 32.4961 L5.8906 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0235 0.64 0.78 0.0039 k 0.0235 0.64 0.78 0.0039 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.3057 48.793 L8.3057 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1059 0.9294 0.8314 0.0196 k 0.1059 0.9294 0.8314 0.0196 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.6758 L28.9355 1.6758 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.957 L47.6777 4.957 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.957 L30.0527 4.957 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.4315 0 0.8301 0 k 0.4315 0 0.8301 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.5029 L47.4199 6.5029 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4941 0.9412 0 0 k 0.4941 0.9412 0 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.7529 26.1445 L2.7529 2.1699 L25.4316 2.1699 L25.4316 26.1445 Lf*U*u4.9561 7.4004 m22.582 7.4004 L22.582 25.0273 L4.9561 25.0273 L4.9561 7.4004 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.6738 m4.9561 5.6738 L4.9561 25.0273 L22.582 25.0273 L22.582 5.6738 Lf20.3887 21.3281 m7.5811 21.3281 L7.5811 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.9137 0 0.498 0 k 0.9137 0 0.498 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.9355 8.7363 m21.0371 8.7363 L21.0371 22.8379 L6.9355 22.8379 L6.9355 8.7363 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8235 0 0.0039 0 k 0.8235 0 0.0039 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0275 0.2078 0.4431 0.0039 k 0.0275 0.2078 0.4431 0.0039 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.8902 0 0 k 0 0.8902 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7884.8833 8586.9551 m-7793.0479 8586.9551 L-7793.0479 8582.6758 L-7884.8833 8582.6758 L-7884.8833 8586.9551 Ln0 O0.695313 0.671875 0.636719 0.738281 k-7884.6631 8584.2754 m-7885 8584.3418 -7884.4814 8584.5313 -7884.8833 8584.3887 C-7884.8379 8584.2705 -7884.7725 8584.1816 -7884.6631 8584.2754 Cf-7794.1675 8584.4414 m-7795.2524 8585.2041 -7796.6816 8584.4336 -7797.8701 8584.9199 C-7798.0098 8584.9521 -7797.8345 8584.502 -7798.1484 8584.6025 C-7799.3008 8585.1953 -7801.1162 8584.8418 -7802.5195 8584.3848 C-7802.4346 8584.2666 L-7802.7017 8584.1816 -7803.0283 8584.5723 -7803.3115 8584.5176 C-7803.3135 8584.4395 -7803.2207 8584.4063 -7803.2861 8584.2979 C-7803.3574 8584.5352 -7803.7983 8584.4082 -7803.9185 8584.584 C-7804.0303 8584.4922 -7804.0195 8584.3047 -7804.1641 8584.2002 C-7804.3262 8584.4697 L-7804.7769 8585.1094 -7805.4209 8584.4258 -7806.0361 8584.7559 C-7806.0063 8584.6934 -7805.9453 8584.6445 -7805.9941 8584.584 C-7806.9814 8584.9727 -7808.2168 8584.8994 -7809.3208 8585.043 C-7809.2769 8584.9482 -7809.2363 8584.7754 -7809.3008 8584.668 C-7809.3555 8584.9512 -7809.6963 8585.0225 -7809.9922 8585.0781 C-7810.1255 8584.7871 -7810.4995 8585.3438 -7810.8467 8585.1826 C-7810.8169 8585.1191 L-7811.0732 8585.4238 -7811.1973 8584.9434 -7811.4053 8585.3086 C-7811.5684 8585.0801 L-7811.6807 8585.4902 -7811.9395 8584.8672 -7812.1514 8585.0762 C-7812.1445 8585.1602 L-7812.3442 8585.2598 -7812.4482 8585.0537 -7812.6338 8585.123 C-7812.6514 8585.0762 L-7813.0854 8585.1826 -7813.3379 8584.9551 -7813.3271 8585.2754 C-7813.4795 8585.0186 -7812.9063 8585.1582 -7813.1455 8584.7842 C-7814.5732 8585.1152 -7816.0459 8585.0498 -7817.4834 8585.0566 C-7817.6465 8584.9277 -7817.7505 8584.8887 -7817.7871 8584.7666 C-7817.9307 8584.832 -7818.3281 8584.8262 -7818.4585 8584.9902 C-7818.4102 8584.9834 -7818.5513 8584.8262 -7818.6274 8584.8105 C-7818.8887 8584.6895 -7818.9131 8585.1621 -7819.2002 8585.0186 C-7819.0859 8584.9336 -7819.0469 8584.8301 -7819.0854 8584.7109 C-7819.3301 8584.9609 -7819.6577 8584.9209 -7819.9473 8585.002 C-7819.9023 8584.9482 -7819.8325 8584.916 -7819.8433 8584.8154 C-7820.1602 8585.0986 -7820.4209 8584.7559 -7820.6982 8584.9346 C-7820.5947 8584.75 L-7821.0415 8584.5254 -7820.7266 8585.1367 -7821.1128 8585.0039 C-7821.02 8584.9453 -7821.0527 8584.873 -7821.0361 8584.7979 C-7821.3965 8585.1338 -7821.9795 8585.0225 -7822.3389 8585.1367 C-7822.3174 8585.1113 -7822.3232 8585.0605 Y-7822.7148 8585.1025 -7823.1245 8584.998 -7823.5552 8585.1445 C-7823.7119 8585.0625 -7823.5039 8584.6934 -7823.9185 8584.7617 C-7823.9033 8585.1328 -7824.6221 8584.9141 -7824.3779 8585.334 C-7824.7319 8585.2734 -7825.2925 8585.1338 -7825.5283 8585.2598 C-7825.3691 8585.1191 -7825.7007 8584.8066 -7825.4063 8584.7754 C-7825.6289 8584.5498 L-7825.5957 8584.3984 -7825.3999 8584.6016 -7825.4707 8584.4102 C-7825.6182 8584.4258 -7826.0479 8584.5723 -7826.1797 8584.5117 C-7826.4531 8584.7393 -7826.7041 8585.1641 -7827.1465 8585.2109 C-7826.9385 8585.0664 -7827.2646 8584.8018 -7827.1235 8584.7383 C-7827.7407 8585.4482 L-7827.8877 8585.4658 -7827.7725 8585.1563 -7827.9854 8585.2529 C-7827.9746 8585.3506 -7828.0674 8585.4121 -7828.1318 8585.4922 C-7828.1875 8585.4482 -7828.7441 8585.584 -7828.8081 8585.2178 C-7828.8735 8585.0762 -7828.5684 8585.1426 -7828.7314 8585.0117 C-7829.0029 8585.0146 -7829.0151 8585.1406 -7829.2871 8585.1465 C-7829.2925 8585.0977 L-7829.4717 8585.043 -7829.8213 8585.2529 -7829.6265 8585.4551 C-7829.5015 8585.4658 -7829.6738 8585.2354 -7829.4888 8585.3418 C-7829.6152 8585.5537 -7829.9312 8585.6133 -7830.2031 8585.6162 C-7830.1104 8585.5586 -7830.1216 8585.4609 -7830.0845 8585.3574 C-7830.4497 8585.6445 -7830.8369 8585.7354 -7831.2451 8585.8555 C-7831.2515 8586.0293 -7831.0928 8585.5391 -7831.0327 8585.6309 C-7831.5557 8585.3896 -7832.1128 8585.9727 -7832.5479 8585.6201 C-7832.4766 8585.5898 -7832.5098 8585.8672 -7832.5146 8585.8184 C-7832.7666 8585.7969 -7832.7549 8585.5449 -7832.9189 8585.6377 C-7832.9355 8585.4902 -7833.1255 8585.6855 -7833.2944 8585.7305 C-7833.3818 8585.8369 -7833.3384 8585.6582 -7833.1914 8585.6426 C-7833.4268 8585.7666 -7834.3691 8585.9941 -7834.9131 8585.7793 C-7834.9023 8585.877 -7835.2471 8586.1377 -7835.3721 8586.127 C-7835.3232 8585.8984 L-7835.4375 8585.7617 -7835.7422 8585.918 -7835.7632 8585.7227 C-7836.0303 8586 -7834.7344 8585.4863 -7835.0957 8585.7002 C-7835.1895 8585.5098 -7835.5991 8586.0645 -7835.5215 8585.7529 C-7835.7725 8585.7617 -7836.0161 8586.0186 -7836.2559 8585.8047 C-7836.1865 8585.8418 -7836.0522 8585.4873 -7836.2549 8585.5039 C-7836.6123 8585.5449 -7836.3564 8585.6133 -7836.6465 8585.6895 C-7836.8281 8585.7832 L-7836.8398 8586.0059 -7837.1475 8585.7529 -7837.0146 8586.002 C-7837.0586 8585.8184 -7837.5337 8586.1152 -7837.4971 8585.7461 C-7837.4473 8585.4551 L-7837.6016 8585.4766 -7837.7002 8585.7617 -7837.8213 8585.8896 C-7837.8418 8585.8633 -7837.8823 8585.8047 -7837.8745 8585.7578 C-7837.8994 8586.2031 -7838.2432 8585.7207 -7838.4268 8586.0645 C-7838.7505 8585.9102 -7839.2495 8586.0498 -7839.4023 8585.7734 C-7839.6514 8585.9082 -7839.8784 8586.0674 -7840.1621 8585.9727 C-7840.1055 8585.9307 -7840.0283 8585.918 -7840.0122 8585.8223 C-7840.1904 8585.6914 -7840.2344 8585.8086 -7840.3975 8585.8809 C-7840.3608 8585.8145 -7840.7539 8585.6201 -7840.9521 8585.4629 C-7841.1992 8585.5957 -7841.1143 8585.8359 -7841.1392 8585.9824 C-7841.3652 8585.543 -7841.8379 8586.2656 -7842.1211 8585.8672 C-7842.0352 8585.8066 -7841.7598 8585.6514 -7841.9658 8585.541 C-7842.1919 8585.1025 -7842.4219 8585.8643 -7842.7861 8585.6543 C-7842.6968 8586.0186 L-7842.8594 8585.793 -7843.2334 8586.2305 -7843.1963 8585.8594 C-7843.3184 8585.9902 -7843.6265 8585.7383 -7843.5859 8586.0938 C-7844.1846 8585.793 -7845.0425 8586.2754 -7845.4102 8585.6377 C-7845.4961 8585.6973 -7845.7104 8585.6367 -7845.6665 8585.8193 C-7845.5239 8586.0176 -7845.4673 8585.6777 -7845.4141 8585.8125 C-7845.4912 8585.8232 -7845.5078 8585.9209 -7845.5161 8585.9697 C-7845.7021 8585.8887 -7845.8486 8585.8633 -7845.6729 8585.5674 C-7846.0869 8585.3477 -7846.1001 8586.1719 -7846.6274 8586.0322 C-7846.6035 8585.8857 -7846.6436 8585.8301 -7846.7979 8585.8535 C-7847.0903 8586.1055 L-7847.4312 8586.0469 -7847.2842 8585.7705 -7847.2925 8585.5215 C-7847.4746 8585.5645 -7847.6973 8585.5527 -7847.7803 8585.7383 C-7848.0015 8585.4258 L-7847.8398 8585.6514 -7848.1514 8585.5762 -7848.2368 8585.6367 C-7848.1514 8585.5762 L-7848.1846 8585.4697 -7848.3955 8585.5352 -7848.5024 8585.5664 C-7848.4766 8585.7207 -7848.2617 8585.7832 -7848.1445 8585.8281 C-7848.2373 8585.9375 -7848.3823 8585.9121 -7848.5059 8586.041 C-7848.4648 8585.7969 -7848.8027 8585.8672 -7848.9473 8585.8418 C-7849.1133 8585.7891 -7849.1348 8586.0605 -7849.1831 8586.0527 C-7849.1875 8585.9258 -7849.4541 8586.0313 -7849.3247 8585.8535 C-7849.2681 8585.8125 -7849.1953 8585.9766 -7849.1016 8585.8643 C-7849.2109 8585.7705 -7849.1982 8585.5498 -7849.4258 8585.7109 C-7849.5967 8585.832 -7849.3818 8586.1934 -7849.7061 8586.0391 C-7849.6211 8585.9785 -7849.6055 8585.8809 -7849.5391 8585.793 C-7849.8433 8585.666 L-7849.8564 8585.8887 L-7849.8975 8585.832 -7849.8691 8585.8125 -7849.8877 8585.7832 C-7849.9785 8586.0176 -7850.3521 8585.8555 -7850.4209 8586.1191 C-7850.5742 8586.1426 -7850.7441 8585.9648 -7850.8906 8585.9395 C-7850.8623 8585.9199 L-7851.0415 8585.7891 -7851.2793 8585.875 -7851.4297 8586.0254 C-7851.4219 8585.9766 L-7851.5195 8585.959 -7851.7505 8585.9941 -7851.8735 8586.125 C-7852.1201 8585.957 -7851.9561 8585.2842 -7852.2295 8585.5645 C-7852.48 8585.5723 -7852.6221 8585.9727 -7852.5215 8586.1152 C-7852.9717 8585.9648 -7853.4834 8586.3281 -7853.9009 8585.9824 C-7853.9658 8586.0723 -7853.9248 8586.1289 -7854.0586 8586.1816 C-7854.7197 8586.0938 -7855.4551 8586.4453 -7855.9814 8586.0078 C-7855.79 8585.9141 -7855.9688 8585.7842 -7855.9727 8585.6582 C-7856.1309 8585.8574 -7856.1631 8585.4512 -7856.2197 8585.793 C-7856.2041 8585.9941 -7856.2197 8586.0918 -7856.0337 8586.1729 C-7856.4282 8586.2813 -7857.0283 8586.2813 -7857.2471 8586.0938 C-7857.1377 8586.1865 -7857.2227 8586.248 -7857.3086 8586.3086 C-7857.2803 8585.9873 -7857.5713 8585.9395 -7857.7915 8586.0527 C-7857.8223 8586.248 L-7857.9658 8586.0469 L-7858.0503 8586.1094 -7858.0591 8586.457 -7858.2773 8586.2695 C-7858.2891 8586.1934 -7858.3018 8586.1162 -7858.3418 8586.0605 C-7858.5693 8586.2207 -7858.8906 8586.4922 -7859.1377 8586.3262 C-7859.3398 8586.041 L-7859.4453 8586.0723 -7859.6235 8586.2441 -7859.4375 8586.3262 C-7859.8594 8586.1543 -7860.1309 8586.1328 -7860.2646 8585.8857 C-7860.9912 8586.4873 -7862.0459 8586.5117 -7862.8906 8586.4688 C-7862.8652 8586.3223 L-7863.0923 8586.1855 -7862.9834 8586.5781 -7863.1416 8586.4766 C-7863.0684 8586.3369 -7863.3145 8586.1729 -7863.1362 8586.002 C-7863.4609 8585.8477 -7863.5547 8586.2559 -7863.7656 8586.3223 C-7863.7979 8586.5146 -7863.5957 8586.1992 -7863.6367 8586.4434 C-7863.6729 8586.5117 -7864.0859 8586.293 -7864.1362 8586.584 C-7864.2178 8586.4697 -7864.1543 8586.2559 -7864.1104 8586.1377 C-7864.3086 8586.2793 L-7864.5513 8585.9395 -7863.7559 8585.6719 -7864.0107 8585.2529 C-7864.1934 8585.2979 L-7864.3682 8584.9941 -7863.71 8584.9551 -7864.1689 8584.8506 C-7864.3682 8584.9941 -7864.5381 8585.416 -7864.3608 8585.5449 C-7864.7754 8585.625 -7864.5527 8586.2383 -7864.9985 8586.2139 C-7865.1201 8586.043 -7864.6416 8586.1729 -7864.7275 8585.9336 C-7864.9375 8585.6992 -7865.1484 8586.0645 -7865.3354 8585.9824 C-7865.1279 8586.0918 -7865.3032 8586.3857 -7865.4375 8586.4395 C-7865.6641 8586.3018 -7865.29 8586.1641 -7865.6113 8586.1338 C-7865.6641 8586.3018 -7865.9595 8586.4277 -7865.7041 8586.5449 C-7865.8203 8586.9258 -7866.0381 8586.4395 -7866.2129 8586.7344 C-7866.3174 8586.4658 -7865.8823 8586.1152 -7866.2354 8585.9814 C-7866.1792 8586.2393 -7866.6704 8586.332 -7866.4839 8586.7139 C-7866.6221 8586.6406 -7866.6367 8586.4375 -7866.5361 8586.2793 C-7866.7334 8586.1201 -7867.0151 8586.75 -7867.0801 8586.2383 C-7867.1479 8586.502 L-7867.21 8586.416 -7867.2983 8586.3506 -7867.3994 8586.209 C-7867.5732 8586.2041 -7867.96 8586.5664 -7867.9443 8586.168 C-7868 8586.209 -7868.3975 8586.1914 -7868.2441 8586.4658 C-7867.9971 8586.6338 -7867.96 8586.2656 -7867.8223 8586.6377 C-7867.9971 8586.334 -7868.1787 8586.6777 -7868.3213 8586.7793 C-7868.3447 8586.625 L-7868.4297 8586.6855 -7868.6255 8586.6514 -7868.6787 8586.8184 C-7868.6133 8586.7305 -7868.6475 8586.625 -7868.7148 8586.5879 C-7868.8042 8586.8223 L-7869.1494 8586.9395 -7868.8857 8586.4102 -7869.2217 8586.4785 C-7868.9663 8586.2969 L-7869.0225 8586.3359 -7869.1367 8586.1162 -7869.2979 8586.1895 C-7869.3604 8586.4033 -7869.4775 8586.6602 -7869.5313 8586.8262 C-7869.7207 8586.9199 -7869.6162 8586.585 -7869.8027 8586.8047 C-7869.5586 8586.5469 L-7869.5215 8586.4766 -7869.7231 8586.1934 -7869.9761 8586.1992 C-7870.1377 8586.2734 -7870.3887 8586.582 -7870.1338 8586.6992 C-7870.2607 8586.7031 -7870.4385 8586.5723 -7870.3379 8586.416 C-7870.6255 8586.4902 -7870.2998 8586.6465 -7870.5479 8586.7793 C-7870.6494 8586.6367 -7870.9658 8586.4336 -7871.1563 8586.2266 C-7870.8975 8585.8682 L-7871.0693 8585.8643 L-7870.8467 8585.5781 -7871.1826 8585.6465 -7871.0566 8585.3438 C-7871.1743 8585.2969 -7871.3169 8585.3994 -7871.4307 8585.4785 C-7871.0864 8585.9629 -7871.8159 8586.1406 -7871.7158 8586.582 C-7872.1875 8586.7031 -7872.0107 8585.5078 -7872.5024 8586.1992 C-7872.4219 8586.3145 -7872.6533 8586.6504 -7872.3564 8586.5225 C-7872.6494 8586.4746 -7872.5557 8586.9658 -7872.9014 8586.7832 C-7872.6455 8586.6016 -7873.1763 8586.3359 -7872.8066 8586.0723 C-7872.8311 8586.2178 -7872.6001 8586.1826 -7872.5435 8586.1426 C-7872.6641 8585.9727 -7872.5186 8585.6973 -7872.8184 8585.6973 C-7873.0015 8585.7393 -7873.2524 8585.748 -7873.2158 8585.9785 C-7873.2085 8586.2314 -7872.9365 8585.9512 -7873.0537 8586.207 C-7873.4185 8586.2949 -7873.4795 8585.9102 -7873.6304 8586.3594 C-7873.3999 8586.3232 -7873.3423 8586.584 -7873.3467 8586.7578 C-7873.6143 8586.8633 L-7873.5625 8586.6953 L-7873.9922 8586.5742 -7873.6895 8587 -7874.1055 8586.9551 C-7874.3008 8586.623 L-7874.2017 8586.3369 -7873.6953 8586.75 -7873.7695 8586.2842 C-7874.04 8586.2656 -7874.1299 8586.502 -7874.3848 8586.3818 C-7874.3281 8586.3418 -7874.2505 8586.3301 -7874.1943 8586.2891 C-7874.2915 8586.2734 -7874.3877 8585.6563 -7874.7734 8586.0176 C-7874.9727 8586.1582 -7874.8262 8586.1826 -7874.8311 8586.3574 C-7875.2656 8586.4102 -7875.3955 8586.5879 -7875.6753 8586.6152 C-7875.6177 8586.2754 -7876.1699 8586.582 -7875.8608 8586.2344 C-7875.7188 8586.4336 -7875.0903 8586.4141 -7874.9365 8586.0898 C-7875.0947 8585.6865 -7874.5952 8586.1465 -7874.5024 8585.7383 C-7874.8506 8585.7285 -7874.8335 8585.332 -7874.8896 8585.0723 C-7874.9863 8585.0537 -7875.0801 8585.1641 -7875.1377 8585.2041 C-7875.1787 8585.4482 -7875.0522 8585.4453 -7875.0449 8585.6973 C-7875.4336 8585.6309 -7875.8081 8585.7666 -7876.0225 8586.0059 C-7876.1523 8585.8848 -7876.1113 8585.6406 -7875.9575 8585.6162 C-7876.4199 8585.6895 -7876.9141 8585.6563 -7877.3535 8585.582 C-7877.0693 8585.9814 -7877.8433 8585.6758 -7877.6494 8586.0078 C-7877.4141 8586.0977 -7877.2119 8586.3818 -7877.3418 8586.5605 C-7877.4888 8586.5352 -7877.3369 8586.3857 -7877.3984 8586.3008 C-7877.5859 8586.5186 -7877.6895 8585.9512 -7877.8735 8586.2949 C-7877.4512 8586.166 -7877.7915 8585.8086 -7877.7139 8585.4961 C-7878.0186 8585.6719 -7877.7007 8585.2734 -7878.0024 8585.2734 C-7878.3057 8585.4473 -7878.6787 8585.584 -7879.0161 8585.6514 C-7879.4399 8585.3555 -7880.0898 8585.6465 -7880.4683 8585.6582 C-7880.6665 8585.5 -7880.5322 8585.1465 -7880.7471 8585.085 C-7880.9995 8585.0918 -7880.5601 8585.4658 -7880.9336 8585.3047 C-7880.8975 8585.2344 L-7881.0107 8585.3154 -7881.5825 8584.9941 -7881.6929 8585.502 C-7881.5776 8585.1191 L-7881.6475 8585.084 -7881.7119 8585.1719 -7881.7695 8585.2129 C-7881.7725 8585.0879 -7881.8535 8584.9746 -7881.7402 8584.8926 C-7881.9707 8584.6289 -7882.2241 8584.9346 -7882.4746 8584.9453 C-7882.3135 8585.1719 L-7882.7422 8585.3496 -7883.0293 8585.125 -7883.4443 8585.2041 C-7883.4316 8584.9824 L-7883.6787 8585.1152 L-7883.6182 8584.8994 -7883.8447 8584.7617 -7883.9751 8584.9414 C-7883.3335 8584.3984 L-7883.1553 8584.5293 -7883.5283 8584.666 -7883.4165 8584.8848 C-7883.3213 8585.0762 -7882.9375 8585.0146 -7882.8755 8584.8018 C-7883.0225 8584.7773 -7883.0293 8584.8262 -7883.1436 8584.9063 C-7883.1919 8584.5977 -7882.9688 8584.6094 -7882.8584 8584.4033 C-7882.9355 8584.416 -7883.0449 8584.3223 -7883.0615 8584.4199 C-7882.9102 8584.2695 -7882.7578 8584.2461 -7882.5059 8584.2383 C-7882.6763 8584.3594 -7882.4131 8584.4297 -7882.4775 8584.5176 C-7882.4575 8584.2461 -7882.2168 8584.1621 -7881.9053 8584.2383 C-7881.6831 8584.5527 -7881.3208 8584.0361 -7880.96 8584.123 C-7881.1064 8584.3984 -7881.2935 8584.6191 -7881.5127 8584.7305 C-7881.2861 8584.8682 -7881.2607 8584.7227 -7881.0337 8584.8613 C-7880.9238 8584.6563 -7880.8457 8584.3418 -7880.5503 8584.2168 C-7880.5342 8584.4199 L-7880.2666 8584.3154 -7880.2666 8584.0146 -7879.9258 8584.0723 C-7879.3418 8584.1719 -7878.7407 8584.1719 -7878.2949 8584.1973 C-7878.2783 8584.3994 L-7878.0303 8583.9658 -7877.4521 8584.2393 -7877.1182 8584.0469 C-7876.5503 8584.2422 -7875.8848 8583.8535 -7875.5938 8584.2031 C-7874.5913 8584.0469 -7873.7148 8583.8945 -7872.6768 8583.9688 C-7872.8516 8584.2637 L-7872.6655 8584.0469 -7872.7305 8584.4336 -7872.5479 8584.3896 C-7872.7578 8584.1543 -7872.2949 8584.084 -7872.1665 8583.9033 C-7871.7041 8584.1328 -7871.1104 8583.8818 -7870.7007 8583.6758 C-7870.6846 8583.8789 L-7870.2705 8583.498 -7869.7759 8583.832 -7869.2598 8583.8945 C-7869.2007 8583.9785 -7869.1074 8584.1689 -7868.9536 8584.1465 C-7868.6738 8583.8184 -7868.5273 8583.8418 -7868.1167 8583.6367 C-7867.8169 8583.6367 -7867.3301 8583.7178 -7867.0254 8583.8457 C-7865.8975 8583.3848 -7864.7456 8583.6797 -7863.5732 8583.4023 C-7863.4888 8583.6406 L-7862.3521 8583.1309 -7860.9541 8583.5938 -7859.9839 8583.332 C-7860.0776 8583.7393 L-7859.7734 8583.8643 -7859.3843 8583.6328 -7859.4619 8583.3438 C-7859.1567 8583.4688 -7858.7007 8583.1465 -7858.5068 8583.4814 C-7858.1953 8583.5566 -7858.1255 8583.293 -7857.8662 8583.2383 C-7857.2422 8583.3926 -7857.0107 8583.3574 -7856.4224 8583.2813 C-7856.5684 8583.2559 L-7856.6328 8583.3457 -7856.6387 8583.5186 -7856.4922 8583.5449 C-7856.2725 8583.4307 -7855.6846 8583.6543 -7855.9033 8583.168 C-7855.2754 8583.4482 -7854.4385 8582.9395 -7853.8271 8583.3184 C-7853.8789 8583.1855 -7853.7246 8583.1602 -7853.6602 8583.0703 C-7853.1089 8583.0645 -7852.5293 8583.3359 -7852.0898 8583.1094 C-7852.0024 8583.1758 -7852.2295 8583.3359 -7852.0049 8583.3496 C-7851.8721 8583.2979 -7852.0024 8583.1758 -7851.8384 8583.1016 C-7850.9453 8582.8535 -7850.0303 8583.3574 -7849.2188 8583.293 C-7847.7754 8583.0361 -7846.2695 8583.166 -7844.8867 8583.123 C-7844.9023 8583.2207 L-7844.4395 8582.8477 -7843.8159 8583.6025 -7843.4463 8583.041 C-7843.3369 8583.1338 -7843.0283 8583.085 -7843.1094 8583.2734 C-7842.7407 8583.0098 -7842.0771 8583.5215 -7841.5439 8583.1865 C-7841.5928 8583.1777 -7841.6211 8583.1973 -7841.6777 8583.2393 C-7841.1392 8583.4551 -7840.6641 8583.1602 -7840.0957 8583.3555 C-7840.1533 8583.3975 -7840.2583 8583.4277 -7840.2754 8583.5254 C-7840.0557 8583.7129 -7839.7549 8583.1133 -7839.6348 8583.584 C-7839.5088 8583.5801 -7839.5449 8583.3477 -7839.6221 8583.3613 C-7838.3779 8583.5449 -7837.0498 8583.2441 -7835.7549 8583.1367 C-7834.8271 8583.418 -7835.6982 8583.9297 -7834.9663 8583.5781 C-7834.9063 8583.6689 -7834.9229 8583.3984 -7834.9131 8583.4961 C-7834.6299 8583.3643 -7834.4717 8584.0215 -7834.2754 8583.7754 C-7834.3564 8583.4863 -7834.1445 8583.6133 -7834.1387 8583.4375 C-7833.5713 8583.625 -7833.4575 8583.8857 -7833.0098 8583.666 C-7833.0435 8583.8184 L-7832.5186 8583.3887 -7831.9102 8583.6191 -7831.4673 8583.123 C-7828.5728 8583.0322 -7825.7983 8582.7578 -7822.9761 8582.7002 C-7820.1865 8582.7949 -7817.4551 8582.5723 -7814.6221 8582.8359 C-7813.9585 8583.2354 -7813.9087 8583.2246 -7813.1797 8583.0625 C-7813.2095 8583.127 -7813.2549 8583.1426 -7813.2061 8583.2031 C-7813.1699 8582.875 -7812.6929 8583.1719 -7812.6235 8582.8594 C-7811.5762 8582.9199 -7810.6113 8582.8301 -7809.5337 8582.8281 C-7809.7041 8582.8633 -7809.7896 8583.1309 -7809.5869 8583.1094 C-7809.3755 8582.8994 L-7809.3408 8582.9922 L-7809.2021 8582.9434 -7809.0513 8582.7813 -7809.1943 8582.6758 C-7806.4873 8582.3926 -7803.8242 8583.0498 -7801.1729 8582.9697 C-7800.5435 8583.1064 -7799.6475 8582.9814 -7798.9629 8582.9141 C-7796.9355 8583.3506 -7795.1079 8583.7041 -7793.0479 8583.3984 C-7793.3169 8584.2461 -7794.1675 8584.4414 Vf-7884.2578 8584.2422 m-7884.1855 8584.4063 -7883.9497 8584.4961 -7884.1377 8584.7139 C-7884.1611 8584.5605 -7884.2822 8584.3887 -7884.2578 8584.2422 Cf-7877.9619 8585.9297 m-7877.9536 8585.8809 -7877.8721 8585.9961 -7877.8521 8586.0225 C-7877.9297 8586.0352 -7878.0024 8586.1729 -7878.0645 8586.0879 C-7877.9854 8586.0762 -7877.9976 8585.998 -7877.9619 8585.9297 Cf-7876.3521 8586.0273 m-7876.3765 8586.1729 -7876.7207 8586.2891 -7876.9238 8586.3066 C-7876.3521 8586.0273 Lf-7874.8521 8586.6289 m-7874.7227 8586.752 -7874.7583 8586.8193 -7874.9326 8586.8154 C-7874.9453 8586.7383 -7874.8877 8586.6992 -7874.8521 8586.6289 Cf-7874.7456 8586.2969 m-7874.6211 8586.293 -7874.5591 8586.3789 -7874.4985 8586.4629 C-7874.5029 8586.3369 -7874.7871 8586.541 -7874.7456 8586.2969 Cf-7871.4893 8586.7207 m-7871.4111 8586.709 -7871.2417 8586.5879 -7871.1689 8586.75 C-7871.2505 8586.6367 -7871.5498 8586.9346 -7871.4893 8586.7207 Cf-7869.9761 8586.5 m-7869.9272 8586.5098 -7869.9072 8586.5361 -7869.8506 8586.4961 C-7869.7607 8586.5625 -7869.8555 8586.6689 -7869.9312 8586.6826 C-7869.9761 8586.5 Lf-7842.4287 8585.9141 m-7842.5923 8585.9863 L-7842.5684 8585.8418 L-7842.4287 8585.9141 Lf-7830.3574 8585.9063 m-7830.1943 8585.8145 -7830.2441 8586.043 -7830.2168 8586.0645 C-7830.3643 8586.0801 -7830.1621 8585.8848 -7830.3574 8585.9063 Cf-7823.8486 8585.1777 m-7823.8984 8585.1816 L-7823.8818 8584.8818 L-7823.8486 8585.1777 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 k(White)Pc0 0 0 1 k(Black)Pc0 1 1 0 k(CMYK Red)Pc0 0 1 0 k(CMYK Yellow)Pc1 0 1 0 k(CMYK Green)Pc1 0 0 0 k(CMYK Cyan)Pc1 1 0 0 k(CMYK Blue)Pc0 1 0 0 k(CMYK Magenta)Pc0.15 1 0.9 0.1 k(C=15 M=100 Y=90 K=10)Pc0 0.9 0.85 0 k(C=0 M=90 Y=85 K=0)Pc0 0.8 0.95 0 k(C=0 M=80 Y=95 K=0)Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0)Pc0 0.35 0.85 0 k(C=0 M=35 Y=85 K=0)Pc0.05 0 0.9 0 k(C=5 M=0 Y=90 K=0)Pc0.2 0 1 0 k(C=20 M=0 Y=100 K=0)Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0)Pc0.75 0 1 0 k(C=75 M=0 Y=100 K=0)Pc0.85 0.1 1 0.1 k(C=85 M=10 Y=100 K=10)Pc0.9 0.3 0.95 0.3 k(C=90 M=30 Y=95 K=30)Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0)Pc0.8 0.1 0.45 0 k(C=80 M=10 Y=45 K=0)Pc0.7 0.15 0 0 k(C=70 M=15 Y=0 K=0)Pc0.85 0.5 0 0 k(C=85 M=50 Y=0 K=0)Pc1 0.95 0.05 0 k(C=100 M=95 Y=5 K=0)Pc1 1 0.25 0.25 k(C=100 M=100 Y=25 K=25)Pc0.75 1 0 0 k(C=75 M=100 Y=0 K=0)Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0)Pc0.35 1 0.35 0.1 k(C=35 M=100 Y=35 K=10)Pc0.1 1 0.5 0 k(C=10 M=100 Y=50 K=0)Pc0 0.95 0.2 0 k(C=0 M=95 Y=20 K=0)Pc0.25 0.25 0.4 0 k(C=25 M=25 Y=40 K=0)Pc0.4 0.45 0.5 0.05 k(C=40 M=45 Y=50 K=5)Pc0.5 0.5 0.6 0.25 k(C=50 M=50 Y=60 K=25)Pc0.55 0.6 0.65 0.4 k(C=55 M=60 Y=65 K=40)Pc0.25 0.4 0.65 0 k(C=25 M=40 Y=65 K=0)Pc0.3 0.5 0.75 0.1 k(C=30 M=50 Y=75 K=10)Pc0.35 0.6 0.8 0.25 k(C=35 M=60 Y=80 K=25)Pc0.4 0.65 0.9 0.35 k(C=40 M=65 Y=90 K=35)Pc0.4 0.7 1 0.5 k(C=40 M=70 Y=100 K=50)Pc0.5 0.7 0.8 0.7 k(C=50 M=70 Y=80 K=70)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.100006 g(K=90)Pc0.200012 g(K=80)Pc0.300003 g(K=70)Pc0.400009 g(K=60)Pc0.5 g(K=50)Pc0.600006 g(K=40)Pc0.700012 g(K=30)Pc0.800003 g(K=20)Pc0.900009 g(K=10)Pc0.950012 g(K=5)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au1 Ap0 O0 1 1 0 k0 R0 1 1 0 K0 J 0 j 0.24976 w 4 M []0 d0 XR523.5283 374.3066 m334.2568 374.3066 L334.2568 431.0449 L523.5283 431.0449 L523.5283 374.3066 L(b) *0 0 0 0 k1 w539.5088 342.3574 m318.041 342.3574 L318.041 446.9922 L539.5088 446.9922 L539.5088 342.3574 Lfu0 R0 1 1 0 K2 w539.5684 358.3809 m318.041 358.3809 L318.041 446.9922 L539.5684 446.9922 L539.5684 358.3809 L(b) *0 Ap1 w1 XR334.4473 428.3672 m347.3652 431.0645 358.2188 431.0645 v369.0723 431.0645 382.5723 428.3672 Y382.5723 392.2617 382.5723 386.8477 V382.5723 383.4648 380.498 381.6445 379.7617 381.1133 C378.1074 379.9219 370.7061 374.3047 358.5273 374.3047 C347.0664 374.3047 340.0762 379.25 337.2988 381.1953 C336.0527 382.0742 334.4473 383.9902 334.4473 386.8477 C334.4473 391.2383 334.4473 428.3672 Yfuu0 0 0 1 k0 XR378.9746 380.3398 m369.1592 373.9746 358.9668 374.3184 y358.6855 375.6191 358.7988 377.8613 v358.9111 380.1055 360.1348 379.4727 361.0205 381.2441 c361.3418 381.8887 361.6182 382.332 362.1211 383.8398 c362.1406 383.9023 361.5332 394.6445 361.3779 399.2031 c361.2949 401.6582 360.834 405.7578 360.293 409.7441 c359.9736 412.1074 359.2559 413.9785 358.9238 416.2207 c358.4434 419.459 357.8867 423.1113 y357.4873 422.0801 356.9141 418.2207 356.3398 413.8672 c356.0645 411.7773 355.7871 409.5742 355.5293 407.5137 c354.9824 403.1504 353.6201 391.4707 353.4141 390.8379 c353.1035 389.875 353.0703 391.0918 y353.877 403.3438 354.1211 408.7148 V354.2383 411.3438 354.4375 414.2285 354.7656 416.998 C355.0117 419.0781 355.3301 421.0898 355.7422 422.8789 C357.1445 427.1172 357.5928 427.2012 v358.0391 427.2871 359.6582 424.5313 360.2051 422.0781 c361.4424 416.5449 362.1738 415.8359 363.1152 410.0195 c364.0137 404.4961 364.8311 399.873 364.9434 399.1172 c365.3447 396.375 365.1465 387.8223 364.4531 384.416 C364.29 383.4863 364.2402 383.1445 363.6328 382.5293 c362.2109 381.0898 361.1992 379.375 361.1992 378.252 c361.1992 377.1309 361.0117 377.1523 361.2793 376.5039 C363.1543 373.6934 373.9375 380.1211 V377.3066 381.8867 377.3066 385.7832 V377.3066 425.1934 l366.6152 428.8086 358.3799 428.8086 v350.1445 428.8086 339.832 425.1992 y339.832 385.9609 l339.832 383.5449 340.1836 379.0156 343.6318 377.4707 C334.4473 380.6133 334.4473 386.0098 V334.4473 428.5352 l348.4678 431.1152 358.3848 431.1152 v368.3027 431.1152 382.5723 428.5352 y382.5723 389.625 382.5723 385.959 v382.5723 382.291 378.9746 380.3398 YfUUu*u512.2109 413.2773 m511.2305 412.7305 509.9141 412.457 508.2578 412.457 c506.5918 412.457 505.2949 412.9609 504.3701 413.9707 c503.4453 414.9805 502.9824 416.3887 502.9824 418.1992 c502.9824 420.0215 503.4453 421.4727 504.3701 422.5527 c505.2676 423.5918 506.46 424.1113 507.9473 424.1113 c508.6064 424.1113 509.1738 424.0371 509.6523 423.8945 c509.6523 428.4707 L512.2109 428.4707 l512.2109 413.2773 Lf1 D509.6523 414.3516 m509.6523 422.5117 L509.3145 422.6094 508.9355 422.6582 508.5146 422.6582 c506.5254 422.6582 505.5283 421.2227 505.5283 418.3477 c505.5283 415.5156 506.4619 414.0996 508.3262 414.0996 c508.9434 414.0996 509.3848 414.1836 509.6523 414.3516 cf*U*u0 D523.9102 418.4082 m516.9697 417.4004 L517.1797 415.2988 518.2109 414.25 520.0625 414.25 c521.1553 414.25 522.1074 414.457 522.9219 414.8691 c523.5303 413.2539 L522.5635 412.7227 521.3164 412.457 519.7871 412.457 c518.1621 412.457 516.877 412.9688 515.9375 413.9902 c515 415.0137 514.5303 416.4707 514.5303 418.3633 c514.5303 420.1992 514.9609 421.6309 515.8223 422.6621 c516.6855 423.6914 517.8662 424.2051 519.3652 424.2051 c520.8809 424.2051 522.0313 423.7109 522.8164 422.7246 c523.6016 421.7383 523.9658 420.2988 523.9102 418.4082 cf1 D521.5137 419.4121 m521.5137 421.5566 520.7686 422.6309 519.2793 422.6309 c518.4941 422.6309 517.8906 422.3145 517.4688 421.6836 c517.0068 420.998 516.7891 420.002 516.8164 418.6992 c521.5137 419.4121 Lf*UUu*u0 D394.9219 382.4297 m390.8994 382.4297 L390.8994 407.3008 L394.9219 407.3008 l394.9219 382.4297 Lf*U*u413.4785 391.2988 m413.4785 388.5527 412.874 386.3672 411.6641 384.7422 c410.3457 382.9844 408.4893 382.1055 406.0938 382.1055 c403.6982 382.1055 401.8418 382.9844 400.5234 384.7422 c399.3145 386.3672 398.7109 388.5527 398.7109 391.2988 c398.7109 394.0664 399.3145 396.2637 400.5234 397.8887 c401.8418 399.6465 403.6982 400.5254 406.0938 400.5254 c408.5117 400.5254 410.3682 399.6465 411.6641 397.8887 c412.874 396.2637 413.4785 394.0664 413.4785 391.2988 cf1 D409.4863 391.3301 m409.4863 395.7695 408.3555 397.9883 406.0938 397.9883 c403.832 397.9883 402.7012 395.7695 402.7012 391.3301 c402.7012 387 403.832 384.8359 406.0938 384.8359 c408.3555 384.8359 409.4863 387 409.4863 391.3301 cf*U*u0 D427.2676 387.543 m427.2676 386.0488 426.6855 384.7734 425.5195 383.7188 c424.3545 382.666 422.8262 382.1367 420.9355 382.1367 c418.9131 382.1367 417.2754 382.5664 416.0225 383.4199 c417.0771 385.9883 L417.9355 385.3066 419.0459 384.9668 420.4102 384.9668 c421.2236 384.9668 421.8828 385.2012 422.3887 385.6738 c422.8945 386.1465 423.1465 386.7441 423.1465 387.4707 c423.1465 388.2188 422.9492 388.8047 422.5547 389.2344 c422.1582 389.6621 421.4893 390.0527 420.5449 390.4043 c417.8418 391.4375 416.4902 393.0977 416.4902 395.3828 c416.4902 396.832 417.0117 398.0527 418.0547 399.041 c419.0986 400.0293 420.4551 400.5254 422.123 400.5254 c423.9238 400.5254 425.46 400.1074 426.7344 399.2715 c425.748 396.9297 L424.9355 397.5918 423.9922 397.9238 422.918 397.9238 c422.1279 397.9238 421.5078 397.6973 421.0586 397.2461 c420.6104 396.7969 420.3848 396.2422 420.3848 395.584 c420.3848 394.418 421.2617 393.4844 423.0195 392.7832 c425.8516 391.6387 427.2676 389.8945 427.2676 387.543 cf*U*u456.9395 382.4297 m452.2461 382.4297 L450.3477 388.7676 L442.3945 388.7676 L440.4238 382.4297 L436.3408 382.4297 L444.5098 407.084 L448.8066 407.084 l456.9395 382.4297 Lf1 D449.7021 391.4199 m447.1582 400.1016 L446.7998 401.3203 446.5869 402.3145 446.5137 403.0801 c446.4434 403.0801 L446.3232 402.4336 446.0947 401.4414 445.7627 400.1016 c443.1104 391.4199 l449.7021 391.4199 Lf*U*u0 D473.4814 382.4297 m469.458 382.4297 L469.458 395.0215 L469.458 397 468.3945 397.9883 466.2637 397.9883 c465.2539 397.9883 464.332 397.8242 463.4971 397.4922 c463.4971 382.4297 L459.4756 382.4297 L459.4756 399.2402 L461.2988 400.0957 463.6152 400.5254 466.4297 400.5254 c468.9111 400.5254 470.7461 399.9746 471.9336 398.877 c472.9648 397.9531 473.4814 396.6895 473.4814 395.0859 c473.4814 382.4297 Lf*U*u491.6133 383.3906 m490.0752 382.5352 488.0059 382.1055 485.4141 382.1055 c482.7979 382.1055 480.7637 382.8965 479.3125 384.4785 c477.8623 386.0605 477.1367 388.2676 477.1367 391.1016 c477.1367 393.959 477.8623 396.2324 479.3125 397.9238 c480.7207 399.5488 482.5889 400.3633 484.9199 400.3633 c485.9512 400.3633 486.8428 400.252 487.5898 400.0293 c487.5898 407.2188 L491.6133 407.2188 l491.6133 383.3906 Lf1 D487.5898 385.0703 m487.5898 397.8535 L487.0625 398.0078 486.4688 398.0859 485.8086 398.0859 c482.6875 398.0859 481.1279 395.834 481.1279 391.3301 c481.1279 386.8926 482.5889 384.6758 485.5137 384.6758 c486.4805 384.6758 487.1719 384.8066 487.5898 385.0703 cf*U*u0 D509.918 391.4277 m499.0391 389.8457 L499.3691 386.5488 500.9844 384.9004 503.8828 384.9004 c505.5967 384.9004 507.0908 385.2305 508.3672 385.8887 c509.3223 383.3555 L507.8066 382.5234 505.8496 382.1055 503.4561 382.1055 c500.9053 382.1055 498.8965 382.9082 497.4229 384.5098 c495.9512 386.1152 495.2148 388.3984 495.2148 391.3652 c495.2148 394.2422 495.8906 396.4883 497.2422 398.1035 c498.5938 399.7168 500.4453 400.5254 502.7969 400.5254 c505.1719 400.5254 506.9727 399.75 508.2031 398.2012 c509.4336 396.6504 510.0059 394.3926 509.918 391.4277 cf1 D506.1543 393.0098 m506.1543 396.3711 504.9883 398.0527 502.6582 398.0527 c501.4297 398.0527 500.4834 397.5586 499.8242 396.5684 c499.0977 395.4922 498.7588 393.9316 498.8008 391.8887 c506.1543 393.0098 Lf*U*u0 D523.7393 387.543 m523.7393 386.0488 523.1572 384.7734 521.9922 383.7188 c520.8262 382.666 519.2988 382.1367 517.4082 382.1367 c515.3867 382.1367 513.748 382.5664 512.4922 383.4199 c513.5488 385.9883 L514.4072 385.3066 515.5176 384.9668 516.8818 384.9668 c517.6953 384.9668 518.3555 385.2012 518.8594 385.6738 c519.3652 386.1465 519.6191 386.7441 519.6191 387.4707 c519.6191 388.2188 519.4219 388.8047 519.0264 389.2344 c518.6309 389.6621 517.9609 390.0527 517.0156 390.4043 c514.3145 391.4375 512.9619 393.0977 512.9619 395.3828 c512.9619 396.832 513.4844 398.0527 514.5264 399.041 c515.5703 400.0293 516.9258 400.5254 518.5957 400.5254 c520.3965 400.5254 521.9316 400.1074 523.2051 399.2715 c522.2188 396.9297 L521.4063 397.5918 520.4648 397.9238 519.3906 397.9238 c518.6016 397.9238 517.9805 397.6973 517.5313 397.2461 c517.0801 396.7969 516.8574 396.2422 516.8574 395.584 c516.8574 394.418 517.7344 393.4844 519.4902 392.7832 c522.3223 391.6387 523.7393 389.8945 523.7393 387.543 cf*UUu*u412.1211 412.627 m409.5605 412.627 L409.5605 420.6621 L409.5605 421.9258 408.8809 422.5566 407.5195 422.5566 c406.875 422.5566 406.2852 422.4512 405.7529 422.2402 c405.7529 412.627 L403.1934 412.627 L403.1934 423.3496 L404.3555 423.8965 405.833 424.1719 407.625 424.1719 c409.207 424.1719 410.3779 423.8203 411.1328 423.1211 c411.791 422.5313 412.1211 421.7246 412.1211 420.7012 c412.1211 412.627 Lf*U*u417.6426 427.1875 m417.6426 426.8359 417.5068 426.5371 417.2334 426.291 c416.959 426.0469 416.627 425.9238 416.2344 425.9238 c415.8418 425.9238 415.5088 426.0469 415.2344 426.291 c414.9609 426.5371 414.8242 426.8359 414.8242 427.1875 c414.8242 427.5391 414.9609 427.8398 415.2344 428.0918 c415.5088 428.3438 415.8418 428.4707 416.2344 428.4707 c416.627 428.4707 416.959 428.3477 417.2334 428.1035 c417.5068 427.8555 417.6426 427.5508 417.6426 427.1875 cf417.5078 412.627 m414.9482 412.627 L414.9482 423.9648 L417.5078 423.9648 l417.5078 412.627 Lf*U*u429.1846 423.9648 m425.5449 412.627 L423.1064 412.627 L419.4033 423.9648 L422.1377 423.9648 L424.1367 416.6484 L424.291 416.1016 424.3809 415.582 424.4102 415.0918 c424.4512 415.0918 L424.5215 415.498 424.6191 416.0176 424.7461 416.6484 c426.7861 423.9648 l429.1846 423.9648 Lf*U*u439.9268 418.375 m432.9863 417.3672 L433.1963 415.2656 434.2285 414.2168 436.0771 414.2168 c437.1719 414.2168 438.125 414.4219 438.9395 414.8359 c439.5488 413.2188 L438.5801 412.6875 437.334 412.4219 435.8047 412.4219 c434.1768 412.4219 432.8955 412.9336 431.9551 413.957 c431.0146 414.9805 430.5469 416.4355 430.5469 418.3281 c430.5469 420.1641 430.9775 421.5957 431.8389 422.627 c432.7021 423.6563 433.8828 424.1719 435.3828 424.1719 c436.8965 424.1719 438.0479 423.6777 438.834 422.6895 c439.6172 421.7031 439.9824 420.2656 439.9268 418.375 cf1 D437.5313 419.3789 m437.5313 421.5234 436.7852 422.5957 435.2988 422.5957 c434.5107 422.5957 433.9082 422.2813 433.4863 421.6484 c433.0215 420.9629 432.8057 419.9668 432.834 418.6641 c437.5313 419.3789 Lf*U*u0 D447.7207 424.1582 m447.2148 422.2813 L446.835 422.4082 446.4414 422.4707 446.0352 422.4707 c445.543 422.4707 445.1348 422.3809 444.8115 422.1973 c444.8115 412.627 L442.252 412.627 L442.252 423.3574 l443.5 423.9609 445.3232 424.2285 447.7207 424.1582 cf*U*u455.8945 415.8867 m455.8945 414.9316 455.5234 414.1191 454.7783 413.4453 c454.0352 412.7715 453.0605 412.4355 451.8555 412.4355 c450.5635 412.4355 449.5195 412.709 448.7188 413.2578 c449.3926 414.8984 L449.9395 414.4609 450.6475 414.2422 451.5176 414.2422 c452.0361 414.2422 452.458 414.3926 452.7813 414.6953 c453.1035 414.9961 453.2656 415.3789 453.2656 415.8418 c453.2656 416.3184 453.1387 416.6934 452.8867 416.9668 c452.6338 417.2402 452.207 417.4883 451.6035 417.7129 c449.8809 418.373 449.0195 419.4297 449.0195 420.8887 c449.0195 421.8164 449.3516 422.5938 450.0186 423.2246 c450.6826 423.8555 451.5479 424.1719 452.6133 424.1719 c453.7607 424.1719 454.7422 423.9043 455.5537 423.373 c454.9229 421.8828 L454.4063 422.3027 453.8027 422.5137 453.1172 422.5137 c452.6133 422.5137 452.2158 422.3711 451.9297 422.084 c451.6426 421.7949 451.498 421.4414 451.498 421.0195 c451.498 420.2773 452.0586 419.6797 453.1807 419.2324 c454.9893 418.502 455.8945 417.3867 455.8945 415.8867 cf*U*u460.9102 427.1875 m460.9102 426.8359 460.7725 426.5371 460.5 426.291 c460.2266 426.0469 459.8936 425.9238 459.5 425.9238 c459.1074 425.9238 458.7754 426.0469 458.502 426.291 c458.2285 426.5371 458.0898 426.8359 458.0898 427.1875 c458.0898 427.5391 458.2285 427.8398 458.502 428.0918 c458.7754 428.3438 459.1074 428.4707 459.5 428.4707 c459.8936 428.4707 460.2266 428.3477 460.5 428.1035 c460.7725 427.8555 460.9102 427.5508 460.9102 427.1875 cf460.7764 412.627 m458.2148 412.627 L458.2148 423.9648 L460.7764 423.9648 l460.7764 412.627 Lf*U*u472.4199 413.2422 m471.4395 412.6953 470.123 412.4219 468.4668 412.4219 c466.8008 412.4219 465.5029 412.9258 464.5781 413.9355 c463.6523 414.9473 463.1895 416.3555 463.1895 418.1641 c463.1895 419.9883 463.6543 421.4395 464.5781 422.5176 c465.4766 423.5566 466.668 424.0762 468.1553 424.0762 c468.8145 424.0762 469.3828 424.0039 469.8594 423.8594 c469.8594 428.4375 L472.4199 428.4375 l472.4199 413.2422 Lf1 D469.8594 414.3164 m469.8594 422.4766 L469.5234 422.5742 469.1445 422.623 468.7227 422.623 c466.7334 422.623 465.7383 421.1875 465.7383 418.3125 c465.7383 415.4805 466.6699 414.0645 468.5352 414.0645 c469.1523 414.0645 469.5938 414.1484 469.8594 414.3164 cf*U*u0 D483.3379 413.2422 m482.3145 412.6953 480.9492 412.4219 479.2383 412.4219 c476.1553 412.4219 474.6152 413.5703 474.6152 415.8672 c474.6152 417.2402 475.2383 418.2695 476.4863 418.9551 c477.4668 419.4883 478.9502 419.8516 480.9414 420.0469 c480.9414 420.6582 L480.9414 421.9043 480.1914 422.5273 478.6914 422.5273 c477.7529 422.5273 476.8086 422.2969 475.8545 421.8398 c475.2656 423.3105 L476.4434 423.8828 477.7393 424.1719 479.1563 424.1719 c481.9434 424.1719 483.3379 422.8672 483.3379 420.2617 c483.3379 413.2422 Lf1 D480.9414 414.1621 m480.9414 418.832 L479.5986 418.6641 478.6484 418.4043 478.0869 418.0527 c477.3887 417.6191 477.0371 416.918 477.0371 415.9492 c477.0371 414.5469 477.8281 413.8457 479.4092 413.8457 c480.0098 413.8457 480.5215 413.9512 480.9414 414.1621 cf*U*u0 D494.8828 413.2422 m493.9023 412.6953 492.5859 412.4219 490.9316 412.4219 c489.2637 412.4219 487.9678 412.9258 487.041 413.9355 c486.1172 414.9473 485.6543 416.3555 485.6543 418.1641 c485.6543 419.9883 486.1172 421.4395 487.043 422.5176 c487.9395 423.5566 489.1309 424.0762 490.6201 424.0762 c491.2793 424.0762 491.8477 424.0039 492.3242 423.8594 c492.3242 428.4375 L494.8828 428.4375 l494.8828 413.2422 Lf1 D492.3242 414.3164 m492.3242 422.4766 L491.9863 422.5742 491.6084 422.623 491.1875 422.623 c489.1963 422.623 488.2012 421.1875 488.2012 418.3125 c488.2012 415.4805 489.1328 414.0645 491 414.0645 c491.6152 414.0645 492.0566 414.1484 492.3242 414.3164 cf*UU*u0 D390.8682 428.4121 m393.5938 428.4121 L393.5938 416.2227 L393.5938 414.8828 394.3164 414.2109 395.7598 414.2109 c396.4453 414.2109 397.0713 414.3223 397.6357 414.5469 c397.6357 428.4121 L400.3633 428.4121 L400.3633 413.3633 L399.127 412.7832 397.5557 412.4922 395.6494 412.4922 c393.9668 412.4922 392.7217 412.8633 391.918 413.6094 c391.2178 414.2344 390.8682 415.0898 390.8682 416.1777 c390.8682 428.4121 Lf*UUu*u396.3799 368.2705 m393.0791 368.2705 L393.0791 364.9541 L396.0146 364.9541 L396.0146 363.625 L393.0791 363.625 L393.0791 358.6738 L391.0635 358.6738 L391.0635 369.6143 L396.3799 369.6143 l396.3799 368.2705 Lf*U*u403.3613 359.0977 m402.6504 358.7178 401.7012 358.5273 400.5137 358.5273 c398.3711 358.5273 397.2998 359.3262 397.2998 360.9229 c397.2998 361.9453 397.8115 362.7002 398.834 363.1875 c399.4668 363.4893 400.4209 363.7031 401.6963 363.8301 c401.6963 364.2539 L401.6963 365.1201 401.1758 365.5537 400.1338 365.5537 c399.4814 365.5537 398.8242 365.3926 398.1621 365.0713 c397.7529 366.0938 L398.5713 366.4932 399.4717 366.6924 400.4551 366.6924 c402.3926 366.6924 403.3613 365.7871 403.3613 363.9756 c403.3613 359.0977 Lf1 D401.6963 359.7402 m401.6963 362.9824 L400.8252 362.875 400.208 362.7246 399.8467 362.5303 c399.2588 362.2178 398.9648 361.7021 398.9648 360.9814 c398.9648 360.0078 399.5186 359.5205 400.625 359.5205 c401.0459 359.5205 401.4033 359.5938 401.6963 359.7402 cf*U*u0 D409.9199 359.0684 m409.5205 358.708 408.9023 358.5273 408.0654 358.5273 c407.0137 358.5273 406.21 358.9707 405.6553 359.8574 c405.1875 360.5967 404.9541 361.5225 404.9541 362.6318 c404.9541 363.7422 405.1924 364.6621 405.6699 365.3926 c406.2246 366.2598 407.0283 366.6924 408.0801 366.6924 c408.8691 366.6924 409.4775 366.5127 409.9053 366.1523 c409.5264 365.1445 L409.2432 365.3584 408.8926 365.4658 408.4746 365.4658 c407.3252 365.4658 406.751 364.5283 406.751 362.6543 c406.751 361.9355 406.8574 361.3281 407.0723 360.833 c407.3643 360.1533 407.8223 359.8135 408.4453 359.8135 c408.873 359.8135 409.2285 359.9297 409.5117 360.1641 c409.9199 359.0684 Lf*U*u417.3984 359.1416 m416.6104 358.7227 415.6025 358.5127 414.375 358.5127 c412.3398 358.5127 411.3223 359.3994 411.3223 361.1719 c411.3223 366.5469 L413.1191 366.5469 L413.1191 361.0693 L413.1191 360.1826 413.5566 359.7402 414.4326 359.7402 c414.9141 359.7402 415.3037 359.8281 415.6025 360.0029 c415.6025 366.5469 L417.3984 366.5469 l417.3984 359.1416 Lf*U*u421.167 358.6738 m419.3701 358.6738 L419.3701 369.7305 L421.167 369.7305 l421.167 358.6738 Lf*U*u426.6445 358.7471 m426.4102 358.6396 426.1084 358.5859 425.7383 358.5859 c425.0664 358.5859 424.5381 358.7734 424.1543 359.1484 c423.7695 359.5234 423.5771 360.0469 423.5771 360.7188 c423.5771 365.4072 L422.7002 365.4072 L422.7002 366.5469 L423.5771 366.5469 L423.5771 369.1758 L425.374 369.6729 L425.374 366.5469 L426.6445 366.5469 L426.6445 365.4072 L425.374 365.4072 L425.374 360.8066 L425.374 360.125 425.6572 359.7842 426.2256 359.7842 c426.3408 359.7842 426.4805 359.8076 426.6445 359.8574 c426.6445 358.7471 Lf*U*u433.8301 359.0977 m433.1191 358.7178 432.1699 358.5273 430.9824 358.5273 c428.8398 358.5273 427.7686 359.3262 427.7686 360.9229 c427.7686 361.9453 428.2803 362.7002 429.3027 363.1875 c429.9355 363.4893 430.8896 363.7031 432.165 363.8301 c432.165 364.2539 L432.165 365.1201 431.6445 365.5537 430.6025 365.5537 c429.9502 365.5537 429.293 365.3926 428.6309 365.0713 c428.2217 366.0938 L429.04 366.4932 429.9404 366.6924 430.9238 366.6924 c432.8613 366.6924 433.8301 365.7871 433.8301 363.9756 c433.8301 359.0977 Lf1 D432.165 359.7402 m432.165 362.9824 L431.2939 362.875 430.6768 362.7246 430.3154 362.5303 c429.7275 362.2178 429.4336 361.7021 429.4336 360.9814 c429.4336 360.0078 429.9873 359.5205 431.0938 359.5205 c431.5146 359.5205 431.8721 359.5938 432.165 359.7402 cf*U*u0 D441.791 359.1563 m441.1094 358.7764 440.1943 358.5859 439.0449 358.5859 c437.8379 358.5859 436.918 358.957 436.2852 359.6982 c435.6807 360.4004 435.3789 361.3613 435.3789 362.5811 c435.3789 363.751 435.6553 364.707 436.209 365.4492 c436.8203 366.2783 437.6895 366.6924 438.8154 366.6924 c439.2715 366.6924 439.665 366.6436 439.9951 366.5469 c439.9951 369.7891 L441.791 369.7891 l441.791 359.1563 Lf1 D439.9951 359.9014 m439.9951 365.582 L439.7617 365.6504 439.501 365.6846 439.21 365.6846 c437.834 365.6846 437.1465 364.6846 437.1465 362.6836 c437.1465 360.7109 437.791 359.7256 439.0791 359.7256 c439.5059 359.7256 439.8105 359.7842 439.9951 359.9014 cf*U*u0 D453.7822 359.1563 m453.1006 358.7764 452.1855 358.5859 451.0361 358.5859 c449.8291 358.5859 448.9092 358.957 448.2764 359.6982 c447.6719 360.4004 447.3701 361.3613 447.3701 362.5811 c447.3701 363.751 447.6465 364.707 448.2002 365.4492 c448.8115 366.2783 449.6807 366.6924 450.8066 366.6924 c451.2627 366.6924 451.6563 366.6436 451.9863 366.5469 c451.9863 369.7891 L453.7822 369.7891 l453.7822 359.1563 Lf1 D451.9863 359.9014 m451.9863 365.582 L451.7529 365.6504 451.4922 365.6846 451.2012 365.6846 c449.8252 365.6846 449.1377 364.6846 449.1377 362.6836 c449.1377 360.7109 449.7822 359.7256 451.0703 359.7256 c451.4971 359.7256 451.8018 359.7842 451.9863 359.9014 cf*U*u0 D461.9482 362.6563 m457.126 361.9658 L457.2725 360.4912 457.9883 359.7549 459.2734 359.7549 c460.0332 359.7549 460.6953 359.9053 461.2607 360.207 c461.6846 359.083 L461.0127 358.7129 460.1455 358.5273 459.084 358.5273 c457.877 358.5273 456.9521 358.917 456.3086 359.6963 c455.7246 360.417 455.4326 361.3955 455.4326 362.6318 c455.4326 363.8105 455.6904 364.7549 456.207 365.4658 c456.791 366.2842 457.6533 366.6924 458.793 366.6924 c459.9512 366.6924 460.7939 366.293 461.3193 365.4932 c461.7773 364.8008 461.9863 363.8555 461.9482 362.6563 cf1 D460.2822 363.3623 m460.2822 364.8623 459.7656 365.6123 458.7334 365.6123 c458.0713 365.6123 457.5996 365.2988 457.3164 364.6719 c457.1025 364.2021 457.0049 363.5996 457.0244 362.8662 c460.2822 363.3623 Lf*U*u0 D477.9697 358.6738 m476.0566 358.6738 L475.8818 360.3877 475.6426 362.8125 475.3408 365.9482 c475.3018 366.3564 475.2871 366.7998 475.2969 367.2773 c475.2676 367.2773 L475.1895 366.8682 475.083 366.4248 474.9463 365.9482 c472.8584 358.6738 L471.7041 358.6738 L471.6357 358.8975 470.9424 361.332 469.625 365.9756 c469.5098 366.3848 469.4043 366.8184 469.3086 367.2773 c469.2793 367.2773 L469.2891 366.9072 469.2695 366.4736 469.2207 365.9766 c468.5195 358.6738 L466.8105 358.6738 L468.042 369.6865 L470.0928 369.6865 L472.0713 362.6367 L472.1748 362.2461 472.2686 361.8359 472.3535 361.4072 c472.3809 361.4053 L472.4268 361.6982 472.5195 362.1074 472.6582 362.6348 c474.6982 369.6865 L476.7432 369.6865 l477.9697 358.6738 Lf*U*u485.7998 362.6563 m480.9775 361.9658 L481.124 360.4912 481.8398 359.7549 483.125 359.7549 c483.8848 359.7549 484.5469 359.9053 485.1123 360.207 c485.5361 359.083 L484.8643 358.7129 483.9971 358.5273 482.9355 358.5273 c481.7285 358.5273 480.8037 358.917 480.1602 359.6963 c479.5762 360.417 479.2842 361.3955 479.2842 362.6318 c479.2842 363.8105 479.542 364.7549 480.0586 365.4658 c480.6426 366.2842 481.5049 366.6924 482.6445 366.6924 c483.8027 366.6924 484.6455 366.293 485.1709 365.4932 c485.6289 364.8008 485.8379 363.8555 485.7998 362.6563 cf1 D484.1338 363.3623 m484.1338 364.8623 483.6172 365.6123 482.585 365.6123 c481.9229 365.6123 481.4512 365.2988 481.168 364.6719 c480.9541 364.2021 480.8564 363.5996 480.876 362.8662 c484.1338 363.3623 Lf*U*u0 D493.4961 359.1563 m492.8145 358.7764 491.8994 358.5859 490.75 358.5859 c489.543 358.5859 488.623 358.957 487.9902 359.6982 c487.3857 360.4004 487.084 361.3613 487.084 362.5811 c487.084 363.751 487.3604 364.707 487.9141 365.4492 c488.5254 366.2783 489.3945 366.6924 490.5205 366.6924 c490.9766 366.6924 491.3701 366.6436 491.7002 366.5469 c491.7002 369.7891 L493.4961 369.7891 l493.4961 359.1563 Lf1 D491.7002 359.9014 m491.7002 365.582 L491.4668 365.6504 491.2061 365.6846 490.915 365.6846 c489.5391 365.6846 488.8516 364.6846 488.8516 362.6836 c488.8516 360.7109 489.4961 359.7256 490.7842 359.7256 c491.2109 359.7256 491.5156 359.7842 491.7002 359.9014 cf*U*u0 D497.3672 368.7813 m497.3672 368.5283 497.2695 368.3184 497.0742 368.1533 c496.8799 367.9873 496.6514 367.9053 496.3877 367.9053 c496.125 367.9053 495.8965 367.9873 495.7012 368.1533 c495.5068 368.3184 495.4092 368.5283 495.4092 368.7813 c495.4092 369.0342 495.5068 369.2461 495.7012 369.417 c495.8965 369.5869 496.125 369.6729 496.3877 369.6729 c496.6514 369.6729 496.8799 369.5898 497.0742 369.4238 c497.2695 369.2588 497.3672 369.0439 497.3672 368.7813 cf497.2793 358.6738 m495.4824 358.6738 L495.4824 366.5469 L497.2793 366.5469 l497.2793 358.6738 Lf*U*u503.9102 359.0684 m503.5107 358.708 502.8926 358.5273 502.0557 358.5273 c501.0039 358.5273 500.2002 358.9707 499.6455 359.8574 c499.1777 360.5967 498.9443 361.5225 498.9443 362.6318 c498.9443 363.7422 499.1826 364.6621 499.6602 365.3926 c500.2148 366.2598 501.0186 366.6924 502.0703 366.6924 c502.8594 366.6924 503.4678 366.5127 503.8955 366.1523 c503.5166 365.1445 L503.2334 365.3584 502.8828 365.4658 502.4648 365.4658 c501.3154 365.4658 500.7412 364.5283 500.7412 362.6543 c500.7412 361.9355 500.8477 361.3281 501.0625 360.833 c501.3545 360.1533 501.8125 359.8135 502.4355 359.8135 c502.8633 359.8135 503.2188 359.9297 503.502 360.1641 c503.9102 359.0684 Lf*U*u507.2412 368.7813 m507.2412 368.5283 507.1436 368.3184 506.9482 368.1533 c506.7539 367.9873 506.5254 367.9053 506.2617 367.9053 c505.999 367.9053 505.7705 367.9873 505.5752 368.1533 c505.3809 368.3184 505.2832 368.5283 505.2832 368.7813 c505.2832 369.0342 505.3809 369.2461 505.5752 369.417 c505.7705 369.5869 505.999 369.6729 506.2617 369.6729 c506.5254 369.6729 506.7539 369.5898 506.9482 369.4238 c507.1436 369.2588 507.2412 369.0439 507.2412 368.7813 cf507.1533 358.6738 m505.3564 358.6738 L505.3564 366.5469 L507.1533 366.5469 l507.1533 358.6738 Lf*U*u515.3184 358.6738 m513.5215 358.6738 L513.5215 364.2539 L513.5215 365.1299 513.0547 365.5684 512.1201 365.5684 c511.6777 365.5684 511.2734 365.4951 510.9072 365.3486 c510.9072 358.6738 L509.1104 358.6738 L509.1104 366.123 L509.9189 366.5029 510.9463 366.6924 512.1924 366.6924 c513.0879 366.6924 513.8037 366.5225 514.3398 366.1816 c514.9922 365.7627 515.3184 365.1299 515.3184 364.2822 c515.3184 358.6738 Lf*U*u522.9131 359.0977 m522.2021 358.7178 521.2529 358.5273 520.0654 358.5273 c517.9229 358.5273 516.8516 359.3262 516.8516 360.9229 c516.8516 361.9453 517.3633 362.7002 518.3857 363.1875 c519.0186 363.4893 519.9727 363.7031 521.248 363.8301 c521.248 364.2539 L521.248 365.1201 520.7275 365.5537 519.6855 365.5537 c519.0332 365.5537 518.376 365.3926 517.7139 365.0713 c517.3047 366.0938 L518.123 366.4932 519.0234 366.6924 520.0068 366.6924 c521.9443 366.6924 522.9131 365.7871 522.9131 363.9756 c522.9131 359.0977 Lf1 D521.248 359.7402 m521.248 362.9824 L520.377 362.875 519.7598 362.7246 519.3984 362.5303 c518.8105 362.2178 518.5166 361.7021 518.5166 360.9814 c518.5166 360.0078 519.0703 359.5205 520.1768 359.5205 c520.5977 359.5205 520.9551 359.5938 521.248 359.7402 cf*UUUu1 Ap0 D0 1 1 0 k0 R0 1 1 0 K0.24976 w280.4854 374.7266 m91.2134 374.7266 L91.2134 431.4648 L280.4854 431.4648 L280.4854 374.7266 L(b) *0 0 0 0 k1 w296.4648 342.7773 m74.9971 342.7773 L74.9971 447.4121 L296.4648 447.4121 L296.4648 342.7773 Lfu0 R0 1 1 0 K2 w296.5244 358.7988 m74.9971 358.7988 L74.9971 447.4121 L296.5244 447.4121 L296.5244 358.7988 L(b) *0 Ap0 0 1 0 k1 w1 XR91.4043 428.7871 m104.3223 431.4844 115.1758 431.4844 v126.0288 431.4844 139.5283 428.7871 Y139.5283 392.6816 139.5283 387.2676 V139.5283 383.8828 137.4551 382.0645 136.7178 381.5313 C135.0645 380.3398 127.6626 374.7246 115.4839 374.7246 C104.0234 374.7246 97.0327 379.668 94.2554 381.6133 C93.0093 382.4922 91.4043 384.4102 91.4043 387.2676 C91.4043 391.6582 91.4043 428.7871 Yfuu0 0 0 1 k0 XR135.9316 380.7578 m126.1157 374.3945 115.9238 374.7383 y115.6431 376.0391 115.7549 378.2813 v115.8672 380.5234 117.0908 379.8926 117.9771 381.6641 c118.2979 382.3066 118.5747 382.752 119.0767 384.2578 c119.0972 384.3203 118.4893 395.0645 118.3345 399.623 c118.252 402.0781 117.79 406.1777 117.2495 410.1641 c116.9302 412.5254 116.2124 414.3965 115.8804 416.6387 c115.3999 419.877 114.8423 423.5293 y114.4434 422.498 113.8711 418.6406 113.2969 414.2871 c113.0205 412.1953 112.7441 409.9922 112.4863 407.9336 c111.9395 403.5703 110.5767 391.8906 110.3711 391.2559 c110.0596 390.2949 110.0269 391.5117 y110.834 403.7617 111.0771 409.1348 V111.1958 411.7617 111.394 414.6484 111.7222 417.416 C111.9678 419.4961 112.2861 421.5098 112.6987 423.2988 C114.1011 427.5352 114.5488 427.6211 v114.9951 427.7051 116.6143 424.9492 117.1611 422.498 c118.3989 416.9629 119.1294 416.2559 120.0728 410.4395 c120.9697 404.9141 121.7881 400.293 121.8994 399.5352 c122.3008 396.793 122.1021 388.2402 121.4102 384.8359 C121.2466 383.9043 121.1968 383.5625 120.5898 382.9473 c119.1675 381.5098 118.1558 379.793 118.1558 378.6719 c118.1558 377.5508 117.9688 377.5723 118.2349 376.9219 C120.1108 374.1133 130.894 380.541 V134.2632 382.3047 134.2632 386.2031 V134.2632 425.6113 l123.5713 429.2285 115.3359 429.2285 v107.1006 429.2285 96.7886 425.6191 y96.7886 386.3809 l96.7886 383.9648 97.1396 379.4355 100.5889 377.8906 C91.4043 381.0332 91.4043 386.4277 V91.4043 428.9531 l105.4248 431.5332 115.3423 431.5332 v125.2598 431.5332 139.5283 428.9531 y139.5283 390.0449 139.5283 386.377 v139.5283 382.7109 135.9316 380.7578 YfUUu*u269.1675 413.6953 m268.1865 413.1484 266.8701 412.875 265.2153 412.875 c263.5479 412.875 262.2505 413.3809 261.3262 414.3906 c260.4014 415.4004 259.939 416.8105 259.939 418.6191 c259.939 420.4414 260.4014 421.8926 261.3267 422.9707 c262.2241 424.0098 263.417 424.5293 264.9033 424.5293 c265.5625 424.5293 266.1299 424.457 266.6084 424.3125 c266.6084 428.8906 L269.1675 428.8906 l269.1675 413.6953 Lf1 D266.6084 414.7715 m266.6084 422.9297 L266.2705 423.0273 265.8921 423.0762 265.4707 423.0762 c263.481 423.0762 262.4854 421.6406 262.4854 418.7656 c262.4854 415.9336 263.418 414.5176 265.2827 414.5176 c265.8999 414.5176 266.3408 414.6035 266.6084 414.7715 cf*U*u0 D280.8657 418.8281 m273.9258 417.8203 L274.1353 415.7207 275.167 414.6699 277.0181 414.6699 c278.1113 414.6699 279.0649 414.877 279.8789 415.2891 c280.4868 413.6738 L279.52 413.1406 278.2729 412.875 276.7446 412.875 c275.1177 412.875 273.8335 413.3867 272.894 414.4102 c271.9556 415.4336 271.4863 416.8887 271.4863 418.7813 c271.4863 420.6172 271.917 422.0508 272.7788 423.0801 c273.6421 424.1094 274.8223 424.625 276.3218 424.625 c277.8369 424.625 278.9868 424.1309 279.7725 423.1445 c280.5581 422.1563 280.9219 420.7188 280.8657 418.8281 cf1 D278.4697 419.832 m278.4697 421.9785 277.7246 423.0508 276.2368 423.0508 c275.4502 423.0508 274.8472 422.7344 274.4253 422.1035 c273.9629 421.416 273.7451 420.4219 273.7729 419.1172 c278.4697 419.832 Lf*UUu*u0 D151.8789 382.8496 m147.8555 382.8496 L147.8555 407.7188 L151.8789 407.7188 l151.8789 382.8496 Lf*U*u170.4346 391.7168 m170.4346 388.9707 169.8301 386.7871 168.6211 385.1602 c167.3022 383.4023 165.4458 382.5254 163.0508 382.5254 c160.6553 382.5254 158.7983 383.4023 157.48 385.1602 c156.271 386.7871 155.667 388.9707 155.667 391.7168 c155.667 394.4863 156.271 396.6836 157.48 398.3086 c158.7983 400.0645 160.6553 400.9434 163.0508 400.9434 c165.4678 400.9434 167.3247 400.0645 168.6211 398.3086 c169.8301 396.6836 170.4346 394.4863 170.4346 391.7168 cf1 D166.4434 391.748 m166.4434 396.1875 165.312 398.4063 163.0508 398.4063 c160.7886 398.4063 159.6572 396.1875 159.6572 391.748 c159.6572 387.4199 160.7886 385.2559 163.0508 385.2559 c165.312 385.2559 166.4434 387.4199 166.4434 391.748 cf*U*u0 D184.2236 387.9629 m184.2236 386.4688 183.6411 385.1934 182.4756 384.1387 c181.311 383.0859 179.7832 382.5566 177.8921 382.5566 c175.8696 382.5566 174.2314 382.9844 172.979 383.8398 c174.0337 386.4082 L174.8921 385.7246 176.0024 385.3848 177.3662 385.3848 c178.1797 385.3848 178.8394 385.6211 179.3447 386.0938 c179.8511 386.5664 180.1035 387.1641 180.1035 387.8906 c180.1035 388.6367 179.9058 389.2246 179.5107 389.6523 c179.1152 390.082 178.4453 390.4727 177.501 390.8242 c174.7983 391.8574 173.4473 393.5156 173.4473 395.8008 c173.4473 397.252 173.9683 398.4707 175.0117 399.4609 c176.0552 400.4492 177.4111 400.9434 179.0791 400.9434 c180.8799 400.9434 182.417 400.5254 183.6904 399.6895 c182.7041 397.3496 L181.8921 398.0117 180.9487 398.3418 179.8745 398.3418 c179.0845 398.3418 178.4644 398.1172 178.0156 397.666 c177.5664 397.2168 177.3408 396.6602 177.3408 396.002 c177.3408 394.8379 178.2188 393.9043 179.9756 393.2031 c182.8076 392.0586 184.2236 390.3125 184.2236 387.9629 cf*U*u213.895 382.8496 m209.2017 382.8496 L207.3032 389.1875 L199.3506 389.1875 L197.3813 382.8496 L193.2969 382.8496 L201.4653 407.502 L205.7632 407.502 l213.895 382.8496 Lf1 D206.6582 391.8398 m204.1143 400.5215 L203.7568 401.7402 203.543 402.7324 203.4702 403.498 c203.3989 403.498 L203.2793 402.8535 203.0518 401.8613 202.7188 400.5215 c200.0669 391.8398 l206.6582 391.8398 Lf*U*u0 D230.4375 382.8496 m226.415 382.8496 L226.415 395.4414 L226.415 397.418 225.3506 398.4063 223.2212 398.4063 c222.2104 398.4063 221.2881 398.2422 220.4531 397.9121 c220.4531 382.8496 L216.4316 382.8496 L216.4316 399.6582 L218.2544 400.5156 220.5718 400.9434 223.3853 400.9434 c225.8672 400.9434 227.7026 400.3945 228.8901 399.2969 c229.9219 398.3711 230.4375 397.1094 230.4375 395.5059 c230.4375 382.8496 Lf*U*u248.5693 383.8105 m247.0313 382.9551 244.9634 382.5254 242.3706 382.5254 c239.7539 382.5254 237.7202 383.3145 236.269 384.8984 c234.8184 386.4785 234.0933 388.6875 234.0933 391.5215 c234.0933 394.3789 234.8184 396.6504 236.269 398.3438 c237.6763 399.9688 239.5449 400.7832 241.876 400.7832 c242.9087 400.7832 243.7988 400.6719 244.5469 400.4473 c244.5469 407.6387 L248.5693 407.6387 l248.5693 383.8105 Lf1 D244.5469 385.4883 m244.5469 398.2734 L244.0195 398.4277 243.4253 398.5039 242.7661 398.5039 c239.644 398.5039 238.084 396.252 238.084 391.75 c238.084 387.3125 239.5449 385.0938 242.4697 385.0938 c243.4365 385.0938 244.1284 385.2246 244.5469 385.4883 cf*U*u0 D266.8735 391.8477 m255.9956 390.2637 L256.3252 386.9688 257.9404 385.3203 260.8398 385.3203 c262.5537 385.3203 264.0479 385.6504 265.3232 386.3086 c266.2788 383.7754 L264.7627 382.9414 262.8071 382.5254 260.4121 382.5254 c257.8623 382.5254 255.8521 383.3262 254.3789 384.9297 c252.9077 386.5332 252.1714 388.8184 252.1714 391.7832 c252.1714 394.6621 252.8472 396.9063 254.1987 398.5215 c255.5498 400.1367 257.4019 400.9434 259.7529 400.9434 c262.1274 400.9434 263.9292 400.168 265.1597 398.6191 c266.3901 397.0703 266.9624 394.8125 266.8735 391.8477 cf1 D263.1104 393.4277 m263.1104 396.7891 261.9448 398.4727 259.6147 398.4727 c258.3853 398.4727 257.4395 397.9766 256.7803 396.9883 c256.0552 395.9102 255.7148 394.3496 255.7583 392.3066 c263.1104 393.4277 Lf*U*u0 D280.6953 387.9629 m280.6953 386.4688 280.1133 385.1934 278.9482 384.1387 c277.7827 383.0859 276.2549 382.5566 274.3638 382.5566 c272.3423 382.5566 270.7041 382.9844 269.4497 383.8398 c270.5054 386.4082 L271.3633 385.7246 272.4741 385.3848 273.8379 385.3848 c274.6519 385.3848 275.311 385.6211 275.8164 386.0938 c276.3218 386.5664 276.5752 387.1641 276.5752 387.8906 c276.5752 388.6367 276.3779 389.2246 275.9824 389.6523 c275.5869 390.082 274.9175 390.4727 273.9727 390.8242 c271.27 391.8574 269.918 393.5156 269.918 395.8008 c269.918 397.252 270.4404 398.4707 271.4834 399.4609 c272.5269 400.4492 273.8828 400.9434 275.5518 400.9434 c277.3521 400.9434 278.8892 400.5254 280.1616 399.6895 c279.1748 397.3496 L278.3638 398.0117 277.4204 398.3418 276.3467 398.3418 c275.5571 398.3418 274.9365 398.1172 274.4868 397.666 c274.0366 397.2168 273.8135 396.6602 273.8135 396.002 c273.8135 394.8379 274.6914 393.9043 276.4478 393.2031 c279.2793 392.0586 280.6953 390.3125 280.6953 387.9629 cf*UUu*u169.0776 413.0469 m166.5166 413.0469 L166.5166 421.082 L166.5166 422.3438 165.8364 422.9746 164.4766 422.9746 c163.832 422.9746 163.2427 422.8691 162.7095 422.6582 c162.7095 413.0469 L160.1494 413.0469 L160.1494 423.7695 L161.3115 424.3164 162.7896 424.5898 164.5815 424.5898 c166.1641 424.5898 167.334 424.2383 168.0894 423.5391 c168.748 422.9512 169.0776 422.1445 169.0776 421.1191 c169.0776 413.0469 Lf*U*u174.6001 427.6074 m174.6001 427.2559 174.4634 426.957 174.1895 426.7109 c173.916 426.4648 173.583 426.3438 173.1904 426.3438 c172.7979 426.3438 172.4648 426.4648 172.1909 426.7109 c171.918 426.957 171.7808 427.2559 171.7808 427.6074 c171.7808 427.957 171.918 428.2578 172.1909 428.5117 c172.4648 428.7637 172.7979 428.8906 173.1904 428.8906 c173.583 428.8906 173.916 428.7676 174.1895 428.5215 c174.4634 428.2754 174.6001 427.9707 174.6001 427.6074 cf174.4648 413.0469 m171.9043 413.0469 L171.9043 424.3848 L174.4648 424.3848 l174.4648 413.0469 Lf*U*u186.1406 424.3848 m182.502 413.0469 L180.063 413.0469 L176.3599 424.3848 L179.0947 424.3848 L181.0928 417.0664 L181.2471 416.5195 181.3374 416.002 181.3662 415.5117 c181.4077 415.5117 L181.478 415.918 181.5762 416.4375 181.7021 417.0664 c183.7427 424.3848 l186.1406 424.3848 Lf*U*u196.8828 418.7949 m189.9429 417.7852 L190.1528 415.6855 191.1841 414.6348 193.0332 414.6348 c194.1284 414.6348 195.0811 414.8418 195.895 415.2539 c196.5049 413.6387 L195.5371 413.1055 194.29 412.8398 192.7607 412.8398 c191.1338 412.8398 189.8516 413.3535 188.9111 414.375 c187.9717 415.3984 187.5029 416.8555 187.5029 418.7461 c187.5029 420.584 187.9336 422.0156 188.7959 423.0449 c189.6582 424.0762 190.8394 424.5898 192.3398 424.5898 c193.853 424.5898 195.0039 424.0957 195.7896 423.1094 c196.5732 422.1211 196.939 420.6836 196.8828 418.7949 cf1 D194.4868 419.7988 m194.4868 421.9434 193.7417 423.0156 192.2544 423.0156 c191.4678 423.0156 190.8643 422.6992 190.4424 422.0684 c189.979 421.3828 189.7617 420.3867 189.79 419.082 c194.4868 419.7988 Lf*U*u0 D204.6768 424.5762 m204.1709 422.7012 L203.792 422.8281 203.3979 422.8906 202.9912 422.8906 c202.5 422.8906 202.0923 422.7988 201.7686 422.6172 c201.7686 413.0469 L199.2085 413.0469 L199.2085 423.7773 l200.4565 424.3789 202.2793 424.6465 204.6768 424.5762 cf*U*u212.8506 416.3066 m212.8506 415.3516 212.48 414.5371 211.7354 413.8652 c210.9912 413.1895 210.0171 412.8555 208.8115 412.8555 c207.52 412.8555 206.4751 413.1289 205.6753 413.6758 c206.3486 415.3164 L206.8955 414.8809 207.6035 414.6621 208.4746 414.6621 c208.9932 414.6621 209.4141 414.8125 209.7378 415.1152 c210.0596 415.4141 210.2212 415.7969 210.2212 416.2617 c210.2212 416.7383 210.0947 417.1133 209.8433 417.3867 c209.5898 417.6582 209.1636 417.9082 208.561 418.1328 c206.8384 418.791 205.9761 419.8516 205.9761 421.3105 c205.9761 422.2344 206.3081 423.0137 206.9746 423.6445 c207.6396 424.2754 208.5039 424.5898 209.5688 424.5898 c210.7178 424.5898 211.6987 424.3242 212.5107 423.793 c211.8794 422.3008 L211.3618 422.7227 210.7588 422.9336 210.0732 422.9336 c209.5688 422.9336 209.1724 422.7891 208.8853 422.502 c208.5986 422.2148 208.4556 421.8594 208.4556 421.4395 c208.4556 420.6953 209.0151 420.0996 210.1377 419.6523 c211.9453 418.9199 212.8506 417.8066 212.8506 416.3066 cf*U*u217.8657 427.6074 m217.8657 427.2559 217.7285 426.957 217.4561 426.7109 c217.1821 426.4648 216.8496 426.3438 216.457 426.3438 c216.064 426.3438 215.7319 426.4648 215.4575 426.7109 c215.1851 426.957 215.0474 427.2559 215.0474 427.6074 c215.0474 427.957 215.1851 428.2578 215.4575 428.5117 c215.7319 428.7637 216.064 428.8906 216.457 428.8906 c216.8496 428.8906 217.1821 428.7676 217.4561 428.5215 c217.7285 428.2754 217.8657 427.9707 217.8657 427.6074 cf217.7324 413.0469 m215.1709 413.0469 L215.1709 424.3848 L217.7324 424.3848 l217.7324 413.0469 Lf*U*u229.376 413.6602 m228.395 413.1133 227.0786 412.8398 225.4233 412.8398 c223.7563 412.8398 222.459 413.3457 221.5342 414.3555 c220.6089 415.3652 220.1465 416.7754 220.1465 418.584 c220.1465 420.4063 220.6099 421.8594 221.5352 422.9375 c222.4326 423.9746 223.6255 424.4941 225.1113 424.4941 c225.7705 424.4941 226.3384 424.4219 226.8159 424.2793 c226.8159 428.8555 L229.376 428.8555 l229.376 413.6602 Lf1 D226.8159 414.7363 m226.8159 422.8945 L226.479 422.9922 226.1011 423.043 225.6802 423.043 c223.6895 423.043 222.6943 421.6074 222.6943 418.7324 c222.6943 415.9004 223.626 414.4844 225.4912 414.4844 c226.1084 414.4844 226.5493 414.5684 226.8159 414.7363 cf*U*u0 D240.2939 413.6602 m239.2705 413.1133 237.9048 412.8398 236.1943 412.8398 c233.1113 412.8398 231.5713 413.9883 231.5713 416.2871 c231.5713 417.6582 232.1948 418.6895 233.4419 419.375 c234.4229 419.9063 235.9072 420.2715 237.8979 420.4668 c237.8979 421.0762 L237.8979 422.3242 237.1475 422.9453 235.6479 422.9453 c234.709 422.9453 233.7651 422.7168 232.8105 422.2598 c232.2227 423.7285 L233.3994 424.3027 234.6958 424.5898 236.1118 424.5898 c238.8999 424.5898 240.2939 423.2871 240.2939 420.6797 c240.2939 413.6602 Lf1 D237.8979 414.5801 m237.8979 419.252 L236.5547 419.082 235.604 418.8242 235.043 418.4727 c234.3452 418.0371 233.9937 417.3379 233.9937 416.3691 c233.9937 414.9668 234.7847 414.2637 236.3652 414.2637 c236.9673 414.2637 237.4775 414.3691 237.8979 414.5801 cf*U*u0 D251.8398 413.6602 m250.8589 413.1133 249.5415 412.8398 247.8877 412.8398 c246.2192 412.8398 244.9238 413.3457 243.9976 414.3555 c243.0728 415.3652 242.6104 416.7754 242.6104 418.584 c242.6104 420.4063 243.0728 421.8594 243.999 422.9375 c244.8965 423.9746 246.0884 424.4941 247.5762 424.4941 c248.2354 424.4941 248.8032 424.4219 249.2798 424.2793 c249.2798 428.8555 L251.8398 428.8555 l251.8398 413.6602 Lf1 D249.2798 414.7363 m249.2798 422.8945 L248.9429 422.9922 248.5645 423.043 248.144 423.043 c246.1523 423.043 245.1577 421.6074 245.1577 418.7324 c245.1577 415.9004 246.0894 414.4844 247.9561 414.4844 c248.5713 414.4844 249.0132 414.5684 249.2798 414.7363 cf*UU*u0 D147.8242 428.8301 m150.5513 428.8301 L150.5513 416.6426 L150.5513 415.3008 151.2729 414.6309 152.7168 414.6309 c153.4019 414.6309 154.0273 414.7422 154.5923 414.9648 c154.5923 428.8301 L157.3198 428.8301 L157.3198 413.7813 L156.0835 413.2012 154.5122 412.9102 152.6055 412.9102 c150.9229 412.9102 149.6782 413.2832 148.8735 414.0273 c148.1743 414.6543 147.8242 415.5098 147.8242 416.5996 c147.8242 428.8301 Lf*UUu*u153.3369 368.6904 m150.0356 368.6904 L150.0356 365.374 L152.9717 365.374 L152.9717 364.0449 L150.0356 364.0449 L150.0356 359.0938 L148.02 359.0938 L148.02 370.0342 L153.3369 370.0342 l153.3369 368.6904 Lf*U*u160.3188 359.5176 m159.6079 359.1377 158.6582 358.9473 157.4707 358.9473 c155.3281 358.9473 154.2573 359.7461 154.2573 361.3428 c154.2573 362.3652 154.7686 363.1201 155.7905 363.6074 c156.4238 363.9092 157.3779 364.123 158.6538 364.25 c158.6538 364.6738 L158.6538 365.54 158.1328 365.9736 157.0908 365.9736 c156.4385 365.9736 155.7808 365.8125 155.1187 365.4912 c154.71 366.5137 L155.5278 366.9131 156.4282 367.1123 157.4121 367.1123 c159.3496 367.1123 160.3188 366.207 160.3188 364.3955 c160.3188 359.5176 Lf1 D158.6538 360.1602 m158.6538 363.4023 L157.7822 363.2949 157.1655 363.1445 156.8032 362.9502 c156.2158 362.6377 155.9224 362.1221 155.9224 361.4014 c155.9224 360.4277 156.4751 359.9404 157.5815 359.9404 c158.0024 359.9404 158.3599 360.0137 158.6538 360.1602 cf*U*u0 D166.877 359.4883 m166.4775 359.1279 165.8594 358.9473 165.022 358.9473 c163.9702 358.9473 163.167 359.3906 162.6118 360.2773 c162.1445 361.0166 161.9106 361.9424 161.9106 363.0518 c161.9106 364.1621 162.1494 365.082 162.6265 365.8125 c163.1816 366.6797 163.9849 367.1123 165.0366 367.1123 c165.8252 367.1123 166.4336 366.9326 166.8623 366.5723 c166.4824 365.5645 L166.1997 365.7783 165.8496 365.8857 165.4307 365.8857 c164.2817 365.8857 163.7075 364.9482 163.7075 363.0742 c163.7075 362.3555 163.8145 361.748 164.0288 361.2529 c164.3208 360.5732 164.7783 360.2334 165.4019 360.2334 c165.8301 360.2334 166.1855 360.3496 166.4678 360.584 c166.877 359.4883 Lf*U*u174.3555 359.5615 m173.5664 359.1426 172.5586 358.9326 171.3315 358.9326 c169.2964 358.9326 168.2788 359.8193 168.2788 361.5918 c168.2788 366.9668 L170.0757 366.9668 L170.0757 361.4893 L170.0757 360.6025 170.5132 360.1602 171.3892 360.1602 c171.8701 360.1602 172.2603 360.248 172.5586 360.4229 c172.5586 366.9668 L174.3555 366.9668 l174.3555 359.5615 Lf*U*u178.1235 359.0938 m176.3271 359.0938 L176.3271 370.1504 L178.1235 370.1504 l178.1235 359.0938 Lf*U*u183.6011 359.167 m183.3672 359.0596 183.0654 359.0059 182.6953 359.0059 c182.0234 359.0059 181.4951 359.1934 181.1104 359.5684 c180.7256 359.9434 180.5337 360.4668 180.5337 361.1387 c180.5337 365.8271 L179.6572 365.8271 L179.6572 366.9668 L180.5337 366.9668 L180.5337 369.5957 L182.3301 370.0928 L182.3301 366.9668 L183.6011 366.9668 L183.6011 365.8271 L182.3301 365.8271 L182.3301 361.2266 L182.3301 360.5449 182.6143 360.2041 183.1821 360.2041 c183.2974 360.2041 183.437 360.2275 183.6011 360.2773 c183.6011 359.167 Lf*U*u190.7871 359.5176 m190.0762 359.1377 189.1265 358.9473 187.939 358.9473 c185.7964 358.9473 184.7256 359.7461 184.7256 361.3428 c184.7256 362.3652 185.2368 363.1201 186.2588 363.6074 c186.8921 363.9092 187.8462 364.123 189.1221 364.25 c189.1221 364.6738 L189.1221 365.54 188.6011 365.9736 187.5591 365.9736 c186.9067 365.9736 186.249 365.8125 185.5869 365.4912 c185.1782 366.5137 L185.9961 366.9131 186.8965 367.1123 187.8804 367.1123 c189.8179 367.1123 190.7871 366.207 190.7871 364.3955 c190.7871 359.5176 Lf1 D189.1221 360.1602 m189.1221 363.4023 L188.2505 363.2949 187.6338 363.1445 187.2715 362.9502 c186.6841 362.6377 186.3906 362.1221 186.3906 361.4014 c186.3906 360.4277 186.9434 359.9404 188.0498 359.9404 c188.4707 359.9404 188.8281 360.0137 189.1221 360.1602 cf*U*u0 D198.7476 359.5762 m198.0654 359.1963 197.1504 359.0059 196.0015 359.0059 c194.7939 359.0059 193.8735 359.377 193.2407 360.1182 c192.6367 360.8203 192.335 361.7813 192.335 363.001 c192.335 364.1709 192.6118 365.127 193.165 365.8691 c193.7764 366.6982 194.645 367.1123 195.7715 367.1123 c196.2275 367.1123 196.6206 367.0635 196.9507 366.9668 c196.9507 370.209 L198.7476 370.209 l198.7476 359.5762 Lf1 D196.9507 360.3213 m196.9507 366.002 L196.7183 366.0703 196.4565 366.1045 196.166 366.1045 c194.7905 366.1045 194.1025 365.1045 194.1025 363.1035 c194.1025 361.1309 194.7466 360.1455 196.0352 360.1455 c196.4614 360.1455 196.7666 360.2041 196.9507 360.3213 cf*U*u0 D210.7388 359.5762 m210.0566 359.1963 209.1416 359.0059 207.9927 359.0059 c206.7852 359.0059 205.8647 359.377 205.2319 360.1182 c204.6279 360.8203 204.3262 361.7813 204.3262 363.001 c204.3262 364.1709 204.603 365.127 205.1563 365.8691 c205.7676 366.6982 206.6362 367.1123 207.7627 367.1123 c208.2188 367.1123 208.6118 367.0635 208.9419 366.9668 c208.9419 370.209 L210.7388 370.209 l210.7388 359.5762 Lf1 D208.9419 360.3213 m208.9419 366.002 L208.7095 366.0703 208.4478 366.1045 208.1572 366.1045 c206.7817 366.1045 206.0938 365.1045 206.0938 363.1035 c206.0938 361.1309 206.7378 360.1455 208.0264 360.1455 c208.4526 360.1455 208.7578 360.2041 208.9419 360.3213 cf*U*u0 D218.9038 363.0762 m214.0825 362.3857 L214.2285 360.9111 214.9443 360.1748 216.23 360.1748 c216.9893 360.1748 217.6514 360.3252 218.2168 360.627 c218.6401 359.5029 L217.9683 359.1328 217.1016 358.9473 216.0405 358.9473 c214.833 358.9473 213.9077 359.3369 213.2651 360.1162 c212.6807 360.8369 212.3887 361.8154 212.3887 363.0518 c212.3887 364.2305 212.6465 365.1748 213.1631 365.8857 c213.7471 366.7041 214.6089 367.1123 215.7485 367.1123 c216.9072 367.1123 217.7495 366.7129 218.2759 365.9131 c218.7334 365.2207 218.9429 364.2754 218.9038 363.0762 cf1 D217.2378 363.7822 m217.2378 365.2822 216.7217 366.0322 215.6899 366.0322 c215.0273 366.0322 214.5552 365.7188 214.2729 365.0918 c214.0586 364.6221 213.9614 364.0195 213.981 363.2861 c217.2378 363.7822 Lf*U*u0 D234.9258 359.0938 m233.0122 359.0938 L232.8369 360.8076 232.5981 363.2324 232.2964 366.3682 c232.2573 366.7764 232.2432 367.2197 232.2529 367.6973 c232.2236 367.6973 L232.1455 367.2881 232.0386 366.8447 231.9023 366.3682 c229.8135 359.0938 L228.6597 359.0938 L228.5913 359.3174 227.8984 361.752 226.5811 366.3955 c226.4658 366.8047 226.3599 367.2383 226.2642 367.6973 c226.2349 367.6973 L226.2446 367.3271 226.2251 366.8936 226.1763 366.3965 c225.4756 359.0938 L223.7666 359.0938 L224.9971 370.1064 L227.0488 370.1064 L229.0269 363.0566 L229.1299 362.666 229.2241 362.2559 229.3086 361.8271 c229.3364 361.8252 L229.3828 362.1182 229.4751 362.5273 229.6138 363.0547 c231.6538 370.1064 L233.6987 370.1064 l234.9258 359.0938 Lf*U*u242.7554 363.0762 m237.9341 362.3857 L238.0801 360.9111 238.7959 360.1748 240.0815 360.1748 c240.8408 360.1748 241.5029 360.3252 242.0684 360.627 c242.4917 359.5029 L241.8198 359.1328 240.9531 358.9473 239.8921 358.9473 c238.6846 358.9473 237.7593 359.3369 237.1167 360.1162 c236.5322 360.8369 236.2402 361.8154 236.2402 363.0518 c236.2402 364.2305 236.498 365.1748 237.0146 365.8857 c237.5986 366.7041 238.4604 367.1123 239.6001 367.1123 c240.7588 367.1123 241.6011 366.7129 242.1274 365.9131 c242.585 365.2207 242.7944 364.2754 242.7554 363.0762 cf1 D241.0894 363.7822 m241.0894 365.2822 240.5732 366.0322 239.5415 366.0322 c238.8789 366.0322 238.4067 365.7188 238.1245 365.0918 c237.9102 364.6221 237.813 364.0195 237.8325 363.2861 c241.0894 363.7822 Lf*U*u0 D250.4521 359.5762 m249.77 359.1963 248.855 359.0059 247.7061 359.0059 c246.4985 359.0059 245.5781 359.377 244.9453 360.1182 c244.3413 360.8203 244.0396 361.7813 244.0396 363.001 c244.0396 364.1709 244.3164 365.127 244.8696 365.8691 c245.481 366.6982 246.3496 367.1123 247.4761 367.1123 c247.9321 367.1123 248.3252 367.0635 248.6553 366.9668 c248.6553 370.209 L250.4521 370.209 l250.4521 359.5762 Lf1 D248.6553 360.3213 m248.6553 366.002 L248.4229 366.0703 248.1611 366.1045 247.8706 366.1045 c246.4951 366.1045 245.8071 365.1045 245.8071 363.1035 c245.8071 361.1309 246.4512 360.1455 247.7397 360.1455 c248.166 360.1455 248.4712 360.2041 248.6553 360.3213 cf*U*u0 D254.3228 369.2012 m254.3228 368.9482 254.2251 368.7383 254.0308 368.5732 c253.8359 368.4072 253.6069 368.3252 253.3442 368.3252 c253.0811 368.3252 252.8525 368.4072 252.6577 368.5732 c252.4629 368.7383 252.3657 368.9482 252.3657 369.2012 c252.3657 369.4541 252.4629 369.666 252.6577 369.8369 c252.8525 370.0068 253.0811 370.0928 253.3442 370.0928 c253.6069 370.0928 253.8359 370.0098 254.0308 369.8438 c254.2251 369.6787 254.3228 369.4639 254.3228 369.2012 cf254.2354 359.0938 m252.4385 359.0938 L252.4385 366.9668 L254.2354 366.9668 l254.2354 359.0938 Lf*U*u260.8662 359.4883 m260.4668 359.1279 259.8486 358.9473 259.0112 358.9473 c257.9595 358.9473 257.1563 359.3906 256.6011 360.2773 c256.1338 361.0166 255.8999 361.9424 255.8999 363.0518 c255.8999 364.1621 256.1387 365.082 256.6157 365.8125 c257.1709 366.6797 257.9741 367.1123 259.0259 367.1123 c259.8145 367.1123 260.4229 366.9326 260.8516 366.5723 c260.4717 365.5645 L260.189 365.7783 259.8389 365.8857 259.4199 365.8857 c258.271 365.8857 257.6968 364.9482 257.6968 363.0742 c257.6968 362.3555 257.8037 361.748 258.0181 361.2529 c258.3101 360.5732 258.7676 360.2334 259.3911 360.2334 c259.8193 360.2334 260.1748 360.3496 260.457 360.584 c260.8662 359.4883 Lf*U*u264.1963 369.2012 m264.1963 368.9482 264.0986 368.7383 263.9043 368.5732 c263.7095 368.4072 263.4805 368.3252 263.2178 368.3252 c262.9546 368.3252 262.7261 368.4072 262.5313 368.5732 c262.3364 368.7383 262.2393 368.9482 262.2393 369.2012 c262.2393 369.4541 262.3364 369.666 262.5313 369.8369 c262.7261 370.0068 262.9546 370.0928 263.2178 370.0928 c263.4805 370.0928 263.7095 370.0098 263.9043 369.8438 c264.0986 369.6787 264.1963 369.4639 264.1963 369.2012 cf264.1089 359.0938 m262.312 359.0938 L262.312 366.9668 L264.1089 366.9668 l264.1089 359.0938 Lf*U*u272.2734 359.0938 m270.4766 359.0938 L270.4766 364.6738 L270.4766 365.5498 270.0098 365.9883 269.0757 365.9883 c268.6323 365.9883 268.228 365.915 267.8623 365.7686 c267.8623 359.0938 L266.0654 359.0938 L266.0654 366.543 L266.8735 366.9229 267.9009 367.1123 269.1475 367.1123 c270.0435 367.1123 270.7593 366.9424 271.2949 366.6016 c271.9468 366.1826 272.2734 365.5498 272.2734 364.7021 c272.2734 359.0938 Lf*U*u279.8687 359.5176 m279.1577 359.1377 278.208 358.9473 277.0205 358.9473 c274.8779 358.9473 273.8071 359.7461 273.8071 361.3428 c273.8071 362.3652 274.3184 363.1201 275.3403 363.6074 c275.9736 363.9092 276.9277 364.123 278.2036 364.25 c278.2036 364.6738 L278.2036 365.54 277.6826 365.9736 276.6406 365.9736 c275.9883 365.9736 275.3306 365.8125 274.6685 365.4912 c274.2598 366.5137 L275.0776 366.9131 275.978 367.1123 276.9619 367.1123 c278.8994 367.1123 279.8687 366.207 279.8687 364.3955 c279.8687 359.5176 Lf1 D278.2036 360.1602 m278.2036 363.4023 L277.332 363.2949 276.7153 363.1445 276.353 362.9502 c275.7656 362.6377 275.4722 362.1221 275.4722 361.4014 c275.4722 360.4277 276.0249 359.9404 277.1313 359.9404 c277.5522 359.9404 277.9097 360.0137 278.2036 360.1602 cf*UUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF