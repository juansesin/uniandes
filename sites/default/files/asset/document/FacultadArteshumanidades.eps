%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.2%%For: (Hugo) ()%%Title: (firma_facartes.eps)%%CreationDate: 10/29/07 11:22 PM%%BoundingBox: 74 342 539 448%%HiResBoundingBox: 74.6426 342.791 538.7559 447.5391%%DocumentProcessColors: Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: 26.5 16 585.5 799%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -354 793 1.2 1589 965 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 32 8%%BeginData: 5784 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFD0FFFA8A8FD057DA8A8FD39FFA8A8FD057DA8A8FD%32FF7D27F8272751517C515127272752FFFF52A852FFFFFF7EA8FD0AFF7D%A8FFA859FD05FF52FFFFFFA87DFD11FF7D27272752525352532727F82752%FFA87DA87DFFFFFFA87DFD0AFFA87DFFA8A8FD04FFA87DFFFFFFA87DFD0B%FF7DF87CA5CCFE7C7BCCFECC7B2727FFA8527D52A87DA8A87DA8FFA8A8A8%FFA87DA884A87DFF5252A87DAFFF7D27FFFFFF5252FF7DFD0FFF52277DFF%FFFF537DFFFFA87DF852FFFF277D52FF7DFFA87DA8FFA8FF7DFFFD04A87D%A8FF5252FF7DFFFF7D27FFFFFF527DFFA8FD09FF5227A4FEC6FE2727C6FE%C6FE2727FFFF27A85252275252522E7D52522759527D277D7D7D525252A8%2753525227FFFF522852525227FD0EFF52F8FD04FF2727FD04FF5227FFA8%527D5352522E7DFD08527D277D7D5252277DA827527D5252FFFF52525259%2752FD08FF7DF8C7FECCC75227CCFECCFE5227FFA852A85252A85253527D%277E277D7D52FFA87D7D527D7D597D535252A852FFFF52A85252597DFD0E%FF5227FD04FF5252FD04FF2752FFFF27A8527D7D7D527D52527D527D7E28%FF7D7D535252A8597E525252A852FFA8527E7D277D7DFD08FF5227A5FEC6%C751517BFEC6FE2727FFFF275252527D52527D7D27AF5252A852A8525252%7DFD0452277D7D5227FFFF52277D52527DFD0EFF52F8FFFFFF7E7D27A8FF%FFFF2827FFFF52277D5284527D7D7D27FF28597E52A87D27535259277D27%52527D2752FFFF5252527D52A8FD08FF7DF8C7FEFE9F7C517CFECCFE5127%FFFFFF7DFFA8FFA8FFA8FFA8FFFFA8A8FFFFA8A8FFFFFF7DFFA8A8A8FFA8%A9FFFFFFA8A8FF7EA8FD0EFF5227A8FFFFA87D7D7DFFFFFF2752FFFFFFA8%A8FFA8A8A8FFFFA8FFFF7DFFA8FF7EFFA8FFFFA8A8FF7DFFFFA8A8FFFFFF%7DFFFFA8A8FD08FF52279FFEC6A57B7C51FEC6FE2727CAFF7DFD0DFFA8A8%FD0AFFA8A8FD17FF52F8FFFFFF7DA85252FFFFFF5227FFA87DFD0EFF7DFD%0AFFA8A8FD11FF7DF8C7FECC9FA69F52FECCFE5127FFFF277DFD0CFF7DF8%7DFD09FFA827FD17FF5227FFFFFFA8A8A852FFFFFF2752FFFF20A8FD0CFF%52277DFD09FF7D27FD11FF5227A5FEC69F9FA527CCC6FE2727CFFFF884FF%A852A8FFFF7D7EFD04FF272728FFFFA8527DA8FFFF7D5227FFFF527DFFFF%A87DA8FD0EFF52F8FFFFFF7DA87D28FFFFFF5227FFA827A8FF7D7DA8FFA8%7D7DFD04FF52F852FFFF7D7D7DFFFFFF7D5227FFFF7D7DFFFFA87DFD09FF%7DF8A5FECC9FC7A527C7FEFE5227FFA927A8A8275227FF525252FFFFFFA8%275227FFFFF8522752FF53275227FF5252277DA82727A8FD0EFF5227FFFF%FFA8FFA827FFFFFF2752FFFF27FF7D272752FF52277DFFFFFFA8277D27FF%A827522752FF52525227FFFD0452FF27527DFD08FF5227A5FEC6A0A4C7F8%CCC6FE2727FFFFF8A82752FF277D2727FD04FF7D27FFF87DFF27A8A827A8%F8A87D277D27A87DF87EF87DFD0FFF52F8FFFFFF7DFFA827A8FFFF2727FF%A827842752FFF8A8F852FD04FF5252A8277DA8F8FF59277D27A87D277EF8%FF522759277DFD09FF7DF8C7FECCA5CCC627C7CCFE5227FFFF277D527DFF%277DA82727FFFFFF5227522752FF27FFA852A827FFA827A82759527DFF7D%F87DFD0EFF5227FD05FFA827FFFFFF2752FFFF27A8277EFF277DA82752FF%FFFF522752F87DA827A8A8278427FF7D527D27527D7DFF52277DFD08FF52%27A5FEC6FEC6C727CCC6FE2727FFFFF8A82852A8277DFF7D27A8FFA82752%A85227A827A8A827A8F8A87D27A8277DFD04FF5227FD0EFF52F8FD05FFA8%27A8FFFF5227FFA827A85252FFF8A8FF7DF8A9FFA8F87DA85227A8F8AF7D%278427A87D27A8F8A8FFFFA8FF272EFD08FF7DF8C7FEFEFECCC752C6CCFE%2727FFFF27A8A9272752FF522752FFFFA827FFFFA8F8A827FF7D52FF7D27%2852FF5227277D7E27277DFD0EFF5227A8FD05FF52FFFFFF2752FFFF27FF%7D272752FF522752FFFF7D27FFFF7D277D28A87D27FF52272752FF7D2727%7DA827277DFD08FFA85251FEC6FEC67C7BFEA45127A8FFFFA8FFFFA87DFF%FFA87DFFFFFFA8A8FFFFFFA8A8A8FFFFA8FFFFA87DFFFFFF7EA8A8FF7DA8%FD10FF277DFD04FF52A8FFFF2727A8FFA8A8A8FFA8A8FFFF7DA8A8FFFFFF%A8FFFFFFA8FFA8FFA8A8FFFF7DA8A8FFFFA87DFFA8A8A8FD0BFFA8CDCCFE%CC277C7B5252FD39FF7EFD04FF527D7D527DFD35FFCFCEC97D7DA8A8FD3F%FF7D7D7DFD34FFA8FD7EFF527DA8FFA8A8A87D28A8A8FF52A8FF7D7DFFFF%A827FFA87DA8FFA8FFA8FFFF7D527DFD05A8A9A8A87DA8527DFFFF52FD04%A8FD0EFF7D52AFFFA8A8FF7D527DFFFF597DFF52A8A8FFA852FFA852FFA8%FFA8FFA8FF7D7D59FFA8A8A8FFA8FFA8A8A87D7DFFFF7DA8FFA8FD09FF7D%527D527D527D52527D525252A87D275927FF7D277D7D5253527DA8A827FF%7D52287D5252277D5253FD05527DFD0552A8FD0EFF527D527D527D535252%7D527D27FF7D525252FF7D277D5252527D52A97D52A87D27527D7D52527D%7D5252527D277D527D2E52527D7DFD08FF53A85252527D287D5252275227%FF7D525252AF7D52527D7D527D527DA827FF7DFD05527D5252277D525227%5228522752527D52FD0EFF7D7D52527D5252527DFD0452A87D285252FF52%52277D525252537DAF27FF527D275252537D522EFD0A527D527DFD0BFFA8%FFA8FFFFFFA8FD05FFA8FFA8FFFFFFA8FFAFFFA8FFFFFF7DFFFFFFA8FFFF%FFA8FFA8FFA8FFFFFFA8FD05FFA8FD0FFFAFFFA8FFA8A8A8FFFFA8A8FFA8%FD04FFA8FFFFFFA8FFFFA8A8A8FFA87DFD04FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FD26FFA8FDFCFFFDFCFFFD66FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 7 Bd[<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br[0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 7 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br[0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.0313 29.4307 L3.0313 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.8906 50.123 L5.8906 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.8906 50.123 m25.0264 50.123 L25.0264 32.4961 L5.8906 32.4961 L5.8906 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0235 0.64 0.78 0.0039 k 0.0235 0.64 0.78 0.0039 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.3057 48.793 L8.3057 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1059 0.9294 0.8314 0.0196 k 0.1059 0.9294 0.8314 0.0196 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.6758 L28.9355 1.6758 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.957 L47.6777 4.957 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.957 L30.0527 4.957 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.4315 0 0.8301 0 k 0.4315 0 0.8301 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.5029 L47.4199 6.5029 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4941 0.9412 0 0 k 0.4941 0.9412 0 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.7529 26.1445 L2.7529 2.1699 L25.4316 2.1699 L25.4316 26.1445 Lf*U*u4.9561 7.4004 m22.582 7.4004 L22.582 25.0273 L4.9561 25.0273 L4.9561 7.4004 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.6738 m4.9561 5.6738 L4.9561 25.0273 L22.582 25.0273 L22.582 5.6738 Lf20.3887 21.3281 m7.5811 21.3281 L7.5811 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.9137 0 0.498 0 k 0.9137 0 0.498 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.9355 8.7363 m21.0371 8.7363 L21.0371 22.8379 L6.9355 22.8379 L6.9355 8.7363 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8235 0 0.0039 0 k 0.8235 0 0.0039 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0275 0.2078 0.4431 0.0039 k 0.0275 0.2078 0.4431 0.0039 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.8902 0 0 k 0 0.8902 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7884.8833 8586.9551 m-7793.0479 8586.9551 L-7793.0479 8582.6758 L-7884.8833 8582.6758 L-7884.8833 8586.9551 Ln0 O0.695313 0.671875 0.636719 0.738281 k-7884.6631 8584.2754 m-7885 8584.3418 -7884.4814 8584.5313 -7884.8833 8584.3887 C-7884.8379 8584.2705 -7884.7725 8584.1816 -7884.6631 8584.2754 Cf-7794.1675 8584.4414 m-7795.2524 8585.2041 -7796.6816 8584.4336 -7797.8701 8584.9199 C-7798.0098 8584.9521 -7797.8345 8584.502 -7798.1484 8584.6025 C-7799.3008 8585.1953 -7801.1162 8584.8418 -7802.5195 8584.3848 C-7802.4346 8584.2666 L-7802.7017 8584.1816 -7803.0283 8584.5723 -7803.3115 8584.5176 C-7803.3135 8584.4395 -7803.2207 8584.4063 -7803.2861 8584.2979 C-7803.3574 8584.5352 -7803.7983 8584.4082 -7803.9185 8584.584 C-7804.0303 8584.4922 -7804.0195 8584.3047 -7804.1641 8584.2002 C-7804.3262 8584.4697 L-7804.7769 8585.1094 -7805.4209 8584.4258 -7806.0361 8584.7559 C-7806.0063 8584.6934 -7805.9453 8584.6445 -7805.9941 8584.584 C-7806.9814 8584.9727 -7808.2168 8584.8994 -7809.3208 8585.043 C-7809.2769 8584.9482 -7809.2363 8584.7754 -7809.3008 8584.668 C-7809.3555 8584.9512 -7809.6963 8585.0225 -7809.9922 8585.0781 C-7810.1255 8584.7871 -7810.4995 8585.3438 -7810.8467 8585.1826 C-7810.8169 8585.1191 L-7811.0732 8585.4238 -7811.1973 8584.9434 -7811.4053 8585.3086 C-7811.5684 8585.0801 L-7811.6807 8585.4902 -7811.9395 8584.8672 -7812.1514 8585.0762 C-7812.1445 8585.1602 L-7812.3442 8585.2598 -7812.4482 8585.0537 -7812.6338 8585.123 C-7812.6514 8585.0762 L-7813.0854 8585.1826 -7813.3379 8584.9551 -7813.3271 8585.2754 C-7813.4795 8585.0186 -7812.9063 8585.1582 -7813.1455 8584.7842 C-7814.5732 8585.1152 -7816.0459 8585.0498 -7817.4834 8585.0566 C-7817.6465 8584.9277 -7817.7505 8584.8887 -7817.7871 8584.7666 C-7817.9307 8584.832 -7818.3281 8584.8262 -7818.4585 8584.9902 C-7818.4102 8584.9834 -7818.5513 8584.8262 -7818.6274 8584.8105 C-7818.8887 8584.6895 -7818.9131 8585.1621 -7819.2002 8585.0186 C-7819.0859 8584.9336 -7819.0469 8584.8301 -7819.0854 8584.7109 C-7819.3301 8584.9609 -7819.6577 8584.9209 -7819.9473 8585.002 C-7819.9023 8584.9482 -7819.8325 8584.916 -7819.8433 8584.8154 C-7820.1602 8585.0986 -7820.4209 8584.7559 -7820.6982 8584.9346 C-7820.5947 8584.75 L-7821.0415 8584.5254 -7820.7266 8585.1367 -7821.1128 8585.0039 C-7821.02 8584.9453 -7821.0527 8584.873 -7821.0361 8584.7979 C-7821.3965 8585.1338 -7821.9795 8585.0225 -7822.3389 8585.1367 C-7822.3174 8585.1113 -7822.3232 8585.0605 Y-7822.7148 8585.1025 -7823.1245 8584.998 -7823.5552 8585.1445 C-7823.7119 8585.0625 -7823.5039 8584.6934 -7823.9185 8584.7617 C-7823.9033 8585.1328 -7824.6221 8584.9141 -7824.3779 8585.334 C-7824.7319 8585.2734 -7825.2925 8585.1338 -7825.5283 8585.2598 C-7825.3691 8585.1191 -7825.7007 8584.8066 -7825.4063 8584.7754 C-7825.6289 8584.5498 L-7825.5957 8584.3984 -7825.3999 8584.6016 -7825.4707 8584.4102 C-7825.6182 8584.4258 -7826.0479 8584.5723 -7826.1797 8584.5117 C-7826.4531 8584.7393 -7826.7041 8585.1641 -7827.1465 8585.2109 C-7826.9385 8585.0664 -7827.2646 8584.8018 -7827.1235 8584.7383 C-7827.7407 8585.4482 L-7827.8877 8585.4658 -7827.7725 8585.1563 -7827.9854 8585.2529 C-7827.9746 8585.3506 -7828.0674 8585.4121 -7828.1318 8585.4922 C-7828.1875 8585.4482 -7828.7441 8585.584 -7828.8081 8585.2178 C-7828.8735 8585.0762 -7828.5684 8585.1426 -7828.7314 8585.0117 C-7829.0029 8585.0146 -7829.0151 8585.1406 -7829.2871 8585.1465 C-7829.2925 8585.0977 L-7829.4717 8585.043 -7829.8213 8585.2529 -7829.6265 8585.4551 C-7829.5015 8585.4658 -7829.6738 8585.2354 -7829.4888 8585.3418 C-7829.6152 8585.5537 -7829.9312 8585.6133 -7830.2031 8585.6162 C-7830.1104 8585.5586 -7830.1216 8585.4609 -7830.0845 8585.3574 C-7830.4497 8585.6445 -7830.8369 8585.7354 -7831.2451 8585.8555 C-7831.2515 8586.0293 -7831.0928 8585.5391 -7831.0327 8585.6309 C-7831.5557 8585.3896 -7832.1128 8585.9727 -7832.5479 8585.6201 C-7832.4766 8585.5898 -7832.5098 8585.8672 -7832.5146 8585.8184 C-7832.7666 8585.7969 -7832.7549 8585.5449 -7832.9189 8585.6377 C-7832.9355 8585.4902 -7833.1255 8585.6855 -7833.2944 8585.7305 C-7833.3818 8585.8369 -7833.3384 8585.6582 -7833.1914 8585.6426 C-7833.4268 8585.7666 -7834.3691 8585.9941 -7834.9131 8585.7793 C-7834.9023 8585.877 -7835.2471 8586.1377 -7835.3721 8586.127 C-7835.3232 8585.8984 L-7835.4375 8585.7617 -7835.7422 8585.918 -7835.7632 8585.7227 C-7836.0303 8586 -7834.7344 8585.4863 -7835.0957 8585.7002 C-7835.1895 8585.5098 -7835.5991 8586.0645 -7835.5215 8585.7529 C-7835.7725 8585.7617 -7836.0161 8586.0186 -7836.2559 8585.8047 C-7836.1865 8585.8418 -7836.0522 8585.4873 -7836.2549 8585.5039 C-7836.6123 8585.5449 -7836.3564 8585.6133 -7836.6465 8585.6895 C-7836.8281 8585.7832 L-7836.8398 8586.0059 -7837.1475 8585.7529 -7837.0146 8586.002 C-7837.0586 8585.8184 -7837.5337 8586.1152 -7837.4971 8585.7461 C-7837.4473 8585.4551 L-7837.6016 8585.4766 -7837.7002 8585.7617 -7837.8213 8585.8896 C-7837.8418 8585.8633 -7837.8823 8585.8047 -7837.8745 8585.7578 C-7837.8994 8586.2031 -7838.2432 8585.7207 -7838.4268 8586.0645 C-7838.7505 8585.9102 -7839.2495 8586.0498 -7839.4023 8585.7734 C-7839.6514 8585.9082 -7839.8784 8586.0674 -7840.1621 8585.9727 C-7840.1055 8585.9307 -7840.0283 8585.918 -7840.0122 8585.8223 C-7840.1904 8585.6914 -7840.2344 8585.8086 -7840.3975 8585.8809 C-7840.3608 8585.8145 -7840.7539 8585.6201 -7840.9521 8585.4629 C-7841.1992 8585.5957 -7841.1143 8585.8359 -7841.1392 8585.9824 C-7841.3652 8585.543 -7841.8379 8586.2656 -7842.1211 8585.8672 C-7842.0352 8585.8066 -7841.7598 8585.6514 -7841.9658 8585.541 C-7842.1919 8585.1025 -7842.4219 8585.8643 -7842.7861 8585.6543 C-7842.6968 8586.0186 L-7842.8594 8585.793 -7843.2334 8586.2305 -7843.1963 8585.8594 C-7843.3184 8585.9902 -7843.6265 8585.7383 -7843.5859 8586.0938 C-7844.1846 8585.793 -7845.0425 8586.2754 -7845.4102 8585.6377 C-7845.4961 8585.6973 -7845.7104 8585.6367 -7845.6665 8585.8193 C-7845.5239 8586.0176 -7845.4673 8585.6777 -7845.4141 8585.8125 C-7845.4912 8585.8232 -7845.5078 8585.9209 -7845.5161 8585.9697 C-7845.7021 8585.8887 -7845.8486 8585.8633 -7845.6729 8585.5674 C-7846.0869 8585.3477 -7846.1001 8586.1719 -7846.6274 8586.0322 C-7846.6035 8585.8857 -7846.6436 8585.8301 -7846.7979 8585.8535 C-7847.0903 8586.1055 L-7847.4312 8586.0469 -7847.2842 8585.7705 -7847.2925 8585.5215 C-7847.4746 8585.5645 -7847.6973 8585.5527 -7847.7803 8585.7383 C-7848.0015 8585.4258 L-7847.8398 8585.6514 -7848.1514 8585.5762 -7848.2368 8585.6367 C-7848.1514 8585.5762 L-7848.1846 8585.4697 -7848.3955 8585.5352 -7848.5024 8585.5664 C-7848.4766 8585.7207 -7848.2617 8585.7832 -7848.1445 8585.8281 C-7848.2373 8585.9375 -7848.3823 8585.9121 -7848.5059 8586.041 C-7848.4648 8585.7969 -7848.8027 8585.8672 -7848.9473 8585.8418 C-7849.1133 8585.7891 -7849.1348 8586.0605 -7849.1831 8586.0527 C-7849.1875 8585.9258 -7849.4541 8586.0313 -7849.3247 8585.8535 C-7849.2681 8585.8125 -7849.1953 8585.9766 -7849.1016 8585.8643 C-7849.2109 8585.7705 -7849.1982 8585.5498 -7849.4258 8585.7109 C-7849.5967 8585.832 -7849.3818 8586.1934 -7849.7061 8586.0391 C-7849.6211 8585.9785 -7849.6055 8585.8809 -7849.5391 8585.793 C-7849.8433 8585.666 L-7849.8564 8585.8887 L-7849.8975 8585.832 -7849.8691 8585.8125 -7849.8877 8585.7832 C-7849.9785 8586.0176 -7850.3521 8585.8555 -7850.4209 8586.1191 C-7850.5742 8586.1426 -7850.7441 8585.9648 -7850.8906 8585.9395 C-7850.8623 8585.9199 L-7851.0415 8585.7891 -7851.2793 8585.875 -7851.4297 8586.0254 C-7851.4219 8585.9766 L-7851.5195 8585.959 -7851.7505 8585.9941 -7851.8735 8586.125 C-7852.1201 8585.957 -7851.9561 8585.2842 -7852.2295 8585.5645 C-7852.48 8585.5723 -7852.6221 8585.9727 -7852.5215 8586.1152 C-7852.9717 8585.9648 -7853.4834 8586.3281 -7853.9009 8585.9824 C-7853.9658 8586.0723 -7853.9248 8586.1289 -7854.0586 8586.1816 C-7854.7197 8586.0938 -7855.4551 8586.4453 -7855.9814 8586.0078 C-7855.79 8585.9141 -7855.9688 8585.7842 -7855.9727 8585.6582 C-7856.1309 8585.8574 -7856.1631 8585.4512 -7856.2197 8585.793 C-7856.2041 8585.9941 -7856.2197 8586.0918 -7856.0337 8586.1729 C-7856.4282 8586.2813 -7857.0283 8586.2813 -7857.2471 8586.0938 C-7857.1377 8586.1865 -7857.2227 8586.248 -7857.3086 8586.3086 C-7857.2803 8585.9873 -7857.5713 8585.9395 -7857.7915 8586.0527 C-7857.8223 8586.248 L-7857.9658 8586.0469 L-7858.0503 8586.1094 -7858.0591 8586.457 -7858.2773 8586.2695 C-7858.2891 8586.1934 -7858.3018 8586.1162 -7858.3418 8586.0605 C-7858.5693 8586.2207 -7858.8906 8586.4922 -7859.1377 8586.3262 C-7859.3398 8586.041 L-7859.4453 8586.0723 -7859.6235 8586.2441 -7859.4375 8586.3262 C-7859.8594 8586.1543 -7860.1309 8586.1328 -7860.2646 8585.8857 C-7860.9912 8586.4873 -7862.0459 8586.5117 -7862.8906 8586.4688 C-7862.8652 8586.3223 L-7863.0923 8586.1855 -7862.9834 8586.5781 -7863.1416 8586.4766 C-7863.0684 8586.3369 -7863.3145 8586.1729 -7863.1362 8586.002 C-7863.4609 8585.8477 -7863.5547 8586.2559 -7863.7656 8586.3223 C-7863.7979 8586.5146 -7863.5957 8586.1992 -7863.6367 8586.4434 C-7863.6729 8586.5117 -7864.0859 8586.293 -7864.1362 8586.584 C-7864.2178 8586.4697 -7864.1543 8586.2559 -7864.1104 8586.1377 C-7864.3086 8586.2793 L-7864.5513 8585.9395 -7863.7559 8585.6719 -7864.0107 8585.2529 C-7864.1934 8585.2979 L-7864.3682 8584.9941 -7863.71 8584.9551 -7864.1689 8584.8506 C-7864.3682 8584.9941 -7864.5381 8585.416 -7864.3608 8585.5449 C-7864.7754 8585.625 -7864.5527 8586.2383 -7864.9985 8586.2139 C-7865.1201 8586.043 -7864.6416 8586.1729 -7864.7275 8585.9336 C-7864.9375 8585.6992 -7865.1484 8586.0645 -7865.3354 8585.9824 C-7865.1279 8586.0918 -7865.3032 8586.3857 -7865.4375 8586.4395 C-7865.6641 8586.3018 -7865.29 8586.1641 -7865.6113 8586.1338 C-7865.6641 8586.3018 -7865.9595 8586.4277 -7865.7041 8586.5449 C-7865.8203 8586.9258 -7866.0381 8586.4395 -7866.2129 8586.7344 C-7866.3174 8586.4658 -7865.8823 8586.1152 -7866.2354 8585.9814 C-7866.1792 8586.2393 -7866.6704 8586.332 -7866.4839 8586.7139 C-7866.6221 8586.6406 -7866.6367 8586.4375 -7866.5361 8586.2793 C-7866.7334 8586.1201 -7867.0151 8586.75 -7867.0801 8586.2383 C-7867.1479 8586.502 L-7867.21 8586.416 -7867.2983 8586.3506 -7867.3994 8586.209 C-7867.5732 8586.2041 -7867.96 8586.5664 -7867.9443 8586.168 C-7868 8586.209 -7868.3975 8586.1914 -7868.2441 8586.4658 C-7867.9971 8586.6338 -7867.96 8586.2656 -7867.8223 8586.6377 C-7867.9971 8586.334 -7868.1787 8586.6777 -7868.3213 8586.7793 C-7868.3447 8586.625 L-7868.4297 8586.6855 -7868.6255 8586.6514 -7868.6787 8586.8184 C-7868.6133 8586.7305 -7868.6475 8586.625 -7868.7148 8586.5879 C-7868.8042 8586.8223 L-7869.1494 8586.9395 -7868.8857 8586.4102 -7869.2217 8586.4785 C-7868.9663 8586.2969 L-7869.0225 8586.3359 -7869.1367 8586.1162 -7869.2979 8586.1895 C-7869.3604 8586.4033 -7869.4775 8586.6602 -7869.5313 8586.8262 C-7869.7207 8586.9199 -7869.6162 8586.585 -7869.8027 8586.8047 C-7869.5586 8586.5469 L-7869.5215 8586.4766 -7869.7231 8586.1934 -7869.9761 8586.1992 C-7870.1377 8586.2734 -7870.3887 8586.582 -7870.1338 8586.6992 C-7870.2607 8586.7031 -7870.4385 8586.5723 -7870.3379 8586.416 C-7870.6255 8586.4902 -7870.2998 8586.6465 -7870.5479 8586.7793 C-7870.6494 8586.6367 -7870.9658 8586.4336 -7871.1563 8586.2266 C-7870.8975 8585.8682 L-7871.0693 8585.8643 L-7870.8467 8585.5781 -7871.1826 8585.6465 -7871.0566 8585.3438 C-7871.1743 8585.2969 -7871.3169 8585.3994 -7871.4307 8585.4785 C-7871.0864 8585.9629 -7871.8159 8586.1406 -7871.7158 8586.582 C-7872.1875 8586.7031 -7872.0107 8585.5078 -7872.5024 8586.1992 C-7872.4219 8586.3145 -7872.6533 8586.6504 -7872.3564 8586.5225 C-7872.6494 8586.4746 -7872.5557 8586.9658 -7872.9014 8586.7832 C-7872.6455 8586.6016 -7873.1763 8586.3359 -7872.8066 8586.0723 C-7872.8311 8586.2178 -7872.6001 8586.1826 -7872.5435 8586.1426 C-7872.6641 8585.9727 -7872.5186 8585.6973 -7872.8184 8585.6973 C-7873.0015 8585.7393 -7873.2524 8585.748 -7873.2158 8585.9785 C-7873.2085 8586.2314 -7872.9365 8585.9512 -7873.0537 8586.207 C-7873.4185 8586.2949 -7873.4795 8585.9102 -7873.6304 8586.3594 C-7873.3999 8586.3232 -7873.3423 8586.584 -7873.3467 8586.7578 C-7873.6143 8586.8633 L-7873.5625 8586.6953 L-7873.9922 8586.5742 -7873.6895 8587 -7874.1055 8586.9551 C-7874.3008 8586.623 L-7874.2017 8586.3369 -7873.6953 8586.75 -7873.7695 8586.2842 C-7874.04 8586.2656 -7874.1299 8586.502 -7874.3848 8586.3818 C-7874.3281 8586.3418 -7874.2505 8586.3301 -7874.1943 8586.2891 C-7874.2915 8586.2734 -7874.3877 8585.6563 -7874.7734 8586.0176 C-7874.9727 8586.1582 -7874.8262 8586.1826 -7874.8311 8586.3574 C-7875.2656 8586.4102 -7875.3955 8586.5879 -7875.6753 8586.6152 C-7875.6177 8586.2754 -7876.1699 8586.582 -7875.8608 8586.2344 C-7875.7188 8586.4336 -7875.0903 8586.4141 -7874.9365 8586.0898 C-7875.0947 8585.6865 -7874.5952 8586.1465 -7874.5024 8585.7383 C-7874.8506 8585.7285 -7874.8335 8585.332 -7874.8896 8585.0723 C-7874.9863 8585.0537 -7875.0801 8585.1641 -7875.1377 8585.2041 C-7875.1787 8585.4482 -7875.0522 8585.4453 -7875.0449 8585.6973 C-7875.4336 8585.6309 -7875.8081 8585.7666 -7876.0225 8586.0059 C-7876.1523 8585.8848 -7876.1113 8585.6406 -7875.9575 8585.6162 C-7876.4199 8585.6895 -7876.9141 8585.6563 -7877.3535 8585.582 C-7877.0693 8585.9814 -7877.8433 8585.6758 -7877.6494 8586.0078 C-7877.4141 8586.0977 -7877.2119 8586.3818 -7877.3418 8586.5605 C-7877.4888 8586.5352 -7877.3369 8586.3857 -7877.3984 8586.3008 C-7877.5859 8586.5186 -7877.6895 8585.9512 -7877.8735 8586.2949 C-7877.4512 8586.166 -7877.7915 8585.8086 -7877.7139 8585.4961 C-7878.0186 8585.6719 -7877.7007 8585.2734 -7878.0024 8585.2734 C-7878.3057 8585.4473 -7878.6787 8585.584 -7879.0161 8585.6514 C-7879.4399 8585.3555 -7880.0898 8585.6465 -7880.4683 8585.6582 C-7880.6665 8585.5 -7880.5322 8585.1465 -7880.7471 8585.085 C-7880.9995 8585.0918 -7880.5601 8585.4658 -7880.9336 8585.3047 C-7880.8975 8585.2344 L-7881.0107 8585.3154 -7881.5825 8584.9941 -7881.6929 8585.502 C-7881.5776 8585.1191 L-7881.6475 8585.084 -7881.7119 8585.1719 -7881.7695 8585.2129 C-7881.7725 8585.0879 -7881.8535 8584.9746 -7881.7402 8584.8926 C-7881.9707 8584.6289 -7882.2241 8584.9346 -7882.4746 8584.9453 C-7882.3135 8585.1719 L-7882.7422 8585.3496 -7883.0293 8585.125 -7883.4443 8585.2041 C-7883.4316 8584.9824 L-7883.6787 8585.1152 L-7883.6182 8584.8994 -7883.8447 8584.7617 -7883.9751 8584.9414 C-7883.3335 8584.3984 L-7883.1553 8584.5293 -7883.5283 8584.666 -7883.4165 8584.8848 C-7883.3213 8585.0762 -7882.9375 8585.0146 -7882.8755 8584.8018 C-7883.0225 8584.7773 -7883.0293 8584.8262 -7883.1436 8584.9063 C-7883.1919 8584.5977 -7882.9688 8584.6094 -7882.8584 8584.4033 C-7882.9355 8584.416 -7883.0449 8584.3223 -7883.0615 8584.4199 C-7882.9102 8584.2695 -7882.7578 8584.2461 -7882.5059 8584.2383 C-7882.6763 8584.3594 -7882.4131 8584.4297 -7882.4775 8584.5176 C-7882.4575 8584.2461 -7882.2168 8584.1621 -7881.9053 8584.2383 C-7881.6831 8584.5527 -7881.3208 8584.0361 -7880.96 8584.123 C-7881.1064 8584.3984 -7881.2935 8584.6191 -7881.5127 8584.7305 C-7881.2861 8584.8682 -7881.2607 8584.7227 -7881.0337 8584.8613 C-7880.9238 8584.6563 -7880.8457 8584.3418 -7880.5503 8584.2168 C-7880.5342 8584.4199 L-7880.2666 8584.3154 -7880.2666 8584.0146 -7879.9258 8584.0723 C-7879.3418 8584.1719 -7878.7407 8584.1719 -7878.2949 8584.1973 C-7878.2783 8584.3994 L-7878.0303 8583.9658 -7877.4521 8584.2393 -7877.1182 8584.0469 C-7876.5503 8584.2422 -7875.8848 8583.8535 -7875.5938 8584.2031 C-7874.5913 8584.0469 -7873.7148 8583.8945 -7872.6768 8583.9688 C-7872.8516 8584.2637 L-7872.6655 8584.0469 -7872.7305 8584.4336 -7872.5479 8584.3896 C-7872.7578 8584.1543 -7872.2949 8584.084 -7872.1665 8583.9033 C-7871.7041 8584.1328 -7871.1104 8583.8818 -7870.7007 8583.6758 C-7870.6846 8583.8789 L-7870.2705 8583.498 -7869.7759 8583.832 -7869.2598 8583.8945 C-7869.2007 8583.9785 -7869.1074 8584.1689 -7868.9536 8584.1465 C-7868.6738 8583.8184 -7868.5273 8583.8418 -7868.1167 8583.6367 C-7867.8169 8583.6367 -7867.3301 8583.7178 -7867.0254 8583.8457 C-7865.8975 8583.3848 -7864.7456 8583.6797 -7863.5732 8583.4023 C-7863.4888 8583.6406 L-7862.3521 8583.1309 -7860.9541 8583.5938 -7859.9839 8583.332 C-7860.0776 8583.7393 L-7859.7734 8583.8643 -7859.3843 8583.6328 -7859.4619 8583.3438 C-7859.1567 8583.4688 -7858.7007 8583.1465 -7858.5068 8583.4814 C-7858.1953 8583.5566 -7858.1255 8583.293 -7857.8662 8583.2383 C-7857.2422 8583.3926 -7857.0107 8583.3574 -7856.4224 8583.2813 C-7856.5684 8583.2559 L-7856.6328 8583.3457 -7856.6387 8583.5186 -7856.4922 8583.5449 C-7856.2725 8583.4307 -7855.6846 8583.6543 -7855.9033 8583.168 C-7855.2754 8583.4482 -7854.4385 8582.9395 -7853.8271 8583.3184 C-7853.8789 8583.1855 -7853.7246 8583.1602 -7853.6602 8583.0703 C-7853.1089 8583.0645 -7852.5293 8583.3359 -7852.0898 8583.1094 C-7852.0024 8583.1758 -7852.2295 8583.3359 -7852.0049 8583.3496 C-7851.8721 8583.2979 -7852.0024 8583.1758 -7851.8384 8583.1016 C-7850.9453 8582.8535 -7850.0303 8583.3574 -7849.2188 8583.293 C-7847.7754 8583.0361 -7846.2695 8583.166 -7844.8867 8583.123 C-7844.9023 8583.2207 L-7844.4395 8582.8477 -7843.8159 8583.6025 -7843.4463 8583.041 C-7843.3369 8583.1338 -7843.0283 8583.085 -7843.1094 8583.2734 C-7842.7407 8583.0098 -7842.0771 8583.5215 -7841.5439 8583.1865 C-7841.5928 8583.1777 -7841.6211 8583.1973 -7841.6777 8583.2393 C-7841.1392 8583.4551 -7840.6641 8583.1602 -7840.0957 8583.3555 C-7840.1533 8583.3975 -7840.2583 8583.4277 -7840.2754 8583.5254 C-7840.0557 8583.7129 -7839.7549 8583.1133 -7839.6348 8583.584 C-7839.5088 8583.5801 -7839.5449 8583.3477 -7839.6221 8583.3613 C-7838.3779 8583.5449 -7837.0498 8583.2441 -7835.7549 8583.1367 C-7834.8271 8583.418 -7835.6982 8583.9297 -7834.9663 8583.5781 C-7834.9063 8583.6689 -7834.9229 8583.3984 -7834.9131 8583.4961 C-7834.6299 8583.3643 -7834.4717 8584.0215 -7834.2754 8583.7754 C-7834.3564 8583.4863 -7834.1445 8583.6133 -7834.1387 8583.4375 C-7833.5713 8583.625 -7833.4575 8583.8857 -7833.0098 8583.666 C-7833.0435 8583.8184 L-7832.5186 8583.3887 -7831.9102 8583.6191 -7831.4673 8583.123 C-7828.5728 8583.0322 -7825.7983 8582.7578 -7822.9761 8582.7002 C-7820.1865 8582.7949 -7817.4551 8582.5723 -7814.6221 8582.8359 C-7813.9585 8583.2354 -7813.9087 8583.2246 -7813.1797 8583.0625 C-7813.2095 8583.127 -7813.2549 8583.1426 -7813.2061 8583.2031 C-7813.1699 8582.875 -7812.6929 8583.1719 -7812.6235 8582.8594 C-7811.5762 8582.9199 -7810.6113 8582.8301 -7809.5337 8582.8281 C-7809.7041 8582.8633 -7809.7896 8583.1309 -7809.5869 8583.1094 C-7809.3755 8582.8994 L-7809.3408 8582.9922 L-7809.2021 8582.9434 -7809.0513 8582.7813 -7809.1943 8582.6758 C-7806.4873 8582.3926 -7803.8242 8583.0498 -7801.1729 8582.9697 C-7800.5435 8583.1064 -7799.6475 8582.9814 -7798.9629 8582.9141 C-7796.9355 8583.3506 -7795.1079 8583.7041 -7793.0479 8583.3984 C-7793.3169 8584.2461 -7794.1675 8584.4414 Vf-7884.2578 8584.2422 m-7884.1855 8584.4063 -7883.9497 8584.4961 -7884.1377 8584.7139 C-7884.1611 8584.5605 -7884.2822 8584.3887 -7884.2578 8584.2422 Cf-7877.9619 8585.9297 m-7877.9536 8585.8809 -7877.8721 8585.9961 -7877.8521 8586.0225 C-7877.9297 8586.0352 -7878.0024 8586.1729 -7878.0645 8586.0879 C-7877.9854 8586.0762 -7877.9976 8585.998 -7877.9619 8585.9297 Cf-7876.3521 8586.0273 m-7876.3765 8586.1729 -7876.7207 8586.2891 -7876.9238 8586.3066 C-7876.3521 8586.0273 Lf-7874.8521 8586.6289 m-7874.7227 8586.752 -7874.7583 8586.8193 -7874.9326 8586.8154 C-7874.9453 8586.7383 -7874.8877 8586.6992 -7874.8521 8586.6289 Cf-7874.7456 8586.2969 m-7874.6211 8586.293 -7874.5591 8586.3789 -7874.4985 8586.4629 C-7874.5029 8586.3369 -7874.7871 8586.541 -7874.7456 8586.2969 Cf-7871.4893 8586.7207 m-7871.4111 8586.709 -7871.2417 8586.5879 -7871.1689 8586.75 C-7871.2505 8586.6367 -7871.5498 8586.9346 -7871.4893 8586.7207 Cf-7869.9761 8586.5 m-7869.9272 8586.5098 -7869.9072 8586.5361 -7869.8506 8586.4961 C-7869.7607 8586.5625 -7869.8555 8586.6689 -7869.9312 8586.6826 C-7869.9761 8586.5 Lf-7842.4287 8585.9141 m-7842.5923 8585.9863 L-7842.5684 8585.8418 L-7842.4287 8585.9141 Lf-7830.3574 8585.9063 m-7830.1943 8585.8145 -7830.2441 8586.043 -7830.2168 8586.0645 C-7830.3643 8586.0801 -7830.1621 8585.8848 -7830.3574 8585.9063 Cf-7823.8486 8585.1777 m-7823.8984 8585.1816 L-7823.8818 8584.8818 L-7823.8486 8585.1777 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 k(White)Pc0 0 0 1 k(Black)Pc0 1 1 0 k(CMYK Red)Pc0 0 1 0 k(CMYK Yellow)Pc1 0 1 0 k(CMYK Green)Pc1 0 0 0 k(CMYK Cyan)Pc1 1 0 0 k(CMYK Blue)Pc0 1 0 0 k(CMYK Magenta)Pc0.15 1 0.9 0.1 k(C=15 M=100 Y=90 K=10)Pc0 0.9 0.85 0 k(C=0 M=90 Y=85 K=0)Pc0 0.8 0.95 0 k(C=0 M=80 Y=95 K=0)Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0)Pc0 0.35 0.85 0 k(C=0 M=35 Y=85 K=0)Pc0.05 0 0.9 0 k(C=5 M=0 Y=90 K=0)Pc0.2 0 1 0 k(C=20 M=0 Y=100 K=0)Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0)Pc0.75 0 1 0 k(C=75 M=0 Y=100 K=0)Pc0.85 0.1 1 0.1 k(C=85 M=10 Y=100 K=10)Pc0.9 0.3 0.95 0.3 k(C=90 M=30 Y=95 K=30)Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0)Pc0.8 0.1 0.45 0 k(C=80 M=10 Y=45 K=0)Pc0.7 0.15 0 0 k(C=70 M=15 Y=0 K=0)Pc0.85 0.5 0 0 k(C=85 M=50 Y=0 K=0)Pc1 0.95 0.05 0 k(C=100 M=95 Y=5 K=0)Pc1 1 0.25 0.25 k(C=100 M=100 Y=25 K=25)Pc0.75 1 0 0 k(C=75 M=100 Y=0 K=0)Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0)Pc0.35 1 0.35 0.1 k(C=35 M=100 Y=35 K=10)Pc0.1 1 0.5 0 k(C=10 M=100 Y=50 K=0)Pc0 0.95 0.2 0 k(C=0 M=95 Y=20 K=0)Pc0.25 0.25 0.4 0 k(C=25 M=25 Y=40 K=0)Pc0.4 0.45 0.5 0.05 k(C=40 M=45 Y=50 K=5)Pc0.5 0.5 0.6 0.25 k(C=50 M=50 Y=60 K=25)Pc0.55 0.6 0.65 0.4 k(C=55 M=60 Y=65 K=40)Pc0.25 0.4 0.65 0 k(C=25 M=40 Y=65 K=0)Pc0.3 0.5 0.75 0.1 k(C=30 M=50 Y=75 K=10)Pc0.35 0.6 0.8 0.25 k(C=35 M=60 Y=80 K=25)Pc0.4 0.65 0.9 0.35 k(C=40 M=65 Y=90 K=35)Pc0.4 0.7 1 0.5 k(C=40 M=70 Y=100 K=50)Pc0.5 0.7 0.8 0.7 k(C=50 M=70 Y=80 K=70)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.100006 g(K=90)Pc0.200012 g(K=80)Pc0.300003 g(K=70)Pc0.400009 g(K=60)Pc0.5 g(K=50)Pc0.600006 g(K=40)Pc0.700012 g(K=30)Pc0.800003 g(K=20)Pc0.900009 g(K=10)Pc0.950012 g(K=5)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au1 Ap0 O0 1 1 0 k0 R0 1 1 0 K0 J 0 j 0.24976 w 4 M []0 d0 XR522.7764 374.7383 m333.5039 374.7383 L333.5039 431.4766 L522.7764 431.4766 L522.7764 374.7383 L(b) *0 0 0 0 k1 w538.7559 342.791 m317.2891 342.791 L317.2891 447.4238 L538.7559 447.4238 L538.7559 342.791 Lfu0 R0 1 1 0 K2 w538.8164 358.8125 m317.2891 358.8125 L317.2891 447.4238 L538.8164 447.4238 L538.8164 358.8125 L(b) *0 Ap1 w1 XR333.6953 428.8008 m346.6133 431.4961 357.4668 431.4961 v368.3203 431.4961 381.8203 428.8008 Y381.8203 392.6953 381.8203 387.2793 V381.8203 383.8965 379.7461 382.0781 379.0098 381.5449 C377.3555 380.3535 369.9531 374.7363 357.7754 374.7363 C346.3145 374.7363 339.3242 379.6816 336.5469 381.627 C335.3008 382.5059 333.6953 384.4219 333.6953 387.2793 C333.6953 391.6699 333.6953 428.8008 Yfuu0 0 0 1 k0 XR378.2227 380.7715 m368.4063 374.4063 358.2148 374.75 y357.9336 376.0508 358.0469 378.293 v358.1582 380.5371 359.3828 379.9043 360.2676 381.6758 c360.5889 382.3203 360.8652 382.7637 361.3691 384.2715 c361.3877 384.334 360.7813 395.0762 360.626 399.6348 c360.543 402.0918 360.082 406.1895 359.541 410.1758 c359.2207 412.5391 358.5039 414.4102 358.1709 416.6523 c357.6914 419.8906 357.1338 423.543 y356.7344 422.5117 356.1621 418.6543 355.5879 414.2988 c355.3125 412.209 355.0352 410.0059 354.7773 407.9453 c354.2305 403.582 352.8672 391.9023 352.6621 391.2695 c352.3516 390.3066 352.3174 391.5234 y353.125 403.7734 353.3691 409.1465 V353.4863 411.7734 353.6855 414.6602 354.0137 417.4297 C354.2598 419.5078 354.5781 421.5234 354.9893 423.3105 C356.3926 427.5488 356.8398 427.6348 v357.2871 427.7168 358.9063 424.9629 359.4531 422.5098 c360.6895 416.9766 361.4219 416.2676 362.3633 410.4512 c363.2607 404.9277 364.0791 400.3047 364.1914 399.5488 c364.5918 396.8066 364.3936 388.2539 363.7012 384.8477 C363.5371 383.918 363.4883 383.5762 362.8809 382.9609 c361.458 381.5215 360.4473 379.8066 360.4473 378.6855 c360.4473 377.5625 360.2598 377.584 360.5264 376.9355 C362.4023 374.127 373.1855 380.5527 V376.5547 382.3184 376.5547 386.2148 V376.5547 425.625 l365.8633 429.2402 357.6279 429.2402 v349.3926 429.2402 339.0801 425.6328 y339.0801 386.3926 l339.0801 383.9785 339.4316 379.4473 342.8799 377.9023 C333.6953 381.0449 333.6953 386.4414 V333.6953 428.9648 l347.7158 431.5449 357.6328 431.5449 v367.5508 431.5449 381.8203 428.9648 y381.8203 390.0586 381.8203 386.3906 v381.8203 382.7227 378.2227 380.7715 YfUUu*u511.459 413.707 m510.4785 413.1602 509.1611 412.8887 507.5059 412.8887 c505.8389 412.8887 504.543 413.3926 503.6172 414.4023 c502.6924 415.4121 502.2305 416.8223 502.2305 418.6309 c502.2305 420.4531 502.6924 421.9063 503.6172 422.9844 c504.5156 424.0234 505.708 424.543 507.1953 424.543 c507.8535 424.543 508.4219 424.4707 508.9004 424.3262 c508.9004 428.9023 L511.459 428.9023 l511.459 413.707 Lf1 D508.9004 414.7852 m508.9004 422.9434 L508.5625 423.041 508.1826 423.0898 507.7627 423.0898 c505.7734 423.0898 504.7764 421.6523 504.7764 418.7793 c504.7764 415.9473 505.709 414.5313 507.5742 414.5313 c508.1914 414.5313 508.6328 414.6152 508.9004 414.7852 cf*U*u0 D523.1582 418.8398 m516.2178 417.834 L516.4268 415.7324 517.459 414.6816 519.3096 414.6816 c520.4033 414.6816 521.3555 414.8887 522.1699 415.3008 c522.7773 413.6855 L521.8105 413.1543 520.5645 412.8887 519.0352 412.8887 c517.4102 412.8887 516.125 413.4004 515.1855 414.4238 c514.2471 415.4453 513.7773 416.9023 513.7773 418.7949 c513.7773 420.6309 514.209 422.0625 515.0703 423.0918 c515.9336 424.123 517.1143 424.6367 518.6133 424.6367 c520.1289 424.6367 521.2773 424.1445 522.0645 423.1563 c522.8496 422.1699 523.2139 420.7324 523.1582 418.8398 cf1 D520.7607 419.8457 m520.7607 421.9902 520.0166 423.0625 518.5273 423.0625 c517.7422 423.0625 517.1387 422.748 516.7168 422.1152 c516.2549 421.4297 516.0352 420.4336 516.0645 419.1309 c520.7607 419.8457 Lf*UUu*u0 D394.1699 382.8613 m390.1475 382.8613 L390.1475 407.7305 L394.1699 407.7305 l394.1699 382.8613 Lf*U*u412.7256 391.7305 m412.7256 388.9844 412.1221 386.7988 410.9121 385.1738 c409.5938 383.416 407.7363 382.5371 405.3418 382.5371 c402.9463 382.5371 401.0898 383.416 399.7715 385.1738 c398.5625 386.7988 397.959 388.9844 397.959 391.7305 c397.959 394.498 398.5625 396.6953 399.7715 398.3203 c401.0898 400.0781 402.9463 400.957 405.3418 400.957 c407.7588 400.957 409.6162 400.0781 410.9121 398.3203 c412.1221 396.6953 412.7256 394.498 412.7256 391.7305 cf1 D408.7344 391.7617 m408.7344 396.1992 407.6035 398.4199 405.3418 398.4199 c403.0801 398.4199 401.9492 396.1992 401.9492 391.7617 c401.9492 387.4336 403.0801 385.2676 405.3418 385.2676 c407.6035 385.2676 408.7344 387.4336 408.7344 391.7617 cf*U*u0 D426.5146 387.9746 m426.5146 386.4805 425.9336 385.207 424.7676 384.1523 c423.6016 383.0977 422.0742 382.5703 420.1836 382.5703 c418.1602 382.5703 416.5234 382.998 415.2695 383.8535 c416.3242 386.4219 L417.1836 385.7383 418.293 385.3984 419.6582 385.3984 c420.4717 385.3984 421.1309 385.6328 421.6367 386.1055 c422.1426 386.5781 422.3945 387.1777 422.3945 387.9023 c422.3945 388.6504 422.1973 389.2363 421.8027 389.666 c421.4063 390.0957 420.7363 390.4844 419.792 390.8359 c417.0898 391.8691 415.7383 393.5293 415.7383 395.8145 c415.7383 397.2656 416.2598 398.4824 417.3027 399.4727 c418.3457 400.4629 419.7031 400.957 421.3711 400.957 c423.1719 400.957 424.708 400.5391 425.9824 399.7031 c424.9951 397.3633 L424.1836 398.0234 423.2402 398.3555 422.166 398.3555 c421.376 398.3555 420.7559 398.1289 420.3066 397.6797 c419.8574 397.2305 419.6328 396.6738 419.6328 396.0156 c419.6328 394.8516 420.5098 393.918 422.2676 393.2148 c425.0996 392.0723 426.5146 390.3262 426.5146 387.9746 cf*U*u456.1855 382.8613 m451.4932 382.8613 L449.5947 389.1992 L441.6426 389.1992 L439.6719 382.8613 L435.5889 382.8613 L443.7559 407.5156 L448.0547 407.5156 l456.1855 382.8613 Lf1 D448.9492 391.8516 m446.4063 400.5332 L446.0479 401.752 445.834 402.7461 445.7617 403.5117 c445.6914 403.5117 L445.5713 402.8652 445.3428 401.873 445.0098 400.5332 c442.3574 391.8516 l448.9492 391.8516 Lf*U*u0 D472.7295 382.8613 m468.7061 382.8613 L468.7061 395.4531 L468.7061 397.4297 467.6426 398.4199 465.5117 398.4199 c464.501 398.4199 463.5801 398.2539 462.7451 397.9258 c462.7451 382.8613 L458.7227 382.8613 L458.7227 399.6719 L460.5459 400.5273 462.8633 400.957 465.6758 400.957 c468.1592 400.957 469.9941 400.4082 471.1807 399.3086 c472.2129 398.3848 472.7295 397.1211 472.7295 395.5176 c472.7295 382.8613 Lf*U*u490.8613 383.8223 m489.3223 382.9668 487.2539 382.5371 484.6621 382.5371 c482.0459 382.5371 480.0117 383.3281 478.5605 384.9102 c477.1094 386.4922 476.3838 388.6992 476.3838 391.5352 c476.3838 394.3906 477.1094 396.6641 478.5605 398.3574 c479.9688 399.9824 481.8369 400.7949 484.166 400.7949 c485.1992 400.7949 486.0908 400.6836 486.8379 400.4609 c486.8379 407.6504 L490.8613 407.6504 l490.8613 383.8223 Lf1 D486.8379 385.502 m486.8379 398.2871 L486.3105 398.4395 485.7168 398.5156 485.0566 398.5156 c481.9355 398.5156 480.375 396.2656 480.375 391.7637 c480.375 387.3242 481.8369 385.1074 484.7607 385.1074 c485.7275 385.1074 486.4199 385.2383 486.8379 385.502 cf*U*u0 D509.166 391.8594 m498.2861 390.2773 L498.6152 386.9805 500.2314 385.332 503.1309 385.332 c504.8447 385.332 506.3389 385.6621 507.6143 386.3203 c508.5693 383.7871 L507.0547 382.9551 505.0977 382.5371 502.7031 382.5371 c500.1533 382.5371 498.1445 383.3398 496.6709 384.9434 c495.1992 386.5469 494.4629 388.8301 494.4629 391.7969 c494.4629 394.6738 495.1387 396.9199 496.4902 398.5332 c497.8418 400.1484 499.6924 400.957 502.0449 400.957 c504.4199 400.957 506.2207 400.1816 507.4512 398.6328 c508.6816 397.084 509.2539 394.8242 509.166 391.8594 cf1 D505.4004 393.4414 m505.4004 396.8027 504.2363 398.4844 501.9063 398.4844 c500.6758 398.4844 499.7314 397.9883 499.0723 397.002 c498.3457 395.9238 498.0068 394.3633 498.0488 392.3203 c505.4004 393.4414 Lf*U*u0 D522.9873 387.9746 m522.9873 386.4805 522.4043 385.207 521.2402 384.1523 c520.0742 383.0977 518.5469 382.5703 516.6553 382.5703 c514.6338 382.5703 512.9961 382.998 511.7402 383.8535 c512.7969 386.4219 L513.6543 385.7383 514.7656 385.3984 516.1289 385.3984 c516.9434 385.3984 517.6035 385.6328 518.1074 386.1055 c518.6133 386.5781 518.8672 387.1777 518.8672 387.9023 c518.8672 388.6504 518.6689 389.2363 518.2744 389.666 c517.8789 390.0957 517.209 390.4844 516.2637 390.8359 c513.5615 391.8691 512.21 393.5293 512.21 395.8145 c512.21 397.2656 512.7324 398.4824 513.7744 399.4727 c514.8184 400.4629 516.1738 400.957 517.8428 400.957 c519.6436 400.957 521.1797 400.5391 522.4531 399.7031 c521.4668 397.3633 L520.6543 398.0234 519.7129 398.3555 518.6367 398.3555 c517.8477 398.3555 517.2285 398.1289 516.7783 397.6797 c516.3281 397.2305 516.1045 396.6738 516.1045 396.0156 c516.1045 394.8516 516.9824 393.918 518.7383 393.2148 c521.5703 392.0723 522.9873 390.3262 522.9873 387.9746 cf*UUu*u411.3691 413.0605 m408.8086 413.0605 L408.8086 421.0938 L408.8086 422.3555 408.1279 422.9863 406.7676 422.9863 c406.123 422.9863 405.5332 422.8809 405.001 422.6719 c405.001 413.0605 L402.4414 413.0605 L402.4414 423.7832 L403.6035 424.3301 405.0811 424.6016 406.873 424.6016 c408.4551 424.6016 409.626 424.25 410.3809 423.5508 c411.0391 422.9648 411.3691 422.1582 411.3691 421.1328 c411.3691 413.0605 Lf*U*u416.8906 427.6191 m416.8906 427.2676 416.7539 426.9688 416.4814 426.7246 c416.207 426.4785 415.875 426.3555 415.4824 426.3555 c415.0889 426.3555 414.7568 426.4785 414.4824 426.7246 c414.209 426.9688 414.0723 427.2676 414.0723 427.6191 c414.0723 427.9707 414.209 428.2715 414.4824 428.5234 c414.7568 428.7754 415.0889 428.9023 415.4824 428.9023 c415.875 428.9023 416.207 428.7793 416.4814 428.5352 c416.7539 428.2891 416.8906 427.9844 416.8906 427.6191 cf416.7559 413.0605 m414.1963 413.0605 L414.1963 424.3984 L416.7559 424.3984 l416.7559 413.0605 Lf*U*u428.4316 424.3984 m424.793 413.0605 L422.3535 413.0605 L418.6514 424.3984 L421.3857 424.3984 L423.3848 417.0801 L423.5391 416.5332 423.6289 416.0137 423.6582 415.5234 c423.6992 415.5234 L423.7695 415.9297 423.8672 416.4492 423.9941 417.0801 c426.0342 424.3984 l428.4316 424.3984 Lf*U*u439.1738 418.8066 m432.2344 417.7988 L432.4434 415.6973 433.4756 414.6484 435.3252 414.6484 c436.4199 414.6484 437.3721 414.8555 438.1865 415.2676 c438.7969 413.6504 L437.8281 413.1191 436.5811 412.8535 435.0527 412.8535 c433.4248 412.8535 432.1426 413.3652 431.2031 414.3887 c430.2627 415.4102 429.7939 416.8672 429.7939 418.7598 c429.7939 420.5957 430.2256 422.0293 431.0869 423.0586 c431.9502 424.0879 433.1309 424.6016 434.6309 424.6016 c436.1445 424.6016 437.2949 424.1094 438.0801 423.123 c438.8652 422.1348 439.2305 420.6973 439.1738 418.8066 cf1 D436.7793 419.8105 m436.7793 421.957 436.0332 423.0293 434.5449 423.0293 c433.7588 423.0293 433.1543 422.7129 432.7344 422.082 c432.2695 421.3945 432.0527 420.3984 432.0811 419.0957 c436.7793 419.8105 Lf*U*u0 D446.9688 424.5898 m446.4629 422.7129 L446.083 422.8398 445.6895 422.9023 445.2822 422.9023 c444.791 422.9023 444.3828 422.8105 444.0596 422.6289 c444.0596 413.0605 L441.5 413.0605 L441.5 423.791 l442.748 424.3926 444.5713 424.6602 446.9688 424.5898 cf*U*u455.1416 416.3184 m455.1416 415.3652 454.7715 414.5508 454.0264 413.8789 c453.2832 413.2031 452.3086 412.8672 451.1035 412.8672 c449.8105 412.8672 448.7656 413.1406 447.9668 413.6895 c448.6406 415.3301 L449.1875 414.8926 449.8955 414.6738 450.7656 414.6738 c451.2842 414.6738 451.7061 414.8262 452.0293 415.127 c452.3516 415.4277 452.5127 415.8105 452.5127 416.2734 c452.5127 416.75 452.3867 417.125 452.1348 417.3984 c451.8818 417.6719 451.4551 417.9219 450.8516 418.1445 c449.1289 418.8047 448.2676 419.8633 448.2676 421.3223 c448.2676 422.2461 448.5996 423.0254 449.2656 423.6563 c449.9307 424.2871 450.7949 424.6016 451.8613 424.6016 c453.0088 424.6016 453.9893 424.3379 454.8018 423.8047 c454.1699 422.3145 L453.6543 422.7363 453.0508 422.9473 452.3652 422.9473 c451.8594 422.9473 451.4629 422.8027 451.1768 422.5156 c450.8906 422.2266 450.7461 421.873 450.7461 421.4512 c450.7461 420.709 451.3066 420.1113 452.4287 419.6641 c454.2373 418.9336 455.1416 417.8184 455.1416 416.3184 cf*U*u460.1582 427.6191 m460.1582 427.2676 460.0205 426.9688 459.7471 426.7246 c459.4736 426.4785 459.1406 426.3555 458.748 426.3555 c458.3555 426.3555 458.0234 426.4785 457.748 426.7246 c457.4766 426.9688 457.3379 427.2676 457.3379 427.6191 c457.3379 427.9707 457.4766 428.2715 457.748 428.5234 c458.0234 428.7754 458.3555 428.9023 458.748 428.9023 c459.1406 428.9023 459.4736 428.7793 459.7471 428.5352 c460.0205 428.2891 460.1582 427.9844 460.1582 427.6191 cf460.0234 413.0605 m457.4629 413.0605 L457.4629 424.3984 L460.0234 424.3984 l460.0234 413.0605 Lf*U*u471.668 413.6738 m470.6875 413.127 469.3691 412.8535 467.7148 412.8535 c466.0479 412.8535 464.751 413.3594 463.8252 414.3691 c462.9004 415.377 462.4375 416.7871 462.4375 418.5977 c462.4375 420.4199 462.9014 421.8711 463.8262 422.9492 c464.7246 423.9883 465.916 424.5078 467.4033 424.5078 c468.0625 424.5078 468.6309 424.4355 469.1064 424.291 c469.1064 428.8691 L471.668 428.8691 l471.668 413.6738 Lf1 D469.1064 414.75 m469.1064 422.9082 L468.7715 423.0059 468.3926 423.0547 467.9707 423.0547 c465.9805 423.0547 464.9854 421.6191 464.9854 418.7441 c464.9854 415.9121 465.918 414.4961 467.7822 414.4961 c468.3984 414.4961 468.8418 414.582 469.1064 414.75 cf*U*u0 D482.5859 413.6738 m481.5625 413.127 480.1973 412.8535 478.4863 412.8535 c475.4033 412.8535 473.8623 414.002 473.8623 416.3008 c473.8623 417.6719 474.4854 418.7012 475.7334 419.3887 c476.7129 419.9199 478.1982 420.2852 480.1895 420.4805 c480.1895 421.0898 L480.1895 422.3359 479.4395 422.959 477.9395 422.959 c477.001 422.959 476.0566 422.7305 475.1025 422.2715 c474.5137 423.7422 L475.6914 424.3164 476.9863 424.6016 478.4023 424.6016 c481.1914 424.6016 482.5859 423.2988 482.5859 420.6934 c482.5859 413.6738 Lf1 D480.1895 414.5938 m480.1895 419.2637 L478.8457 419.0957 477.8945 418.8359 477.335 418.4844 c476.6367 418.0508 476.2852 417.3496 476.2852 416.3809 c476.2852 414.9785 477.0762 414.2773 478.6563 414.2773 c479.2578 414.2773 479.7686 414.3828 480.1895 414.5938 cf*U*u0 D494.1309 413.6738 m493.1504 413.127 491.832 412.8535 490.1797 412.8535 c488.5117 412.8535 487.2158 413.3594 486.2891 414.3691 c485.3652 415.377 484.9023 416.7871 484.9023 418.5977 c484.9023 420.4199 485.3652 421.8711 486.291 422.9492 c487.1875 423.9883 488.3789 424.5078 489.8672 424.5078 c490.5264 424.5078 491.0938 424.4355 491.5703 424.291 c491.5703 428.8691 L494.1309 428.8691 l494.1309 413.6738 Lf1 D491.5703 414.75 m491.5703 422.9082 L491.2344 423.0059 490.8555 423.0547 490.4355 423.0547 c488.4443 423.0547 487.4492 421.6191 487.4492 418.7441 c487.4492 415.9121 488.3809 414.4961 490.2471 414.4961 c490.8633 414.4961 491.3047 414.582 491.5703 414.75 cf*UU*u0 D390.1152 428.8418 m392.8418 428.8418 L392.8418 416.6543 L392.8418 415.3145 393.5645 414.6426 395.0078 414.6426 c395.6934 414.6426 396.3193 414.7559 396.8828 414.9785 c396.8828 428.8418 L399.6113 428.8418 L399.6113 413.7949 L398.375 413.2148 396.8027 412.9238 394.8965 412.9238 c393.2139 412.9238 391.9688 413.2969 391.165 414.041 c390.4658 414.666 390.1152 415.5234 390.1152 416.6113 c390.1152 428.8418 Lf*UUu*u338.7324 367.6631 m335.7793 367.6631 L335.7793 364.6963 L338.4063 364.6963 L338.4063 363.5068 L335.7793 363.5068 L335.7793 359.0771 L333.9756 359.0771 L333.9756 368.8652 L338.7324 368.8652 l338.7324 367.6631 Lf*U*u344.9795 359.4561 m344.3428 359.1162 343.4941 358.9463 342.4307 358.9463 c340.5146 358.9463 339.5557 359.6611 339.5557 361.0898 c339.5557 362.0049 340.0137 362.6797 340.9277 363.1152 c341.4941 363.3848 342.3477 363.5771 343.4893 363.6904 c343.4893 364.0693 L343.4893 364.8447 343.0234 365.2324 342.0908 365.2324 c341.5078 365.2324 340.9189 365.0889 340.3271 364.8008 c339.9609 365.7158 L340.6924 366.0732 341.499 366.252 342.3789 366.252 c344.1123 366.252 344.9795 365.4414 344.9795 363.8213 c344.9795 359.4561 Lf1 D343.4893 360.0313 m343.4893 362.9326 L342.71 362.8359 342.1582 362.7012 341.834 362.5273 c341.3086 362.248 341.0459 361.7861 341.0459 361.1416 c341.0459 360.2705 341.54 359.835 342.5303 359.835 c342.9072 359.835 343.2266 359.9004 343.4893 360.0313 cf*U*u0 D350.8467 359.4297 m350.4893 359.1074 349.9365 358.9463 349.1865 358.9463 c348.2461 358.9463 347.5273 359.3428 347.0313 360.1357 c346.6123 360.7979 346.4033 361.625 346.4033 362.6182 c346.4033 363.6113 346.6172 364.4355 347.0439 365.0889 c347.54 365.8643 348.2588 366.252 349.2002 366.252 c349.9053 366.252 350.4502 366.0898 350.834 365.7676 c350.4941 364.8662 L350.2412 365.0576 349.9277 365.1543 349.5527 365.1543 c348.5244 365.1543 348.0107 364.3154 348.0107 362.6387 c348.0107 361.9951 348.1064 361.4521 348.2988 361.0088 c348.5596 360.4004 348.9688 360.0967 349.5264 360.0967 c349.9102 360.0967 350.2275 360.2012 350.4805 360.4102 c350.8467 359.4297 Lf*U*u357.5381 359.4951 m356.832 359.1211 355.9307 358.9336 354.833 358.9336 c353.0117 358.9336 352.1016 359.7256 352.1016 361.3115 c352.1016 366.1211 L353.709 366.1211 L353.709 361.2207 L353.709 360.4277 354.1006 360.0313 354.8838 360.0313 c355.3145 360.0313 355.6631 360.1094 355.9307 360.2666 c355.9307 366.1211 L357.5381 366.1211 l357.5381 359.4951 Lf*U*u360.9092 359.0771 m359.3018 359.0771 L359.3018 368.9697 L360.9092 368.9697 l360.9092 359.0771 Lf*U*u365.8096 359.1426 m365.6006 359.0469 365.3301 358.999 364.999 358.999 c364.3984 358.999 363.9258 359.166 363.5811 359.502 c363.2373 359.8369 363.0654 360.3057 363.0654 360.9063 c363.0654 365.1016 L362.2813 365.1016 L362.2813 366.1211 L363.0654 366.1211 L363.0654 368.4727 L364.6729 368.917 L364.6729 366.1211 L365.8096 366.1211 L365.8096 365.1016 L364.6729 365.1016 L364.6729 360.9854 L364.6729 360.375 364.9268 360.0703 365.4346 360.0703 c365.5381 360.0703 365.6631 360.0918 365.8096 360.1357 c365.8096 359.1426 Lf*U*u372.2393 359.4561 m371.6025 359.1162 370.7539 358.9463 369.6904 358.9463 c367.7744 358.9463 366.8154 359.6611 366.8154 361.0898 c366.8154 362.0049 367.2734 362.6797 368.1875 363.1152 c368.7539 363.3848 369.6074 363.5771 370.749 363.6904 c370.749 364.0693 L370.749 364.8447 370.2832 365.2324 369.3506 365.2324 c368.7676 365.2324 368.1787 365.0889 367.5869 364.8008 c367.2207 365.7158 L367.9521 366.0732 368.7588 366.252 369.6387 366.252 c371.3721 366.252 372.2393 365.4414 372.2393 363.8213 c372.2393 359.4561 Lf1 D370.749 360.0313 m370.749 362.9326 L369.9697 362.8359 369.418 362.7012 369.0938 362.5273 c368.5684 362.248 368.3057 361.7861 368.3057 361.1416 c368.3057 360.2705 368.7998 359.835 369.79 359.835 c370.167 359.835 370.4863 359.9004 370.749 360.0313 cf*U*u0 D379.3613 359.5088 m378.751 359.1689 377.9316 358.999 376.9043 358.999 c375.8242 358.999 375.001 359.3301 374.4346 359.9941 c373.8936 360.6221 373.624 361.4814 373.624 362.5732 c373.624 363.6201 373.8711 364.4756 374.3662 365.1387 c374.9141 365.8809 375.6904 366.252 376.6982 366.252 c377.1064 366.252 377.458 366.208 377.7539 366.1211 c377.7539 369.0225 L379.3613 369.0225 l379.3613 359.5088 Lf1 D377.7539 360.1748 m377.7539 365.2578 L377.5459 365.3193 377.3115 365.3496 377.0518 365.3496 c375.8203 365.3496 375.2051 364.4551 375.2051 362.6641 c375.2051 360.9004 375.7813 360.0176 376.9346 360.0176 c377.3154 360.0176 377.5889 360.0703 377.7539 360.1748 cf*U*u0 D390.0908 359.5088 m389.4805 359.1689 388.6611 358.999 387.6338 358.999 c386.5537 358.999 385.7305 359.3301 385.1641 359.9941 c384.623 360.6221 384.3535 361.4814 384.3535 362.5732 c384.3535 363.6201 384.6006 364.4756 385.0957 365.1387 c385.6436 365.8809 386.4199 366.252 387.4277 366.252 c387.8359 366.252 388.1875 366.208 388.4834 366.1211 c388.4834 369.0225 L390.0908 369.0225 l390.0908 359.5088 Lf1 D388.4834 360.1748 m388.4834 365.2578 L388.2754 365.3193 388.041 365.3496 387.7813 365.3496 c386.5498 365.3496 385.9346 364.4551 385.9346 362.6641 c385.9346 360.9004 386.5107 360.0176 387.6641 360.0176 c388.0449 360.0176 388.3184 360.0703 388.4834 360.1748 cf*U*u0 D397.3965 362.6396 m393.083 362.0225 L393.2139 360.7031 393.8535 360.0439 395.0039 360.0439 c395.6836 360.0439 396.2764 360.1787 396.7813 360.4492 c397.1611 359.4434 L396.5596 359.1123 395.7842 358.9463 394.835 358.9463 c393.7539 358.9463 392.9268 359.2949 392.3516 359.9922 c391.8291 360.6367 391.5674 361.5117 391.5674 362.6182 c391.5674 363.6729 391.7979 364.5176 392.2598 365.1543 c392.7832 365.8857 393.5537 366.252 394.5732 366.252 c395.6104 366.252 396.3643 365.8936 396.835 365.1787 c397.2441 364.5586 397.4316 363.7129 397.3965 362.6396 cf1 D395.9063 363.2725 m395.9063 364.6133 395.4443 365.2842 394.5205 365.2842 c393.9287 365.2842 393.5059 365.0039 393.2529 364.4434 c393.0615 364.0234 392.9746 363.4844 392.9922 362.8281 c395.9063 363.2725 Lf*U*u0 D409.7588 359.0898 m407.8896 359.0898 L407.1318 361.5996 L403.9824 361.5996 L403.1982 359.0898 L401.5781 359.0898 L404.8184 368.8779 L406.5303 368.8779 l409.7588 359.0898 Lf1 D406.8838 362.6582 m405.877 366.0947 L405.7295 366.6084 405.6416 367.0049 405.6162 367.2842 c405.5898 367.2842 L405.5283 366.8828 405.4375 366.4863 405.3154 366.0947 c404.2695 362.6582 l406.8838 362.6582 Lf*U*u0 D414.6846 366.2383 m414.373 365.0752 L414.1396 365.1543 413.8975 365.1934 413.6465 365.1934 c413.3438 365.1934 413.0928 365.1367 412.8945 365.0234 c412.8945 359.0771 L411.2871 359.0771 L411.2871 365.7422 l412.0625 366.1162 413.1953 366.2822 414.6846 366.2383 cf*U*u418.8799 359.1426 m418.6709 359.0469 418.4004 358.999 418.0693 358.999 c417.4688 358.999 416.9961 359.166 416.6514 359.502 c416.3076 359.8369 416.1357 360.3057 416.1357 360.9063 c416.1357 365.1016 L415.3516 365.1016 L415.3516 366.1211 L416.1357 366.1211 L416.1357 368.4727 L417.7432 368.917 L417.7432 366.1211 L418.8799 366.1211 L418.8799 365.1016 L417.7432 365.1016 L417.7432 360.9854 L417.7432 360.375 417.9971 360.0703 418.5049 360.0703 c418.6084 360.0703 418.7334 360.0918 418.8799 360.1357 c418.8799 359.1426 Lf*U*u425.7803 362.6396 m421.4668 362.0225 L421.5977 360.7031 422.2373 360.0439 423.3877 360.0439 c424.0674 360.0439 424.6602 360.1787 425.165 360.4492 c425.5449 359.4434 L424.9434 359.1123 424.168 358.9463 423.2188 358.9463 c422.1377 358.9463 421.3105 359.2949 420.7354 359.9922 c420.2129 360.6367 419.9512 361.5117 419.9512 362.6182 c419.9512 363.6729 420.1816 364.5176 420.6436 365.1543 c421.167 365.8857 421.9375 366.252 422.957 366.252 c423.9941 366.252 424.748 365.8936 425.2188 365.1787 c425.6279 364.5586 425.8154 363.7129 425.7803 362.6396 cf1 D424.29 363.2725 m424.29 364.6133 423.8281 365.2842 422.9043 365.2842 c422.3125 365.2842 421.8896 365.0039 421.6367 364.4434 c421.4453 364.0234 421.3584 363.4844 421.376 362.8281 c424.29 363.2725 Lf*U*u0 D431.2686 361.1025 m431.2686 360.4404 431.0117 359.9092 430.4971 359.5088 c430.0186 359.1426 429.4385 358.96 428.7588 358.96 c427.958 358.96 427.3086 359.1299 426.8125 359.4688 c427.2305 360.4883 L427.5703 360.2188 428.0098 360.083 428.5498 360.083 c428.8555 360.083 429.1123 360.1729 429.3213 360.3516 c429.5303 360.5293 429.6348 360.7715 429.6348 361.0762 c429.6348 361.5908 429.291 361.9785 428.6025 362.2393 c427.5313 362.6494 426.9951 363.3066 426.9951 364.2129 c426.9951 364.8223 427.2168 365.3193 427.6611 365.7031 c428.0801 366.0684 428.6025 366.252 429.2295 366.252 c429.9443 366.252 430.5537 366.0859 431.0596 365.7549 c430.667 364.8271 L430.3447 365.0889 429.9697 365.2188 429.543 365.2188 c429.2559 365.2188 429.0166 365.1367 428.8242 364.9707 c428.6328 364.8057 428.5371 364.5791 428.5371 364.291 c428.5371 363.8291 428.8857 363.459 429.583 363.1807 c430.7061 362.7275 431.2686 362.0352 431.2686 361.1025 cf*U*u441.71 366.1211 m438.4951 356.2676 L436.8086 356.2676 L437.959 359.0771 L435.6328 366.1211 L437.332 366.1211 L438.5469 361.5605 L438.6338 361.2285 438.6816 360.8936 438.6904 360.5537 c438.7168 360.5537 L438.7344 360.7363 438.7998 361.0723 438.9131 361.5605 c440.2197 366.1211 l441.71 366.1211 Lf*U*u452.8828 359.0771 m451.0664 359.0771 L451.0664 363.5332 L447.9697 363.5332 L447.9697 359.0771 L446.1533 359.0771 L446.1533 368.9307 L447.9697 368.9307 L447.9697 364.7354 L451.0664 364.7354 L451.0664 368.9307 L452.8828 368.9307 l452.8828 359.0771 Lf*U*u459.8096 359.4951 m459.1035 359.1211 458.2021 358.9336 457.1045 358.9336 c455.2832 358.9336 454.373 359.7256 454.373 361.3115 c454.373 366.1211 L455.9805 366.1211 L455.9805 361.2207 L455.9805 360.4277 456.3721 360.0313 457.1553 360.0313 c457.5859 360.0313 457.9346 360.1094 458.2021 360.2666 c458.2021 366.1211 L459.8096 366.1211 l459.8096 359.4951 Lf*U*u471.0215 359.0771 m469.4268 359.0771 L469.4268 364.082 L469.4268 364.8486 469.0303 365.2324 468.2373 365.2324 c467.7754 365.2324 467.3838 365.0713 467.0615 364.749 c467.0615 359.0771 L465.4668 359.0771 L465.4668 364.1104 L465.4668 364.8584 465.0273 365.2324 464.1475 365.2324 c463.7637 365.2324 463.416 365.167 463.1016 365.0361 c463.1016 359.0771 L461.5078 359.0771 L461.5078 365.7422 L462.2129 366.082 463.0928 366.252 464.1475 366.252 c465.1406 366.252 465.8721 365.9941 466.3428 365.4805 c466.9004 365.9941 467.6543 366.252 468.6035 366.252 c469.3008 366.252 469.8779 366.0645 470.335 365.6895 c470.793 365.3145 471.0215 364.7832 471.0215 364.0957 c471.0215 359.0771 Lf*U*u477.8164 359.4561 m477.1797 359.1162 476.3311 358.9463 475.2676 358.9463 c473.3516 358.9463 472.3926 359.6611 472.3926 361.0898 c472.3926 362.0049 472.8506 362.6797 473.7646 363.1152 c474.3311 363.3848 475.1846 363.5771 476.3262 363.6904 c476.3262 364.0693 L476.3262 364.8447 475.8604 365.2324 474.9277 365.2324 c474.3447 365.2324 473.7559 365.0889 473.1641 364.8008 c472.7979 365.7158 L473.5293 366.0732 474.3359 366.252 475.2158 366.252 c476.9492 366.252 477.8164 365.4414 477.8164 363.8213 c477.8164 359.4561 Lf1 D476.3262 360.0313 m476.3262 362.9326 L475.5469 362.8359 474.9951 362.7012 474.6709 362.5273 c474.1455 362.248 473.8828 361.7861 473.8828 361.1416 c473.8828 360.2705 474.377 359.835 475.3672 359.835 c475.7441 359.835 476.0635 359.9004 476.3262 360.0313 cf*U*u0 D485.0557 359.0771 m483.4482 359.0771 L483.4482 364.0693 L483.4482 364.8535 483.0303 365.2451 482.1943 365.2451 c481.7979 365.2451 481.4365 365.1797 481.1094 365.0488 c481.1094 359.0771 L479.502 359.0771 L479.502 365.7422 L480.2246 366.082 481.1436 366.252 482.2588 366.252 c483.0605 366.252 483.7012 366.0986 484.1797 365.7939 c484.7637 365.4199 485.0557 364.8535 485.0557 364.0957 c485.0557 359.0771 Lf*U*u488.4795 368.1201 m488.4795 367.8936 488.3926 367.7061 488.2188 367.5586 c488.0439 367.4102 487.8389 367.3359 487.6045 367.3359 c487.3691 367.3359 487.1641 367.4102 486.9902 367.5586 c486.8154 367.7061 486.7285 367.8936 486.7285 368.1201 c486.7285 368.3467 486.8154 368.5361 486.9902 368.6885 c487.1641 368.8408 487.3691 368.917 487.6045 368.917 c487.8389 368.917 488.0439 368.8438 488.2188 368.6953 c488.3926 368.5469 488.4795 368.3555 488.4795 368.1201 cf488.4014 359.0771 m486.7939 359.0771 L486.7939 366.1211 L488.4014 366.1211 l488.4014 359.0771 Lf*U*u495.5889 359.5088 m494.9785 359.1689 494.1592 358.999 493.1318 358.999 c492.0518 358.999 491.2285 359.3301 490.6621 359.9941 c490.1211 360.6221 489.8516 361.4814 489.8516 362.5732 c489.8516 363.6201 490.0986 364.4756 490.5938 365.1387 c491.1416 365.8809 491.918 366.252 492.9258 366.252 c493.334 366.252 493.6855 366.208 493.9814 366.1211 c493.9814 369.0225 L495.5889 369.0225 l495.5889 359.5088 Lf1 D493.9814 360.1748 m493.9814 365.2578 L493.7734 365.3193 493.5391 365.3496 493.2793 365.3496 c492.0479 365.3496 491.4326 364.4551 491.4326 362.6641 c491.4326 360.9004 492.0088 360.0176 493.1621 360.0176 c493.543 360.0176 493.8164 360.0703 493.9814 360.1748 cf*U*u0 D502.4238 359.4561 m501.7871 359.1162 500.9385 358.9463 499.875 358.9463 c497.959 358.9463 497 359.6611 497 361.0898 c497 362.0049 497.458 362.6797 498.3721 363.1152 c498.9385 363.3848 499.792 363.5771 500.9336 363.6904 c500.9336 364.0693 L500.9336 364.8447 500.4678 365.2324 499.5352 365.2324 c498.9521 365.2324 498.3633 365.0889 497.7715 364.8008 c497.4053 365.7158 L498.1367 366.0732 498.9434 366.252 499.8232 366.252 c501.5566 366.252 502.4238 365.4414 502.4238 363.8213 c502.4238 359.4561 Lf1 D500.9336 360.0313 m500.9336 362.9326 L500.1543 362.8359 499.6025 362.7012 499.2783 362.5273 c498.7529 362.248 498.4902 361.7861 498.4902 361.1416 c498.4902 360.2705 498.9844 359.835 499.9746 359.835 c500.3516 359.835 500.6709 359.9004 500.9336 360.0313 cf*U*u0 D509.5459 359.5088 m508.9355 359.1689 508.1162 358.999 507.0889 358.999 c506.0088 358.999 505.1855 359.3301 504.6191 359.9941 c504.0781 360.6221 503.8086 361.4814 503.8086 362.5732 c503.8086 363.6201 504.0557 364.4756 504.5508 365.1387 c505.0986 365.8809 505.875 366.252 506.8828 366.252 c507.291 366.252 507.6426 366.208 507.9385 366.1211 c507.9385 369.0225 L509.5459 369.0225 l509.5459 359.5088 Lf1 D507.9385 360.1748 m507.9385 365.2578 L507.7305 365.3193 507.4961 365.3496 507.2363 365.3496 c506.0049 365.3496 505.3896 364.4551 505.3896 362.6641 c505.3896 360.9004 505.9658 360.0176 507.1191 360.0176 c507.5 360.0176 507.7734 360.0703 507.9385 360.1748 cf*U*u0 D516.8516 362.6396 m512.5381 362.0225 L512.6689 360.7031 513.3086 360.0439 514.459 360.0439 c515.1387 360.0439 515.7314 360.1787 516.2363 360.4492 c516.6162 359.4434 L516.0146 359.1123 515.2393 358.9463 514.29 358.9463 c513.209 358.9463 512.3818 359.2949 511.8066 359.9922 c511.2842 360.6367 511.0225 361.5117 511.0225 362.6182 c511.0225 363.6729 511.2529 364.5176 511.7148 365.1543 c512.2383 365.8857 513.0088 366.252 514.0283 366.252 c515.0654 366.252 515.8193 365.8936 516.29 365.1787 c516.6992 364.5586 516.8867 363.7129 516.8516 362.6396 cf1 D515.3613 363.2725 m515.3613 364.6133 514.8994 365.2842 513.9756 365.2842 c513.3838 365.2842 512.9609 365.0039 512.708 364.4434 c512.5166 364.0234 512.4297 363.4844 512.4473 362.8281 c515.3613 363.2725 Lf*U*u0 D522.3398 361.1025 m522.3398 360.4404 522.083 359.9092 521.5684 359.5088 c521.0898 359.1426 520.5098 358.96 519.8301 358.96 c519.0293 358.96 518.3799 359.1299 517.8838 359.4688 c518.3018 360.4883 L518.6416 360.2188 519.0811 360.083 519.6211 360.083 c519.9268 360.083 520.1836 360.1729 520.3926 360.3516 c520.6016 360.5293 520.7061 360.7715 520.7061 361.0762 c520.7061 361.5908 520.3623 361.9785 519.6738 362.2393 c518.6025 362.6494 518.0664 363.3066 518.0664 364.2129 c518.0664 364.8223 518.2881 365.3193 518.7324 365.7031 c519.1514 366.0684 519.6738 366.252 520.3008 366.252 c521.0156 366.252 521.625 366.0859 522.1309 365.7549 c521.7383 364.8271 L521.416 365.0889 521.041 365.2188 520.6143 365.2188 c520.3271 365.2188 520.0879 365.1367 519.8955 364.9707 c519.7041 364.8057 519.6084 364.5791 519.6084 364.291 c519.6084 363.8291 519.957 363.459 520.6543 363.1807 c521.7773 362.7275 522.3398 362.0352 522.3398 361.1025 cf*UUUu1 Ap0 1 1 0 k0 R0 1 1 0 K0.24976 w280.1309 374.8535 m90.8589 374.8535 L90.8589 431.5918 L280.1309 431.5918 L280.1309 374.8535 L(b) *0 0 0 0 k1 w296.1104 342.9063 m74.6426 342.9063 L74.6426 447.5391 L296.1104 447.5391 L296.1104 342.9063 Lfu0 R0 1 1 0 K2 w296.1699 358.9277 m74.6426 358.9277 L74.6426 447.5391 L296.1699 447.5391 L296.1699 358.9277 L(b) *0 Ap0 0 1 0 k1 w1 XR91.0498 428.916 m103.9678 431.6113 114.8213 431.6113 v125.6743 431.6113 139.1738 428.916 Y139.1738 392.8105 139.1738 387.3945 V139.1738 384.0117 137.1006 382.1934 136.3633 381.6602 C134.71 380.4688 127.3086 374.8516 115.1294 374.8516 C103.6689 374.8516 96.6787 379.7969 93.9014 381.7422 C92.6548 382.6211 91.0498 384.5371 91.0498 387.3945 C91.0498 391.7852 91.0498 428.916 Yfuu0 0 0 1 k0 XR135.5771 380.8867 m125.7612 374.5215 115.5693 374.8652 y115.2886 376.166 115.4004 378.4082 v115.5127 380.6523 116.7363 380.0195 117.6226 381.791 c117.9434 382.4355 118.2202 382.8789 118.7222 384.3867 c118.7427 384.4492 118.1348 395.1914 117.98 399.75 c117.8975 402.207 117.4355 406.3047 116.895 410.291 c116.5757 412.6543 115.8579 414.5254 115.5259 416.7676 c115.0454 420.0059 114.4878 423.6582 y114.0889 422.627 113.5166 418.7695 112.9424 414.4141 c112.666 412.3242 112.3896 410.1211 112.1318 408.0605 c111.585 403.6973 110.2227 392.0176 110.0166 391.3848 c109.7051 390.4219 109.6724 391.6387 y110.4795 403.8887 110.7227 409.2617 V110.8413 411.8887 111.04 414.7754 111.3677 417.5449 C111.6133 419.623 111.9321 421.6387 112.3442 423.4258 C113.7466 427.6641 114.1943 427.748 v114.6406 427.832 116.2598 425.0781 116.8066 422.625 c118.0449 417.0918 118.7749 416.3828 119.7183 410.5664 c120.6152 405.043 121.4336 400.4199 121.5449 399.6641 c121.9463 396.9219 121.7476 388.3691 121.0557 384.9629 C120.8921 384.0332 120.8423 383.6914 120.2354 383.0762 c118.813 381.6367 117.8013 379.9219 117.8013 378.8008 c117.8013 377.6777 117.6143 377.6992 117.8804 377.0508 C119.7563 374.2402 130.5396 380.668 V133.9092 382.4336 133.9092 386.3301 V133.9092 425.7402 l123.2173 429.3555 114.9819 429.3555 v106.7466 429.3555 96.4341 425.748 y96.4341 386.5078 l96.4341 384.0938 96.7852 379.5625 100.2344 378.0176 C91.0498 381.1602 91.0498 386.5566 V91.0498 429.0801 l105.0703 431.6602 114.9878 431.6602 v124.9053 431.6602 139.1738 429.0801 y139.1738 390.1738 139.1738 386.5059 v139.1738 382.8379 135.5771 380.8867 YfUUu*u268.813 413.8223 m267.8325 413.2754 266.5151 413.0039 264.8608 413.0039 c263.1929 413.0039 261.8965 413.5078 260.9712 414.5176 c260.0464 415.5273 259.584 416.9375 259.584 418.7461 c259.584 420.5684 260.0464 422.0215 260.9727 423.0996 c261.8701 424.1387 263.0625 424.6582 264.5488 424.6582 c265.208 424.6582 265.7759 424.584 266.2539 424.4414 c266.2539 429.0176 L268.813 429.0176 l268.813 413.8223 Lf1 D266.2539 414.8984 m266.2539 423.0586 L265.9165 423.1563 265.5376 423.2051 265.1167 423.2051 c263.1265 423.2051 262.1309 421.7676 262.1309 418.8945 c262.1309 416.0625 263.063 414.6465 264.9277 414.6465 c265.5449 414.6465 265.9868 414.7305 266.2539 414.8984 cf*U*u0 D280.5117 418.9551 m273.5718 417.9492 L273.7808 415.8477 274.813 414.7969 276.6641 414.7969 c277.7573 414.7969 278.7104 415.0039 279.5244 415.416 c280.1328 413.8008 L279.166 413.2695 277.918 413.0039 276.3901 413.0039 c274.7637 413.0039 273.4795 413.5156 272.54 414.5391 c271.6016 415.5605 271.1318 417.0176 271.1318 418.9102 c271.1318 420.7461 271.563 422.1777 272.4248 423.207 c273.2876 424.2383 274.4683 424.752 275.9678 424.752 c277.4829 424.752 278.6318 424.2598 279.418 423.2715 c280.2036 422.2852 280.5679 420.8477 280.5117 418.9551 cf1 D278.1152 419.9609 m278.1152 422.1055 277.3706 423.1777 275.8823 423.1777 c275.0957 423.1777 274.4922 422.8613 274.0708 422.2305 c273.6084 421.5449 273.3901 420.5488 273.4185 419.2461 c278.1152 419.9609 Lf*UUu*u0 D151.5244 382.9766 m147.5015 382.9766 L147.5015 407.8457 L151.5244 407.8457 l151.5244 382.9766 Lf*U*u170.0801 391.8457 m170.0801 389.0996 169.4756 386.9141 168.2666 385.2891 c166.9478 383.5313 165.0913 382.6523 162.6963 382.6523 c160.3008 382.6523 158.4438 383.5313 157.1255 385.2891 c155.917 386.9141 155.3125 389.0996 155.3125 391.8457 c155.3125 394.6133 155.917 396.8105 157.1255 398.4355 c158.4438 400.1934 160.3008 401.0723 162.6963 401.0723 c165.1133 401.0723 166.9702 400.1934 168.2666 398.4355 c169.4756 396.8105 170.0801 394.6133 170.0801 391.8457 cf1 D166.0889 391.877 m166.0889 396.3145 164.9575 398.5352 162.6963 398.5352 c160.4341 398.5352 159.3027 396.3145 159.3027 391.877 c159.3027 387.5469 160.4341 385.3828 162.6963 385.3828 c164.9575 385.3828 166.0889 387.5469 166.0889 391.877 cf*U*u0 D183.8691 388.0898 m183.8691 386.5957 183.2866 385.3223 182.1216 384.2676 c180.9565 383.2129 179.4287 382.6855 177.5381 382.6855 c175.5151 382.6855 173.8774 383.1133 172.6245 383.9688 c173.6797 386.5371 L174.5376 385.8535 175.6479 385.5137 177.0117 385.5137 c177.8252 385.5137 178.4849 385.748 178.9902 386.2207 c179.4966 386.6934 179.749 387.293 179.749 388.0176 c179.749 388.7656 179.5513 389.3516 179.1563 389.7813 c178.7607 390.2109 178.0908 390.5996 177.1465 390.9512 c174.4443 391.9844 173.0928 393.6445 173.0928 395.9297 c173.0928 397.3809 173.6138 398.5977 174.6572 399.5879 c175.7007 400.5781 177.0566 401.0723 178.7246 401.0723 c180.5254 401.0723 182.0625 400.6543 183.3359 399.8184 c182.3496 397.4785 L181.5376 398.1387 180.5942 398.4707 179.52 398.4707 c178.73 398.4707 178.1099 398.2441 177.6611 397.7949 c177.2119 397.3457 176.9863 396.7891 176.9863 396.1309 c176.9863 394.9648 177.8643 394.0332 179.6211 393.3301 c182.4531 392.1875 183.8691 390.4414 183.8691 388.0898 cf*U*u213.54 382.9766 m208.8477 382.9766 L206.9492 389.3145 L198.9966 389.3145 L197.0269 382.9766 L192.9424 382.9766 L201.1104 407.6309 L205.4082 407.6309 l213.54 382.9766 Lf1 D206.3042 391.9668 m203.7603 400.6484 L203.4023 401.8672 203.1885 402.8613 203.1157 403.627 c203.0444 403.627 L202.9253 402.9805 202.6973 401.9883 202.3638 400.6484 c199.7129 391.9668 l206.3042 391.9668 Lf*U*u0 D230.0835 382.9766 m226.0605 382.9766 L226.0605 395.5684 L226.0605 397.5449 224.9961 398.5352 222.8667 398.5352 c221.856 398.5352 220.9341 398.3691 220.0991 398.041 c220.0991 382.9766 L216.0767 382.9766 L216.0767 399.7871 L217.8999 400.6426 220.2178 401.0723 223.0303 401.0723 c225.5132 401.0723 227.3486 400.5234 228.5356 399.4238 c229.5674 398.5 230.0835 397.2363 230.0835 395.6328 c230.0835 382.9766 Lf*U*u248.2153 383.9375 m246.6768 383.082 244.6089 382.6523 242.0161 382.6523 c239.3999 382.6523 237.3657 383.4434 235.915 385.0254 c234.4639 386.6074 233.7388 388.8145 233.7388 391.6504 c233.7388 394.5059 234.4639 396.7793 235.915 398.4727 c237.3223 400.0977 239.1909 400.9102 241.521 400.9102 c242.5542 400.9102 243.4443 400.7988 244.1924 400.5762 c244.1924 407.7656 L248.2153 407.7656 l248.2153 383.9375 Lf1 D244.1924 385.6172 m244.1924 398.4023 L243.665 398.5547 243.0708 398.6309 242.4116 398.6309 c239.29 398.6309 237.7295 396.3809 237.7295 391.8789 c237.7295 387.4395 239.1909 385.2227 242.1152 385.2227 c243.082 385.2227 243.7739 385.3535 244.1924 385.6172 cf*U*u0 D266.5195 391.9746 m255.6411 390.3926 L255.9702 387.0957 257.5854 385.4473 260.4854 385.4473 c262.1992 385.4473 263.6934 385.7773 264.9683 386.4355 c265.9243 383.9023 L264.4082 383.0703 262.4526 382.6523 260.0576 382.6523 c257.5078 382.6523 255.4976 383.4551 254.0249 385.0586 c252.5527 386.6621 251.8174 388.9453 251.8174 391.9121 c251.8174 394.7891 252.4927 397.0352 253.8447 398.6484 c255.1958 400.2637 257.0474 401.0723 259.3989 401.0723 c261.7729 401.0723 263.5752 400.2969 264.8052 398.748 c266.0361 397.1973 266.6079 394.9395 266.5195 391.9746 cf1 D262.7554 393.5566 m262.7554 396.918 261.5903 398.5996 259.2603 398.5996 c258.0303 398.5996 257.0854 398.1035 256.4258 397.1172 c255.7007 396.0391 255.3608 394.4785 255.4038 392.4355 c262.7554 393.5566 Lf*U*u0 D280.3413 388.0898 m280.3413 386.5957 279.7588 385.3223 278.5938 384.2676 c277.4277 383.2129 275.9009 382.6855 274.0098 382.6855 c271.9878 382.6855 270.3496 383.1133 269.0952 383.9688 c270.1509 386.5371 L271.0093 385.8535 272.1196 385.5137 273.4834 385.5137 c274.2969 385.5137 274.9565 385.748 275.4619 386.2207 c275.9678 386.6934 276.2207 387.293 276.2207 388.0176 c276.2207 388.7656 276.0234 389.3516 275.6284 389.7813 c275.2329 390.2109 274.5625 390.5996 273.6182 390.9512 c270.916 391.9844 269.564 393.6445 269.564 395.9297 c269.564 397.3809 270.0864 398.5977 271.1289 399.5879 c272.1724 400.5781 273.5283 401.0723 275.1973 401.0723 c276.9976 401.0723 278.5347 400.6543 279.8076 399.8184 c278.8203 397.4785 L278.0093 398.1387 277.0659 398.4707 275.9917 398.4707 c275.2021 398.4707 274.5825 398.2441 274.1323 397.7949 c273.6826 397.3457 273.4585 396.7891 273.4585 396.1309 c273.4585 394.9648 274.3369 394.0332 276.0933 393.3301 c278.9248 392.1875 280.3413 390.4414 280.3413 388.0898 cf*UUu*u168.7231 413.1758 m166.1621 413.1758 L166.1621 421.209 L166.1621 422.4707 165.4819 423.1016 164.1221 423.1016 c163.4775 423.1016 162.8882 422.9961 162.355 422.7871 c162.355 413.1758 L159.7949 413.1758 L159.7949 423.8984 L160.9575 424.4434 162.4351 424.7168 164.2271 424.7168 c165.8096 424.7168 166.9795 424.3652 167.7349 423.666 c168.3936 423.0801 168.7231 422.2734 168.7231 421.248 c168.7231 413.1758 Lf*U*u174.2456 427.7344 m174.2456 427.3828 174.1089 427.084 173.835 426.8398 c173.5615 426.5938 173.2285 426.4707 172.8359 426.4707 c172.4434 426.4707 172.1108 426.5938 171.8364 426.8398 c171.5635 427.084 171.4263 427.3828 171.4263 427.7344 c171.4263 428.0859 171.5635 428.3867 171.8364 428.6387 c172.1108 428.8906 172.4434 429.0176 172.8359 429.0176 c173.2285 429.0176 173.5615 428.8945 173.835 428.6504 c174.1089 428.4043 174.2456 428.0996 174.2456 427.7344 cf174.1104 413.1758 m171.5498 413.1758 L171.5498 424.5137 L174.1104 424.5137 l174.1104 413.1758 Lf*U*u185.7861 424.5137 m182.1475 413.1758 L179.7085 413.1758 L176.0054 424.5137 L178.7402 424.5137 L180.7383 417.1953 L180.8926 416.6484 180.9834 416.1289 181.0117 415.6387 c181.0537 415.6387 L181.124 416.0449 181.2217 416.5645 181.3481 417.1953 c183.3882 424.5137 l185.7861 424.5137 Lf*U*u196.5278 418.9219 m189.5879 417.9141 L189.7988 415.8125 190.8296 414.7637 192.6792 414.7637 c193.7734 414.7637 194.7261 414.9688 195.541 415.3828 c196.1504 413.7656 L195.1826 413.2344 193.9351 412.9688 192.4067 412.9688 c190.7793 412.9688 189.4966 413.4805 188.5571 414.5039 c187.6172 415.5254 187.1484 416.9824 187.1484 418.875 c187.1484 420.7109 187.5796 422.1445 188.4414 423.1738 c189.3037 424.2031 190.4849 424.7168 191.9854 424.7168 c193.499 424.7168 194.6494 424.2246 195.4346 423.2383 c196.2192 422.25 196.584 420.8125 196.5278 418.9219 cf1 D194.1323 419.9258 m194.1323 422.0703 193.3877 423.1426 191.8994 423.1426 c191.1133 423.1426 190.5093 422.8281 190.0879 422.1973 c189.6245 421.5098 189.4072 420.5137 189.4351 419.2109 c194.1323 419.9258 Lf*U*u0 D204.3228 424.7051 m203.8169 422.8281 L203.4375 422.9551 203.0439 423.0176 202.6362 423.0176 c202.1455 423.0176 201.7378 422.9258 201.4141 422.7441 c201.4141 413.1758 L198.854 413.1758 L198.854 423.9063 l200.1016 424.5078 201.9248 424.7754 204.3228 424.7051 cf*U*u212.4961 416.4336 m212.4961 415.4805 212.125 414.666 211.3809 413.9941 c210.6372 413.3184 209.6621 412.9824 208.457 412.9824 c207.166 412.9824 206.1201 413.2559 205.3208 413.8047 c205.9941 415.4453 L206.541 415.0078 207.2495 414.7891 208.1201 414.7891 c208.6387 414.7891 209.0601 414.9414 209.3828 415.2422 c209.7056 415.543 209.8667 415.9258 209.8667 416.3887 c209.8667 416.8652 209.7402 417.2402 209.4893 417.5137 c209.2358 417.7871 208.8096 418.0371 208.2065 418.2598 c206.4839 418.9199 205.6216 419.9785 205.6216 421.4375 c205.6216 422.3613 205.9536 423.1406 206.6196 423.7715 c207.2852 424.4023 208.1499 424.7168 209.2144 424.7168 c210.3633 424.7168 211.3442 424.4531 212.1563 423.9199 c211.5254 422.4297 L211.0073 422.8516 210.4048 423.0625 209.7192 423.0625 c209.2139 423.0625 208.8184 422.918 208.5313 422.6309 c208.2441 422.3418 208.1011 421.9883 208.1011 421.5664 c208.1011 420.8242 208.6606 420.2266 209.7832 419.7793 c211.5913 419.0488 212.4961 417.9336 212.4961 416.4336 cf*U*u217.5112 427.7344 m217.5112 427.3828 217.3745 427.084 217.1016 426.8398 c216.8281 426.5938 216.4951 426.4707 216.1025 426.4707 c215.71 426.4707 215.3774 426.5938 215.1025 426.8398 c214.8301 427.084 214.6929 427.3828 214.6929 427.7344 c214.6929 428.0859 214.8301 428.3867 215.1025 428.6387 c215.3774 428.8906 215.71 429.0176 216.1025 429.0176 c216.4951 429.0176 216.8281 428.8945 217.1016 428.6504 c217.3745 428.4043 217.5112 428.0996 217.5112 427.7344 cf217.3774 413.1758 m214.8169 413.1758 L214.8169 424.5137 L217.3774 424.5137 l217.3774 413.1758 Lf*U*u229.022 413.7891 m228.041 413.2422 226.7236 412.9688 225.0693 412.9688 c223.4019 412.9688 222.105 413.4746 221.1797 414.4844 c220.2544 415.4922 219.792 416.9023 219.792 418.7129 c219.792 420.5352 220.2554 421.9863 221.1807 423.0645 c222.0781 424.1035 223.271 424.623 224.7573 424.623 c225.4165 424.623 225.9844 424.5508 226.4614 424.4063 c226.4614 428.9844 L229.022 428.9844 l229.022 413.7891 Lf1 D226.4614 414.8652 m226.4614 423.0234 L226.125 423.1211 225.7471 423.1699 225.3257 423.1699 c223.3345 423.1699 222.3398 421.7344 222.3398 418.8594 c222.3398 416.0273 223.272 414.6113 225.1362 414.6113 c225.7534 414.6113 226.1953 414.6973 226.4614 414.8652 cf*U*u0 D239.9395 413.7891 m238.9165 413.2422 237.5503 412.9688 235.8403 412.9688 c232.7573 412.9688 231.2168 414.1172 231.2168 416.416 c231.2168 417.7871 231.8403 418.8164 233.0874 419.5039 c234.0679 420.0352 235.5527 420.4004 237.5435 420.5957 c237.5435 421.2051 L237.5435 422.4512 236.793 423.0742 235.2939 423.0742 c234.355 423.0742 233.4102 422.8457 232.4565 422.3867 c231.8682 423.8574 L233.0454 424.4316 234.3418 424.7168 235.7568 424.7168 c238.5454 424.7168 239.9395 423.4141 239.9395 420.8086 c239.9395 413.7891 Lf1 D237.5435 414.709 m237.5435 419.3789 L236.2002 419.2109 235.249 418.9512 234.689 418.5996 c233.9902 418.166 233.6396 417.4648 233.6396 416.4961 c233.6396 415.0938 234.4302 414.3926 236.0107 414.3926 c236.6128 414.3926 237.123 414.498 237.5435 414.709 cf*U*u0 D251.4854 413.7891 m250.5049 413.2422 249.1865 412.9688 247.5332 412.9688 c245.8647 412.9688 244.5693 413.4746 243.6431 414.4844 c242.7183 415.4922 242.2563 416.9023 242.2563 418.7129 c242.2563 420.5352 242.7188 421.9863 243.645 423.0645 c244.542 424.1035 245.7339 424.623 247.2217 424.623 c247.8809 424.623 248.4482 424.5508 248.9248 424.4063 c248.9248 428.9844 L251.4854 428.9844 l251.4854 413.7891 Lf1 D248.9248 414.8652 m248.9248 423.0234 L248.5889 423.1211 248.21 423.1699 247.7896 423.1699 c245.7983 423.1699 244.8032 421.7344 244.8032 418.8594 c244.8032 416.0273 245.7354 414.6113 247.6011 414.6113 c248.2168 414.6113 248.6592 414.6973 248.9248 414.8652 cf*UU*u0 D147.4697 428.957 m150.1968 428.957 L150.1968 416.7695 L150.1968 415.4297 150.9185 414.7578 152.3623 414.7578 c153.0474 414.7578 153.6729 414.8711 154.2383 415.0938 c154.2383 428.957 L156.9653 428.957 L156.9653 413.9102 L155.729 413.3301 154.1577 413.0391 152.251 413.0391 c150.5684 413.0391 149.3237 413.4121 148.519 414.1563 c147.8198 414.7813 147.4697 415.6387 147.4697 416.7266 c147.4697 428.957 Lf*UUu*u96.0864 367.7793 m93.1328 367.7793 L93.1328 364.8125 L95.7598 364.8125 L95.7598 363.623 L93.1328 363.623 L93.1328 359.1934 L91.3296 359.1934 L91.3296 368.9814 L96.0864 368.9814 l96.0864 367.7793 Lf*U*u102.3325 359.5723 m101.6968 359.2324 100.8472 359.0625 99.7847 359.0625 c97.8677 359.0625 96.9097 359.7773 96.9097 361.2061 c96.9097 362.1211 97.3667 362.7959 98.2817 363.2314 c98.8477 363.501 99.7017 363.6934 100.8428 363.8066 c100.8428 364.1855 L100.8428 364.9609 100.377 365.3486 99.4448 365.3486 c98.8608 365.3486 98.2729 365.2051 97.6807 364.917 c97.3145 365.832 L98.0464 366.1895 98.8521 366.3682 99.7319 366.3682 c101.4658 366.3682 102.3325 365.5576 102.3325 363.9375 c102.3325 359.5723 Lf1 D100.8428 360.1475 m100.8428 363.0488 L100.0635 362.9521 99.5112 362.8174 99.1875 362.6436 c98.6621 362.3643 98.3994 361.9023 98.3994 361.2578 c98.3994 360.3867 98.894 359.9512 99.8838 359.9512 c100.2603 359.9512 100.5801 360.0166 100.8428 360.1475 cf*U*u0 D108.2002 359.5459 m107.8428 359.2236 107.2896 359.0625 106.5405 359.0625 c105.5996 359.0625 104.8809 359.459 104.3843 360.252 c103.9663 360.9141 103.7568 361.7412 103.7568 362.7344 c103.7568 363.7275 103.9702 364.5518 104.3975 365.2051 c104.894 365.9805 105.6128 366.3682 106.5537 366.3682 c107.2593 366.3682 107.8037 366.2061 108.187 365.8838 c107.8472 364.9824 L107.5947 365.1738 107.2808 365.2705 106.9063 365.2705 c105.8784 365.2705 105.3643 364.4316 105.3643 362.7549 c105.3643 362.1113 105.46 361.5684 105.6519 361.125 c105.9131 360.5166 106.3228 360.2129 106.8804 360.2129 c107.2637 360.2129 107.5815 360.3174 107.8345 360.5264 c108.2002 359.5459 Lf*U*u114.8906 359.6113 m114.1851 359.2373 113.2832 359.0498 112.1855 359.0498 c110.3647 359.0498 109.4546 359.8418 109.4546 361.4277 c109.4546 366.2373 L111.062 366.2373 L111.062 361.3369 L111.062 360.5439 111.4536 360.1475 112.2373 360.1475 c112.6675 360.1475 113.0161 360.2256 113.2832 360.3828 c113.2832 366.2373 L114.8906 366.2373 l114.8906 359.6113 Lf*U*u118.2622 359.1934 m116.6548 359.1934 L116.6548 369.0859 L118.2622 369.0859 l118.2622 359.1934 Lf*U*u123.1631 359.2588 m122.9536 359.1631 122.6836 359.1152 122.3525 359.1152 c121.7515 359.1152 121.2788 359.2822 120.9346 359.6182 c120.5903 359.9531 120.4185 360.4219 120.4185 361.0225 c120.4185 365.2178 L119.6343 365.2178 L119.6343 366.2373 L120.4185 366.2373 L120.4185 368.5889 L122.0259 369.0332 L122.0259 366.2373 L123.1631 366.2373 L123.1631 365.2178 L122.0259 365.2178 L122.0259 361.1016 L122.0259 360.4912 122.2798 360.1865 122.7881 360.1865 c122.8916 360.1865 123.0161 360.208 123.1631 360.252 c123.1631 359.2588 Lf*U*u129.5923 359.5723 m128.9565 359.2324 128.1069 359.0625 127.0444 359.0625 c125.1274 359.0625 124.1694 359.7773 124.1694 361.2061 c124.1694 362.1211 124.6265 362.7959 125.5415 363.2314 c126.1074 363.501 126.9614 363.6934 128.1025 363.8066 c128.1025 364.1855 L128.1025 364.9609 127.6367 365.3486 126.7046 365.3486 c126.1206 365.3486 125.5327 365.2051 124.9404 364.917 c124.5742 365.832 L125.3062 366.1895 126.1118 366.3682 126.9917 366.3682 c128.7256 366.3682 129.5923 365.5576 129.5923 363.9375 c129.5923 359.5723 Lf1 D128.1025 360.1475 m128.1025 363.0488 L127.3232 362.9521 126.771 362.8174 126.4473 362.6436 c125.9219 362.3643 125.6592 361.9023 125.6592 361.2578 c125.6592 360.3867 126.1538 359.9512 127.1436 359.9512 c127.52 359.9512 127.8398 360.0166 128.1025 360.1475 cf*U*u0 D136.7144 359.625 m136.1045 359.2852 135.2856 359.1152 134.2578 359.1152 c133.1772 359.1152 132.354 359.4463 131.7876 360.1104 c131.2476 360.7383 130.9775 361.5977 130.9775 362.6895 c130.9775 363.7363 131.2251 364.5918 131.7202 365.2549 c132.2671 365.9971 133.0444 366.3682 134.0518 366.3682 c134.46 366.3682 134.812 366.3242 135.1069 366.2373 c135.1069 369.1387 L136.7144 369.1387 l136.7144 359.625 Lf1 D135.1069 360.291 m135.1069 365.374 L134.8989 365.4355 134.665 365.4658 134.4053 365.4658 c133.1743 365.4658 132.5586 364.5713 132.5586 362.7803 c132.5586 361.0166 133.1353 360.1338 134.2881 360.1338 c134.6694 360.1338 134.9424 360.1865 135.1069 360.291 cf*U*u0 D147.4429 359.625 m146.833 359.2852 146.0142 359.1152 144.9863 359.1152 c143.9058 359.1152 143.0825 359.4463 142.5161 360.1104 c141.9761 360.7383 141.7061 361.5977 141.7061 362.6895 c141.7061 363.7363 141.9536 364.5918 142.4487 365.2549 c142.9956 365.9971 143.7729 366.3682 144.7803 366.3682 c145.1885 366.3682 145.5405 366.3242 145.8354 366.2373 c145.8354 369.1387 L147.4429 369.1387 l147.4429 359.625 Lf1 D145.8354 360.291 m145.8354 365.374 L145.6274 365.4355 145.3936 365.4658 145.1338 365.4658 c143.9028 365.4658 143.2871 364.5713 143.2871 362.7803 c143.2871 361.0166 143.8638 360.1338 145.0166 360.1338 c145.3979 360.1338 145.6709 360.1865 145.8354 360.291 cf*U*u0 D154.7485 362.7559 m150.4351 362.1387 L150.5654 360.8193 151.2061 360.1602 152.356 360.1602 c153.0356 360.1602 153.6284 360.2949 154.1338 360.5654 c154.5127 359.5596 L153.9116 359.2285 153.1362 359.0625 152.1865 359.0625 c151.1064 359.0625 150.2788 359.4111 149.7036 360.1084 c149.1812 360.7529 148.9194 361.6279 148.9194 362.7344 c148.9194 363.7891 149.1504 364.6338 149.6123 365.2705 c150.1348 366.002 150.9063 366.3682 151.9258 366.3682 c152.9624 366.3682 153.7158 366.0098 154.1865 365.2949 c154.5962 364.6748 154.7832 363.8291 154.7485 362.7559 cf1 D153.2583 363.3887 m153.2583 364.7295 152.7964 365.4004 151.873 365.4004 c151.2803 365.4004 150.8579 365.1201 150.6055 364.5596 c150.4136 364.1396 150.3267 363.6006 150.3442 362.9443 c153.2583 363.3887 Lf*U*u0 D167.1099 359.2061 m165.2412 359.2061 L164.4834 361.7158 L161.334 361.7158 L160.5498 359.2061 L158.9297 359.2061 L162.1704 368.9941 L163.8823 368.9941 l167.1099 359.2061 Lf1 D164.2354 362.7744 m163.229 366.2109 L163.0806 366.7246 162.9937 367.1211 162.9673 367.4004 c162.9414 367.4004 L162.8804 366.999 162.7891 366.6025 162.667 366.2109 c161.6216 362.7744 l164.2354 362.7744 Lf*U*u0 D172.0366 366.3545 m171.7251 365.1914 L171.4917 365.2705 171.2495 365.3096 170.999 365.3096 c170.6958 365.3096 170.4453 365.2529 170.2466 365.1396 c170.2466 359.1934 L168.6392 359.1934 L168.6392 365.8584 l169.4141 366.2324 170.5469 366.3984 172.0366 366.3545 cf*U*u176.2314 359.2588 m176.022 359.1631 175.752 359.1152 175.4209 359.1152 c174.8198 359.1152 174.3472 359.2822 174.0029 359.6182 c173.6587 359.9531 173.4868 360.4219 173.4868 361.0225 c173.4868 365.2178 L172.7026 365.2178 L172.7026 366.2373 L173.4868 366.2373 L173.4868 368.5889 L175.0942 369.0332 L175.0942 366.2373 L176.2314 366.2373 L176.2314 365.2178 L175.0942 365.2178 L175.0942 361.1016 L175.0942 360.4912 175.3481 360.1865 175.8564 360.1865 c175.96 360.1865 176.0845 360.208 176.2314 360.252 c176.2314 359.2588 Lf*U*u183.1318 362.7559 m178.8184 362.1387 L178.9487 360.8193 179.5894 360.1602 180.7393 360.1602 c181.4189 360.1602 182.0117 360.2949 182.5171 360.5654 c182.896 359.5596 L182.2949 359.2285 181.5195 359.0625 180.5698 359.0625 c179.4897 359.0625 178.6621 359.4111 178.0869 360.1084 c177.5645 360.7529 177.3027 361.6279 177.3027 362.7344 c177.3027 363.7891 177.5337 364.6338 177.9956 365.2705 c178.5181 366.002 179.2896 366.3682 180.3091 366.3682 c181.3457 366.3682 182.0991 366.0098 182.5698 365.2949 c182.9795 364.6748 183.1665 363.8291 183.1318 362.7559 cf1 D181.6416 363.3887 m181.6416 364.7295 181.1797 365.4004 180.2563 365.4004 c179.6636 365.4004 179.2412 365.1201 178.9888 364.5596 c178.7969 364.1396 178.71 363.6006 178.7275 362.9443 c181.6416 363.3887 Lf*U*u0 D188.6201 361.2188 m188.6201 360.5566 188.3628 360.0254 187.8486 359.625 c187.3696 359.2588 186.7905 359.0762 186.1108 359.0762 c185.3091 359.0762 184.6602 359.2461 184.1636 359.585 c184.582 360.6045 L184.9214 360.335 185.3613 360.1992 185.9019 360.1992 c186.2065 360.1992 186.4639 360.2891 186.6729 360.4678 c186.8818 360.6455 186.9863 360.8877 186.9863 361.1924 c186.9863 361.707 186.6421 362.0947 185.9541 362.3555 c184.8823 362.7656 184.3467 363.4229 184.3467 364.3291 c184.3467 364.9385 184.5688 365.4355 185.0132 365.8193 c185.4312 366.1846 185.9541 366.3682 186.5811 366.3682 c187.2954 366.3682 187.9053 366.2021 188.4106 365.8711 c188.0186 364.9434 L187.6963 365.2051 187.3218 365.335 186.895 365.335 c186.6074 365.335 186.3677 365.2529 186.1763 365.0869 c185.9844 364.9219 185.8887 364.6953 185.8887 364.4072 c185.8887 363.9453 186.2368 363.5752 186.9341 363.2969 c188.0581 362.8438 188.6201 362.1514 188.6201 361.2188 cf*U*u199.061 366.2373 m195.8462 356.3838 L194.1606 356.3838 L195.3105 359.1934 L192.9844 366.2373 L194.6831 366.2373 L195.8984 361.6768 L195.9854 361.3447 196.0337 361.0098 196.0425 360.6699 c196.0684 360.6699 L196.0859 360.8525 196.1514 361.1885 196.2646 361.6768 c197.5713 366.2373 l199.061 366.2373 Lf*U*u210.2339 359.1934 m208.417 359.1934 L208.417 363.6494 L205.3203 363.6494 L205.3203 359.1934 L203.5034 359.1934 L203.5034 369.0469 L205.3203 369.0469 L205.3203 364.8516 L208.417 364.8516 L208.417 369.0469 L210.2339 369.0469 l210.2339 359.1934 Lf*U*u217.1597 359.6113 m216.4541 359.2373 215.5522 359.0498 214.4546 359.0498 c212.6338 359.0498 211.7236 359.8418 211.7236 361.4277 c211.7236 366.2373 L213.3311 366.2373 L213.3311 361.3369 L213.3311 360.5439 213.7227 360.1475 214.5063 360.1475 c214.9365 360.1475 215.2852 360.2256 215.5522 360.3828 c215.5522 366.2373 L217.1597 366.2373 l217.1597 359.6113 Lf*U*u228.3721 359.1934 m226.7778 359.1934 L226.7778 364.1982 L226.7778 364.9648 226.3813 365.3486 225.5889 365.3486 c225.127 365.3486 224.7349 365.1875 224.4126 364.8652 c224.4126 359.1934 L222.8184 359.1934 L222.8184 364.2266 L222.8184 364.9746 222.3784 365.3486 221.4985 365.3486 c221.1152 365.3486 220.7666 365.2832 220.4531 365.1523 c220.4531 359.1934 L218.8589 359.1934 L218.8589 365.8584 L219.5645 366.1982 220.4443 366.3682 221.4985 366.3682 c222.4917 366.3682 223.2236 366.1104 223.6938 365.5967 c224.2515 366.1104 225.0049 366.3682 225.9546 366.3682 c226.6514 366.3682 227.229 366.1807 227.686 365.8057 c228.1436 365.4307 228.3721 364.8994 228.3721 364.2119 c228.3721 359.1934 Lf*U*u235.1675 359.5723 m234.5317 359.2324 233.6821 359.0625 232.6196 359.0625 c230.7026 359.0625 229.7446 359.7773 229.7446 361.2061 c229.7446 362.1211 230.2017 362.7959 231.1167 363.2314 c231.6826 363.501 232.5366 363.6934 233.6777 363.8066 c233.6777 364.1855 L233.6777 364.9609 233.2119 365.3486 232.2798 365.3486 c231.6958 365.3486 231.1079 365.2051 230.5156 364.917 c230.1494 365.832 L230.8813 366.1895 231.687 366.3682 232.5669 366.3682 c234.3008 366.3682 235.1675 365.5576 235.1675 363.9375 c235.1675 359.5723 Lf1 D233.6777 360.1475 m233.6777 363.0488 L232.8984 362.9521 232.3462 362.8174 232.0225 362.6436 c231.4971 362.3643 231.2344 361.9023 231.2344 361.2578 c231.2344 360.3867 231.729 359.9512 232.7188 359.9512 c233.0952 359.9512 233.415 360.0166 233.6777 360.1475 cf*U*u0 D242.4072 359.1934 m240.7998 359.1934 L240.7998 364.1855 L240.7998 364.9697 240.3818 365.3613 239.5464 365.3613 c239.1499 365.3613 238.7881 365.2959 238.4609 365.165 c238.4609 359.1934 L236.8535 359.1934 L236.8535 365.8584 L237.5762 366.1982 238.4956 366.3682 239.6108 366.3682 c240.4121 366.3682 241.0522 366.2148 241.5317 365.9102 c242.1152 365.5361 242.4072 364.9697 242.4072 364.2119 c242.4072 359.1934 Lf*U*u245.8311 368.2363 m245.8311 368.0098 245.7441 367.8223 245.5698 367.6748 c245.3955 367.5264 245.1909 367.4521 244.9556 367.4521 c244.7207 367.4521 244.5156 367.5264 244.3413 367.6748 c244.167 367.8223 244.0801 368.0098 244.0801 368.2363 c244.0801 368.4629 244.167 368.6523 244.3413 368.8047 c244.5156 368.957 244.7207 369.0332 244.9556 369.0332 c245.1909 369.0332 245.3955 368.96 245.5698 368.8115 c245.7441 368.6631 245.8311 368.4717 245.8311 368.2363 cf245.7529 359.1934 m244.1455 359.1934 L244.1455 366.2373 L245.7529 366.2373 l245.7529 359.1934 Lf*U*u252.9399 359.625 m252.3301 359.2852 251.5112 359.1152 250.4834 359.1152 c249.4028 359.1152 248.5796 359.4463 248.0132 360.1104 c247.4731 360.7383 247.2031 361.5977 247.2031 362.6895 c247.2031 363.7363 247.4507 364.5918 247.9458 365.2549 c248.4927 365.9971 249.27 366.3682 250.2773 366.3682 c250.6855 366.3682 251.0376 366.3242 251.3325 366.2373 c251.3325 369.1387 L252.9399 369.1387 l252.9399 359.625 Lf1 D251.3325 360.291 m251.3325 365.374 L251.1245 365.4355 250.8906 365.4658 250.6309 365.4658 c249.3999 365.4658 248.7842 364.5713 248.7842 362.7803 c248.7842 361.0166 249.3608 360.1338 250.5137 360.1338 c250.895 360.1338 251.168 360.1865 251.3325 360.291 cf*U*u0 D259.7744 359.5723 m259.1387 359.2324 258.2891 359.0625 257.2266 359.0625 c255.3096 359.0625 254.3516 359.7773 254.3516 361.2061 c254.3516 362.1211 254.8086 362.7959 255.7236 363.2314 c256.2896 363.501 257.1436 363.6934 258.2847 363.8066 c258.2847 364.1855 L258.2847 364.9609 257.8188 365.3486 256.8867 365.3486 c256.3027 365.3486 255.7148 365.2051 255.1226 364.917 c254.7563 365.832 L255.4883 366.1895 256.2939 366.3682 257.1738 366.3682 c258.9077 366.3682 259.7744 365.5576 259.7744 363.9375 c259.7744 359.5723 Lf1 D258.2847 360.1475 m258.2847 363.0488 L257.5054 362.9521 256.9531 362.8174 256.6294 362.6436 c256.104 362.3643 255.8413 361.9023 255.8413 361.2578 c255.8413 360.3867 256.3359 359.9512 257.3257 359.9512 c257.7021 359.9512 258.022 360.0166 258.2847 360.1475 cf*U*u0 D266.8965 359.625 m266.2866 359.2852 265.4678 359.1152 264.4399 359.1152 c263.3594 359.1152 262.5361 359.4463 261.9697 360.1104 c261.4297 360.7383 261.1597 361.5977 261.1597 362.6895 c261.1597 363.7363 261.4072 364.5918 261.9023 365.2549 c262.4492 365.9971 263.2266 366.3682 264.2339 366.3682 c264.6421 366.3682 264.9941 366.3242 265.2891 366.2373 c265.2891 369.1387 L266.8965 369.1387 l266.8965 359.625 Lf1 D265.2891 360.291 m265.2891 365.374 L265.0811 365.4355 264.8472 365.4658 264.5874 365.4658 c263.3564 365.4658 262.7407 364.5713 262.7407 362.7803 c262.7407 361.0166 263.3174 360.1338 264.4702 360.1338 c264.8516 360.1338 265.1245 360.1865 265.2891 360.291 cf*U*u0 D274.2021 362.7559 m269.8887 362.1387 L270.019 360.8193 270.6597 360.1602 271.8096 360.1602 c272.4893 360.1602 273.082 360.2949 273.5874 360.5654 c273.9663 359.5596 L273.3652 359.2285 272.5898 359.0625 271.6401 359.0625 c270.5601 359.0625 269.7324 359.4111 269.1572 360.1084 c268.6348 360.7529 268.373 361.6279 268.373 362.7344 c268.373 363.7891 268.604 364.6338 269.0659 365.2705 c269.5884 366.002 270.3599 366.3682 271.3794 366.3682 c272.416 366.3682 273.1694 366.0098 273.6401 365.2949 c274.0498 364.6748 274.2368 363.8291 274.2021 362.7559 cf1 D272.7119 363.3887 m272.7119 364.7295 272.25 365.4004 271.3267 365.4004 c270.7339 365.4004 270.3115 365.1201 270.0591 364.5596 c269.8672 364.1396 269.7803 363.6006 269.7979 362.9443 c272.7119 363.3887 Lf*U*u0 D279.6904 361.2188 m279.6904 360.5566 279.4331 360.0254 278.9189 359.625 c278.4399 359.2588 277.8608 359.0762 277.1812 359.0762 c276.3794 359.0762 275.7305 359.2461 275.2339 359.585 c275.6523 360.6045 L275.9917 360.335 276.4316 360.1992 276.9722 360.1992 c277.2769 360.1992 277.5342 360.2891 277.7432 360.4678 c277.9521 360.6455 278.0566 360.8877 278.0566 361.1924 c278.0566 361.707 277.7124 362.0947 277.0244 362.3555 c275.9526 362.7656 275.417 363.4229 275.417 364.3291 c275.417 364.9385 275.6392 365.4355 276.0835 365.8193 c276.5015 366.1846 277.0244 366.3682 277.6514 366.3682 c278.3657 366.3682 278.9756 366.2021 279.481 365.8711 c279.0889 364.9434 L278.7666 365.2051 278.3921 365.335 277.9653 365.335 c277.6777 365.335 277.438 365.2529 277.2466 365.0869 c277.0547 364.9219 276.959 364.6953 276.959 364.4072 c276.959 363.9453 277.3071 363.5752 278.0044 363.2969 c279.1284 362.8438 279.6904 362.1514 279.6904 361.2188 cf*UUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF