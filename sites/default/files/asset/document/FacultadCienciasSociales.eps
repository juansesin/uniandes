%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.2%%For: (Hugo) ()%%Title: (firma_fac_ciso.eps)%%CreationDate: 10/29/07 11:24 PM%%BoundingBox: 73 342 539 448%%HiResBoundingBox: 73.8135 342.6152 538.9561 447.4961%%DocumentProcessColors: Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: 26.5 16 585.5 799%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -354 793 1.2 1589 965 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 32 8%%BeginData: 5934 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFD0FFFA8A8FD057DA8A8FD39FFA8A8FD057D7E7EFD%32FF7D2E27272751517C514B2727277CFFFF7DA87DFFFFFF7DA8FD0AFF7D%A8FFA87DFD05FF7DFFFFFF847EFD11FFA8272721FD04527D2727F82752FF%A87DA87DFFFFFFA87DFD0AFFA87DFFA87DFD04FFA97DFFFFFFA87DFD0BFF%7DF87CA5CCFE7C7BCCFEC77B2727FFA8527D52FD04A87DFFFFFFA8A8FFA8%7DA8A8A87EFF527DA8A8FFFF5252FFFFFF5252FF7DFD0FFF522759FFFFFF%7D7DFFFFFFA8F827FFFF27A852FF7DFF7E7DA8FFA8FF7DFF84A8A8A87DA8%FF5252A87DFFFF7D27FFFFFF527DFFA8A8FD08FF5227C6FEC6FE2751C6FE%C6FE2727FFFF27A8525227527D7D527D5252277D277D27845259525252A8%F87D525227FFA8522759525252FD0EFF59F8FD04FF5227FD04FF52F8FFA8%527D525252277DFD08527D277D7D52522E52842752595252FFFF52525259%2752FD08FF7DF8CCFECCC75227CCFECCFE5227FFA852A85252A8527D7D7D%277D277D7D52FF7D7D7D2E7D847D7D525252A852FFA852A852527D7EFD0E%FF5227A8FFFFFF5252A8FFFFFF2727FFFF27A852527D52527D53277D527D%8427FF7D7D7D5352A8527D52522EFF52FFA8527D7D287D7DFD08FF5227A4%FEC6C751517BFEC6FE2727FFFF275252527D52527D7D27A85252A827A852%52527DFD0452277D535227FFFF52277D52527EFD0EFF7DF8A8FFFFA87D52%7DFFFFFF5227FFFF522752527D525353A827FF52527D52A87D277D7D7D27%592752527D5252FFFF5252527D52A8FD08FF7DF8CCFEFE7B7C517CFECCFE%5127FFFFFF7DFFA8FFA8FFA8FFA8FFFF7EA8AFFFA8A8FFA8FF7DFFA87EA8%FF84FFFFFFA8A8A8FF7DA8FD0EFF5227A8FFFFA87D7D52FFFFFF2727FFFF%FFA8A8FFFFFFA8FD05FF7DFFA8FFA8FFA8FFFFA8A8FF7DFFFFA8A8FFFFFF%A8FFFFA8A8FD08FF5226A4FEC6A57B7C51FEC6FE2727CAFF7DFD0DFFA8A8%FD0AFFA8A8FD17FF7DF8A8FFFF7D7D7D52FFFFFF5227FFA87DA8FD0DFF53%FD0AFFA87DFD11FF7DF8CCFECC7BA67B52FECCFE5127FFFF277DFD0CFF7D%F8A8FD09FF7D27FD17FF5327A8FFFFA87DA827FFFFFF2727FFFFF8A8FD0C%FF53277DFD09FF7D27FD11FF5227A4FEC69F9FA527CCC6FE2727CFFFF884%FFA852FFFFFF7DA8FD04FF272752FFFFA8527DA8FFFFA82827FFFF527EFF%FFA87DA8FD0EFF7DF8A8FFFF7DA8A827A8FFFF5227FFA8277DFF7D7DA8FF%A87D7DFD04FF52F852FFFF7D7D59FFFFFF7D5227FFA87D7DFFFFA852A8FD%08FF7DF8CCFECC7BC7A527C7FEFE5227FFA927A8A8275227FF525252FFFF%FFA8275227FFAFF852277DFF52275227FF2E52277DA8272EA8FD0EFF5227%A8FFFFA8A8FFF8FFFFFF2727FFFFF8A87D272852FF52277DFD04FF277D27%FFA827525252FF2E525227FFFD0452FF27527DFD08FF5227A4FEC6A0A4A5%F8CCC6FE2727FFFFF8A8277DFF277D2727FD04FF7D27A8F8A8A827A87D27%A8F8FF7D277D27A852277DF8A8FD0FFF59F8A8FFFF7DFFA8277DFFFF52F8%FFA8277D5252FFF87D2727FD04FF5227A8277DAFF8FF7D277E27A87D2784%F8A852277D277DFD09FF7DF8CCFECCA5CCA527C7CCFE5227FFFF277D277D%FF277DA82752FFFFFF272752277DFFF8FF7D527D27FF7D27A82759527DFF%5227A8FD0EFF5227A8FD05FF27FFFFFF2727FFFF27A8277DFF277DFF2752%FFFFFF522752F87DA827A88427A827FF7D527D27527D7DFF7D277DFD08FF%5227A4FEC6FEC6C727CCC6FE2727FFFFF8A82752A8277DFF7D27A8FFA827%59A82727A827A87D27A8F8A87D277D277DFD04FF2727FD0EFF53F8A8FD04%FFA827A8FFFF52F8FFA8277D5228FFF8A8FF7DF8A8FFA8F87DA852F8A8F8%AF7D27A8277D7D27A8F87EFFFFA8FF2728FD08FF7DF8C7FEFEFECCA552C6%CCFE2727FFFF27A8A8272752FF272752FFFF7D27FFFFA827A827FF7D52FF%7D27272EFF5227277D7D2727A8FD0EFF7D27A8FD05FF52FFFFFF2752FFFF%27A8A8272752FF522752FFFF7D27FFFFA8277D52A87D27FF59272752FF7D%27527DA827277DFD08FFA85251FEC6FEC67C7BFEA45127A8FFFFA8FFFFA8%7DFFFFA87DFFFFFFA8A8FFFFFFA8A8A8FFFFA8FFFFA87DFFFFFF7DA8A8FF%7DA8FD10FF527DFD04FF527DFFA82827A8FFA8A8A8FFA8A8FFFFA8A8FD04%FFA8FFFFFFA8A8A8FFA8A8FFFFA8A8A8FFFFA87DFFA8A8A8FD0BFFA8CDCC%FECC277C7B5252FD39FFA8FD04FF527D7D527DFD35FFCFCEC87D7DA8A8FD%3FFF7D7DA8FD33FFA87DFD07FFA8FD04FFA8A8FFFFA8FD04FF7DA8FD0DFF%A87DFD04FFA8FFFFA8FD13FF7D7DFD06FFA8A8A8FFFFFF7DA8FFFF7DFD04%FF7D7DFD07FFA8FD05FF7D7DFD04FFA8FFFFA8A8FD0CFF277D7D7DA87D7D%A8525252A87DA827A8FF7D52A87DFF527D527D7DA852A8A87D52A87D7E7D%FF277D7E7DA87D52A87D7D7D7E7D7DA8FD0EFF5252A852A859A87E7D2759%7D7DA8527DFF52527D7DFF7D52FD067DA8FD057D84FF527DA87DA8FD047D%527D7DA87DA8FD08FF527D7D27527DFD04527D59525253A8A8527D2752FF%53A87E27FD05527D525352527DFFA8527D52527D7D7D525253277D52A8FD%0EFF527D7D5252A8537D52527D7D277D52A8A853525252FF52A87D52277D%525352A8527D275952FFA852527D277D527D275252527D5284FD08FF52FF%5252527D5252527D5252527D52A8A8FD0452FF7D5252522E7D527D527D2E%52527D52FF7D52527D527D52522E7D52527D527DFD0EFF7DA87D527D527D%527D527D275253527DA8527D527DFFA8527D52527D7D597D7D7D52525352%FF7D527D527D527D5252525327A8527DFD0BFFA8FFA8FFA8FFA8FFA8FFA8%A8FFFFA8FFFFA8FFFFA8A8FFFFA8FFA8FFA8FFA8FFA8FFFFA8FFFFA8FFA8%FFA8A8A8FFA8FFA8FD11FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8%FFFFFFA8FFA8FD07FFA8FFFFFFA8FD07FFA8FFFFFFA8FDFCFFFDFCFFFD8D%FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 7 Bd[<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br[0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 7 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br[0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.0313 29.4307 L3.0313 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.8906 50.123 L5.8906 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.8906 50.123 m25.0264 50.123 L25.0264 32.4961 L5.8906 32.4961 L5.8906 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0235 0.64 0.78 0.0039 k 0.0235 0.64 0.78 0.0039 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.3057 48.793 L8.3057 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1059 0.9294 0.8314 0.0196 k 0.1059 0.9294 0.8314 0.0196 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.6758 L28.9355 1.6758 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.957 L47.6777 4.957 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.957 L30.0527 4.957 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.4315 0 0.8301 0 k 0.4315 0 0.8301 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.5029 L47.4199 6.5029 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4941 0.9412 0 0 k 0.4941 0.9412 0 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.7529 26.1445 L2.7529 2.1699 L25.4316 2.1699 L25.4316 26.1445 Lf*U*u4.9561 7.4004 m22.582 7.4004 L22.582 25.0273 L4.9561 25.0273 L4.9561 7.4004 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.6738 m4.9561 5.6738 L4.9561 25.0273 L22.582 25.0273 L22.582 5.6738 Lf20.3887 21.3281 m7.5811 21.3281 L7.5811 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.9137 0 0.498 0 k 0.9137 0 0.498 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.9355 8.7363 m21.0371 8.7363 L21.0371 22.8379 L6.9355 22.8379 L6.9355 8.7363 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8235 0 0.0039 0 k 0.8235 0 0.0039 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0275 0.2078 0.4431 0.0039 k 0.0275 0.2078 0.4431 0.0039 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.8902 0 0 k 0 0.8902 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7884.8833 8586.9551 m-7793.0479 8586.9551 L-7793.0479 8582.6758 L-7884.8833 8582.6758 L-7884.8833 8586.9551 Ln0 O0.695313 0.671875 0.636719 0.738281 k-7884.6631 8584.2754 m-7885 8584.3418 -7884.4814 8584.5313 -7884.8833 8584.3887 C-7884.8379 8584.2705 -7884.7725 8584.1816 -7884.6631 8584.2754 Cf-7794.1675 8584.4414 m-7795.2524 8585.2041 -7796.6816 8584.4336 -7797.8701 8584.9199 C-7798.0098 8584.9521 -7797.8345 8584.502 -7798.1484 8584.6025 C-7799.3008 8585.1953 -7801.1162 8584.8418 -7802.5195 8584.3848 C-7802.4346 8584.2666 L-7802.7017 8584.1816 -7803.0283 8584.5723 -7803.3115 8584.5176 C-7803.3135 8584.4395 -7803.2207 8584.4063 -7803.2861 8584.2979 C-7803.3574 8584.5352 -7803.7983 8584.4082 -7803.9185 8584.584 C-7804.0303 8584.4922 -7804.0195 8584.3047 -7804.1641 8584.2002 C-7804.3262 8584.4697 L-7804.7769 8585.1094 -7805.4209 8584.4258 -7806.0361 8584.7559 C-7806.0063 8584.6934 -7805.9453 8584.6445 -7805.9941 8584.584 C-7806.9814 8584.9727 -7808.2168 8584.8994 -7809.3208 8585.043 C-7809.2769 8584.9482 -7809.2363 8584.7754 -7809.3008 8584.668 C-7809.3555 8584.9512 -7809.6963 8585.0225 -7809.9922 8585.0781 C-7810.1255 8584.7871 -7810.4995 8585.3438 -7810.8467 8585.1826 C-7810.8169 8585.1191 L-7811.0732 8585.4238 -7811.1973 8584.9434 -7811.4053 8585.3086 C-7811.5684 8585.0801 L-7811.6807 8585.4902 -7811.9395 8584.8672 -7812.1514 8585.0762 C-7812.1445 8585.1602 L-7812.3442 8585.2598 -7812.4482 8585.0537 -7812.6338 8585.123 C-7812.6514 8585.0762 L-7813.0854 8585.1826 -7813.3379 8584.9551 -7813.3271 8585.2754 C-7813.4795 8585.0186 -7812.9063 8585.1582 -7813.1455 8584.7842 C-7814.5732 8585.1152 -7816.0459 8585.0498 -7817.4834 8585.0566 C-7817.6465 8584.9277 -7817.7505 8584.8887 -7817.7871 8584.7666 C-7817.9307 8584.832 -7818.3281 8584.8262 -7818.4585 8584.9902 C-7818.4102 8584.9834 -7818.5513 8584.8262 -7818.6274 8584.8105 C-7818.8887 8584.6895 -7818.9131 8585.1621 -7819.2002 8585.0186 C-7819.0859 8584.9336 -7819.0469 8584.8301 -7819.0854 8584.7109 C-7819.3301 8584.9609 -7819.6577 8584.9209 -7819.9473 8585.002 C-7819.9023 8584.9482 -7819.8325 8584.916 -7819.8433 8584.8154 C-7820.1602 8585.0986 -7820.4209 8584.7559 -7820.6982 8584.9346 C-7820.5947 8584.75 L-7821.0415 8584.5254 -7820.7266 8585.1367 -7821.1128 8585.0039 C-7821.02 8584.9453 -7821.0527 8584.873 -7821.0361 8584.7979 C-7821.3965 8585.1338 -7821.9795 8585.0225 -7822.3389 8585.1367 C-7822.3174 8585.1113 -7822.3232 8585.0605 Y-7822.7148 8585.1025 -7823.1245 8584.998 -7823.5552 8585.1445 C-7823.7119 8585.0625 -7823.5039 8584.6934 -7823.9185 8584.7617 C-7823.9033 8585.1328 -7824.6221 8584.9141 -7824.3779 8585.334 C-7824.7319 8585.2734 -7825.2925 8585.1338 -7825.5283 8585.2598 C-7825.3691 8585.1191 -7825.7007 8584.8066 -7825.4063 8584.7754 C-7825.6289 8584.5498 L-7825.5957 8584.3984 -7825.3999 8584.6016 -7825.4707 8584.4102 C-7825.6182 8584.4258 -7826.0479 8584.5723 -7826.1797 8584.5117 C-7826.4531 8584.7393 -7826.7041 8585.1641 -7827.1465 8585.2109 C-7826.9385 8585.0664 -7827.2646 8584.8018 -7827.1235 8584.7383 C-7827.7407 8585.4482 L-7827.8877 8585.4658 -7827.7725 8585.1563 -7827.9854 8585.2529 C-7827.9746 8585.3506 -7828.0674 8585.4121 -7828.1318 8585.4922 C-7828.1875 8585.4482 -7828.7441 8585.584 -7828.8081 8585.2178 C-7828.8735 8585.0762 -7828.5684 8585.1426 -7828.7314 8585.0117 C-7829.0029 8585.0146 -7829.0151 8585.1406 -7829.2871 8585.1465 C-7829.2925 8585.0977 L-7829.4717 8585.043 -7829.8213 8585.2529 -7829.6265 8585.4551 C-7829.5015 8585.4658 -7829.6738 8585.2354 -7829.4888 8585.3418 C-7829.6152 8585.5537 -7829.9312 8585.6133 -7830.2031 8585.6162 C-7830.1104 8585.5586 -7830.1216 8585.4609 -7830.0845 8585.3574 C-7830.4497 8585.6445 -7830.8369 8585.7354 -7831.2451 8585.8555 C-7831.2515 8586.0293 -7831.0928 8585.5391 -7831.0327 8585.6309 C-7831.5557 8585.3896 -7832.1128 8585.9727 -7832.5479 8585.6201 C-7832.4766 8585.5898 -7832.5098 8585.8672 -7832.5146 8585.8184 C-7832.7666 8585.7969 -7832.7549 8585.5449 -7832.9189 8585.6377 C-7832.9355 8585.4902 -7833.1255 8585.6855 -7833.2944 8585.7305 C-7833.3818 8585.8369 -7833.3384 8585.6582 -7833.1914 8585.6426 C-7833.4268 8585.7666 -7834.3691 8585.9941 -7834.9131 8585.7793 C-7834.9023 8585.877 -7835.2471 8586.1377 -7835.3721 8586.127 C-7835.3232 8585.8984 L-7835.4375 8585.7617 -7835.7422 8585.918 -7835.7632 8585.7227 C-7836.0303 8586 -7834.7344 8585.4863 -7835.0957 8585.7002 C-7835.1895 8585.5098 -7835.5991 8586.0645 -7835.5215 8585.7529 C-7835.7725 8585.7617 -7836.0161 8586.0186 -7836.2559 8585.8047 C-7836.1865 8585.8418 -7836.0522 8585.4873 -7836.2549 8585.5039 C-7836.6123 8585.5449 -7836.3564 8585.6133 -7836.6465 8585.6895 C-7836.8281 8585.7832 L-7836.8398 8586.0059 -7837.1475 8585.7529 -7837.0146 8586.002 C-7837.0586 8585.8184 -7837.5337 8586.1152 -7837.4971 8585.7461 C-7837.4473 8585.4551 L-7837.6016 8585.4766 -7837.7002 8585.7617 -7837.8213 8585.8896 C-7837.8418 8585.8633 -7837.8823 8585.8047 -7837.8745 8585.7578 C-7837.8994 8586.2031 -7838.2432 8585.7207 -7838.4268 8586.0645 C-7838.7505 8585.9102 -7839.2495 8586.0498 -7839.4023 8585.7734 C-7839.6514 8585.9082 -7839.8784 8586.0674 -7840.1621 8585.9727 C-7840.1055 8585.9307 -7840.0283 8585.918 -7840.0122 8585.8223 C-7840.1904 8585.6914 -7840.2344 8585.8086 -7840.3975 8585.8809 C-7840.3608 8585.8145 -7840.7539 8585.6201 -7840.9521 8585.4629 C-7841.1992 8585.5957 -7841.1143 8585.8359 -7841.1392 8585.9824 C-7841.3652 8585.543 -7841.8379 8586.2656 -7842.1211 8585.8672 C-7842.0352 8585.8066 -7841.7598 8585.6514 -7841.9658 8585.541 C-7842.1919 8585.1025 -7842.4219 8585.8643 -7842.7861 8585.6543 C-7842.6968 8586.0186 L-7842.8594 8585.793 -7843.2334 8586.2305 -7843.1963 8585.8594 C-7843.3184 8585.9902 -7843.6265 8585.7383 -7843.5859 8586.0938 C-7844.1846 8585.793 -7845.0425 8586.2754 -7845.4102 8585.6377 C-7845.4961 8585.6973 -7845.7104 8585.6367 -7845.6665 8585.8193 C-7845.5239 8586.0176 -7845.4673 8585.6777 -7845.4141 8585.8125 C-7845.4912 8585.8232 -7845.5078 8585.9209 -7845.5161 8585.9697 C-7845.7021 8585.8887 -7845.8486 8585.8633 -7845.6729 8585.5674 C-7846.0869 8585.3477 -7846.1001 8586.1719 -7846.6274 8586.0322 C-7846.6035 8585.8857 -7846.6436 8585.8301 -7846.7979 8585.8535 C-7847.0903 8586.1055 L-7847.4312 8586.0469 -7847.2842 8585.7705 -7847.2925 8585.5215 C-7847.4746 8585.5645 -7847.6973 8585.5527 -7847.7803 8585.7383 C-7848.0015 8585.4258 L-7847.8398 8585.6514 -7848.1514 8585.5762 -7848.2368 8585.6367 C-7848.1514 8585.5762 L-7848.1846 8585.4697 -7848.3955 8585.5352 -7848.5024 8585.5664 C-7848.4766 8585.7207 -7848.2617 8585.7832 -7848.1445 8585.8281 C-7848.2373 8585.9375 -7848.3823 8585.9121 -7848.5059 8586.041 C-7848.4648 8585.7969 -7848.8027 8585.8672 -7848.9473 8585.8418 C-7849.1133 8585.7891 -7849.1348 8586.0605 -7849.1831 8586.0527 C-7849.1875 8585.9258 -7849.4541 8586.0313 -7849.3247 8585.8535 C-7849.2681 8585.8125 -7849.1953 8585.9766 -7849.1016 8585.8643 C-7849.2109 8585.7705 -7849.1982 8585.5498 -7849.4258 8585.7109 C-7849.5967 8585.832 -7849.3818 8586.1934 -7849.7061 8586.0391 C-7849.6211 8585.9785 -7849.6055 8585.8809 -7849.5391 8585.793 C-7849.8433 8585.666 L-7849.8564 8585.8887 L-7849.8975 8585.832 -7849.8691 8585.8125 -7849.8877 8585.7832 C-7849.9785 8586.0176 -7850.3521 8585.8555 -7850.4209 8586.1191 C-7850.5742 8586.1426 -7850.7441 8585.9648 -7850.8906 8585.9395 C-7850.8623 8585.9199 L-7851.0415 8585.7891 -7851.2793 8585.875 -7851.4297 8586.0254 C-7851.4219 8585.9766 L-7851.5195 8585.959 -7851.7505 8585.9941 -7851.8735 8586.125 C-7852.1201 8585.957 -7851.9561 8585.2842 -7852.2295 8585.5645 C-7852.48 8585.5723 -7852.6221 8585.9727 -7852.5215 8586.1152 C-7852.9717 8585.9648 -7853.4834 8586.3281 -7853.9009 8585.9824 C-7853.9658 8586.0723 -7853.9248 8586.1289 -7854.0586 8586.1816 C-7854.7197 8586.0938 -7855.4551 8586.4453 -7855.9814 8586.0078 C-7855.79 8585.9141 -7855.9688 8585.7842 -7855.9727 8585.6582 C-7856.1309 8585.8574 -7856.1631 8585.4512 -7856.2197 8585.793 C-7856.2041 8585.9941 -7856.2197 8586.0918 -7856.0337 8586.1729 C-7856.4282 8586.2813 -7857.0283 8586.2813 -7857.2471 8586.0938 C-7857.1377 8586.1865 -7857.2227 8586.248 -7857.3086 8586.3086 C-7857.2803 8585.9873 -7857.5713 8585.9395 -7857.7915 8586.0527 C-7857.8223 8586.248 L-7857.9658 8586.0469 L-7858.0503 8586.1094 -7858.0591 8586.457 -7858.2773 8586.2695 C-7858.2891 8586.1934 -7858.3018 8586.1162 -7858.3418 8586.0605 C-7858.5693 8586.2207 -7858.8906 8586.4922 -7859.1377 8586.3262 C-7859.3398 8586.041 L-7859.4453 8586.0723 -7859.6235 8586.2441 -7859.4375 8586.3262 C-7859.8594 8586.1543 -7860.1309 8586.1328 -7860.2646 8585.8857 C-7860.9912 8586.4873 -7862.0459 8586.5117 -7862.8906 8586.4688 C-7862.8652 8586.3223 L-7863.0923 8586.1855 -7862.9834 8586.5781 -7863.1416 8586.4766 C-7863.0684 8586.3369 -7863.3145 8586.1729 -7863.1362 8586.002 C-7863.4609 8585.8477 -7863.5547 8586.2559 -7863.7656 8586.3223 C-7863.7979 8586.5146 -7863.5957 8586.1992 -7863.6367 8586.4434 C-7863.6729 8586.5117 -7864.0859 8586.293 -7864.1362 8586.584 C-7864.2178 8586.4697 -7864.1543 8586.2559 -7864.1104 8586.1377 C-7864.3086 8586.2793 L-7864.5513 8585.9395 -7863.7559 8585.6719 -7864.0107 8585.2529 C-7864.1934 8585.2979 L-7864.3682 8584.9941 -7863.71 8584.9551 -7864.1689 8584.8506 C-7864.3682 8584.9941 -7864.5381 8585.416 -7864.3608 8585.5449 C-7864.7754 8585.625 -7864.5527 8586.2383 -7864.9985 8586.2139 C-7865.1201 8586.043 -7864.6416 8586.1729 -7864.7275 8585.9336 C-7864.9375 8585.6992 -7865.1484 8586.0645 -7865.3354 8585.9824 C-7865.1279 8586.0918 -7865.3032 8586.3857 -7865.4375 8586.4395 C-7865.6641 8586.3018 -7865.29 8586.1641 -7865.6113 8586.1338 C-7865.6641 8586.3018 -7865.9595 8586.4277 -7865.7041 8586.5449 C-7865.8203 8586.9258 -7866.0381 8586.4395 -7866.2129 8586.7344 C-7866.3174 8586.4658 -7865.8823 8586.1152 -7866.2354 8585.9814 C-7866.1792 8586.2393 -7866.6704 8586.332 -7866.4839 8586.7139 C-7866.6221 8586.6406 -7866.6367 8586.4375 -7866.5361 8586.2793 C-7866.7334 8586.1201 -7867.0151 8586.75 -7867.0801 8586.2383 C-7867.1479 8586.502 L-7867.21 8586.416 -7867.2983 8586.3506 -7867.3994 8586.209 C-7867.5732 8586.2041 -7867.96 8586.5664 -7867.9443 8586.168 C-7868 8586.209 -7868.3975 8586.1914 -7868.2441 8586.4658 C-7867.9971 8586.6338 -7867.96 8586.2656 -7867.8223 8586.6377 C-7867.9971 8586.334 -7868.1787 8586.6777 -7868.3213 8586.7793 C-7868.3447 8586.625 L-7868.4297 8586.6855 -7868.6255 8586.6514 -7868.6787 8586.8184 C-7868.6133 8586.7305 -7868.6475 8586.625 -7868.7148 8586.5879 C-7868.8042 8586.8223 L-7869.1494 8586.9395 -7868.8857 8586.4102 -7869.2217 8586.4785 C-7868.9663 8586.2969 L-7869.0225 8586.3359 -7869.1367 8586.1162 -7869.2979 8586.1895 C-7869.3604 8586.4033 -7869.4775 8586.6602 -7869.5313 8586.8262 C-7869.7207 8586.9199 -7869.6162 8586.585 -7869.8027 8586.8047 C-7869.5586 8586.5469 L-7869.5215 8586.4766 -7869.7231 8586.1934 -7869.9761 8586.1992 C-7870.1377 8586.2734 -7870.3887 8586.582 -7870.1338 8586.6992 C-7870.2607 8586.7031 -7870.4385 8586.5723 -7870.3379 8586.416 C-7870.6255 8586.4902 -7870.2998 8586.6465 -7870.5479 8586.7793 C-7870.6494 8586.6367 -7870.9658 8586.4336 -7871.1563 8586.2266 C-7870.8975 8585.8682 L-7871.0693 8585.8643 L-7870.8467 8585.5781 -7871.1826 8585.6465 -7871.0566 8585.3438 C-7871.1743 8585.2969 -7871.3169 8585.3994 -7871.4307 8585.4785 C-7871.0864 8585.9629 -7871.8159 8586.1406 -7871.7158 8586.582 C-7872.1875 8586.7031 -7872.0107 8585.5078 -7872.5024 8586.1992 C-7872.4219 8586.3145 -7872.6533 8586.6504 -7872.3564 8586.5225 C-7872.6494 8586.4746 -7872.5557 8586.9658 -7872.9014 8586.7832 C-7872.6455 8586.6016 -7873.1763 8586.3359 -7872.8066 8586.0723 C-7872.8311 8586.2178 -7872.6001 8586.1826 -7872.5435 8586.1426 C-7872.6641 8585.9727 -7872.5186 8585.6973 -7872.8184 8585.6973 C-7873.0015 8585.7393 -7873.2524 8585.748 -7873.2158 8585.9785 C-7873.2085 8586.2314 -7872.9365 8585.9512 -7873.0537 8586.207 C-7873.4185 8586.2949 -7873.4795 8585.9102 -7873.6304 8586.3594 C-7873.3999 8586.3232 -7873.3423 8586.584 -7873.3467 8586.7578 C-7873.6143 8586.8633 L-7873.5625 8586.6953 L-7873.9922 8586.5742 -7873.6895 8587 -7874.1055 8586.9551 C-7874.3008 8586.623 L-7874.2017 8586.3369 -7873.6953 8586.75 -7873.7695 8586.2842 C-7874.04 8586.2656 -7874.1299 8586.502 -7874.3848 8586.3818 C-7874.3281 8586.3418 -7874.2505 8586.3301 -7874.1943 8586.2891 C-7874.2915 8586.2734 -7874.3877 8585.6563 -7874.7734 8586.0176 C-7874.9727 8586.1582 -7874.8262 8586.1826 -7874.8311 8586.3574 C-7875.2656 8586.4102 -7875.3955 8586.5879 -7875.6753 8586.6152 C-7875.6177 8586.2754 -7876.1699 8586.582 -7875.8608 8586.2344 C-7875.7188 8586.4336 -7875.0903 8586.4141 -7874.9365 8586.0898 C-7875.0947 8585.6865 -7874.5952 8586.1465 -7874.5024 8585.7383 C-7874.8506 8585.7285 -7874.8335 8585.332 -7874.8896 8585.0723 C-7874.9863 8585.0537 -7875.0801 8585.1641 -7875.1377 8585.2041 C-7875.1787 8585.4482 -7875.0522 8585.4453 -7875.0449 8585.6973 C-7875.4336 8585.6309 -7875.8081 8585.7666 -7876.0225 8586.0059 C-7876.1523 8585.8848 -7876.1113 8585.6406 -7875.9575 8585.6162 C-7876.4199 8585.6895 -7876.9141 8585.6563 -7877.3535 8585.582 C-7877.0693 8585.9814 -7877.8433 8585.6758 -7877.6494 8586.0078 C-7877.4141 8586.0977 -7877.2119 8586.3818 -7877.3418 8586.5605 C-7877.4888 8586.5352 -7877.3369 8586.3857 -7877.3984 8586.3008 C-7877.5859 8586.5186 -7877.6895 8585.9512 -7877.8735 8586.2949 C-7877.4512 8586.166 -7877.7915 8585.8086 -7877.7139 8585.4961 C-7878.0186 8585.6719 -7877.7007 8585.2734 -7878.0024 8585.2734 C-7878.3057 8585.4473 -7878.6787 8585.584 -7879.0161 8585.6514 C-7879.4399 8585.3555 -7880.0898 8585.6465 -7880.4683 8585.6582 C-7880.6665 8585.5 -7880.5322 8585.1465 -7880.7471 8585.085 C-7880.9995 8585.0918 -7880.5601 8585.4658 -7880.9336 8585.3047 C-7880.8975 8585.2344 L-7881.0107 8585.3154 -7881.5825 8584.9941 -7881.6929 8585.502 C-7881.5776 8585.1191 L-7881.6475 8585.084 -7881.7119 8585.1719 -7881.7695 8585.2129 C-7881.7725 8585.0879 -7881.8535 8584.9746 -7881.7402 8584.8926 C-7881.9707 8584.6289 -7882.2241 8584.9346 -7882.4746 8584.9453 C-7882.3135 8585.1719 L-7882.7422 8585.3496 -7883.0293 8585.125 -7883.4443 8585.2041 C-7883.4316 8584.9824 L-7883.6787 8585.1152 L-7883.6182 8584.8994 -7883.8447 8584.7617 -7883.9751 8584.9414 C-7883.3335 8584.3984 L-7883.1553 8584.5293 -7883.5283 8584.666 -7883.4165 8584.8848 C-7883.3213 8585.0762 -7882.9375 8585.0146 -7882.8755 8584.8018 C-7883.0225 8584.7773 -7883.0293 8584.8262 -7883.1436 8584.9063 C-7883.1919 8584.5977 -7882.9688 8584.6094 -7882.8584 8584.4033 C-7882.9355 8584.416 -7883.0449 8584.3223 -7883.0615 8584.4199 C-7882.9102 8584.2695 -7882.7578 8584.2461 -7882.5059 8584.2383 C-7882.6763 8584.3594 -7882.4131 8584.4297 -7882.4775 8584.5176 C-7882.4575 8584.2461 -7882.2168 8584.1621 -7881.9053 8584.2383 C-7881.6831 8584.5527 -7881.3208 8584.0361 -7880.96 8584.123 C-7881.1064 8584.3984 -7881.2935 8584.6191 -7881.5127 8584.7305 C-7881.2861 8584.8682 -7881.2607 8584.7227 -7881.0337 8584.8613 C-7880.9238 8584.6563 -7880.8457 8584.3418 -7880.5503 8584.2168 C-7880.5342 8584.4199 L-7880.2666 8584.3154 -7880.2666 8584.0146 -7879.9258 8584.0723 C-7879.3418 8584.1719 -7878.7407 8584.1719 -7878.2949 8584.1973 C-7878.2783 8584.3994 L-7878.0303 8583.9658 -7877.4521 8584.2393 -7877.1182 8584.0469 C-7876.5503 8584.2422 -7875.8848 8583.8535 -7875.5938 8584.2031 C-7874.5913 8584.0469 -7873.7148 8583.8945 -7872.6768 8583.9688 C-7872.8516 8584.2637 L-7872.6655 8584.0469 -7872.7305 8584.4336 -7872.5479 8584.3896 C-7872.7578 8584.1543 -7872.2949 8584.084 -7872.1665 8583.9033 C-7871.7041 8584.1328 -7871.1104 8583.8818 -7870.7007 8583.6758 C-7870.6846 8583.8789 L-7870.2705 8583.498 -7869.7759 8583.832 -7869.2598 8583.8945 C-7869.2007 8583.9785 -7869.1074 8584.1689 -7868.9536 8584.1465 C-7868.6738 8583.8184 -7868.5273 8583.8418 -7868.1167 8583.6367 C-7867.8169 8583.6367 -7867.3301 8583.7178 -7867.0254 8583.8457 C-7865.8975 8583.3848 -7864.7456 8583.6797 -7863.5732 8583.4023 C-7863.4888 8583.6406 L-7862.3521 8583.1309 -7860.9541 8583.5938 -7859.9839 8583.332 C-7860.0776 8583.7393 L-7859.7734 8583.8643 -7859.3843 8583.6328 -7859.4619 8583.3438 C-7859.1567 8583.4688 -7858.7007 8583.1465 -7858.5068 8583.4814 C-7858.1953 8583.5566 -7858.1255 8583.293 -7857.8662 8583.2383 C-7857.2422 8583.3926 -7857.0107 8583.3574 -7856.4224 8583.2813 C-7856.5684 8583.2559 L-7856.6328 8583.3457 -7856.6387 8583.5186 -7856.4922 8583.5449 C-7856.2725 8583.4307 -7855.6846 8583.6543 -7855.9033 8583.168 C-7855.2754 8583.4482 -7854.4385 8582.9395 -7853.8271 8583.3184 C-7853.8789 8583.1855 -7853.7246 8583.1602 -7853.6602 8583.0703 C-7853.1089 8583.0645 -7852.5293 8583.3359 -7852.0898 8583.1094 C-7852.0024 8583.1758 -7852.2295 8583.3359 -7852.0049 8583.3496 C-7851.8721 8583.2979 -7852.0024 8583.1758 -7851.8384 8583.1016 C-7850.9453 8582.8535 -7850.0303 8583.3574 -7849.2188 8583.293 C-7847.7754 8583.0361 -7846.2695 8583.166 -7844.8867 8583.123 C-7844.9023 8583.2207 L-7844.4395 8582.8477 -7843.8159 8583.6025 -7843.4463 8583.041 C-7843.3369 8583.1338 -7843.0283 8583.085 -7843.1094 8583.2734 C-7842.7407 8583.0098 -7842.0771 8583.5215 -7841.5439 8583.1865 C-7841.5928 8583.1777 -7841.6211 8583.1973 -7841.6777 8583.2393 C-7841.1392 8583.4551 -7840.6641 8583.1602 -7840.0957 8583.3555 C-7840.1533 8583.3975 -7840.2583 8583.4277 -7840.2754 8583.5254 C-7840.0557 8583.7129 -7839.7549 8583.1133 -7839.6348 8583.584 C-7839.5088 8583.5801 -7839.5449 8583.3477 -7839.6221 8583.3613 C-7838.3779 8583.5449 -7837.0498 8583.2441 -7835.7549 8583.1367 C-7834.8271 8583.418 -7835.6982 8583.9297 -7834.9663 8583.5781 C-7834.9063 8583.6689 -7834.9229 8583.3984 -7834.9131 8583.4961 C-7834.6299 8583.3643 -7834.4717 8584.0215 -7834.2754 8583.7754 C-7834.3564 8583.4863 -7834.1445 8583.6133 -7834.1387 8583.4375 C-7833.5713 8583.625 -7833.4575 8583.8857 -7833.0098 8583.666 C-7833.0435 8583.8184 L-7832.5186 8583.3887 -7831.9102 8583.6191 -7831.4673 8583.123 C-7828.5728 8583.0322 -7825.7983 8582.7578 -7822.9761 8582.7002 C-7820.1865 8582.7949 -7817.4551 8582.5723 -7814.6221 8582.8359 C-7813.9585 8583.2354 -7813.9087 8583.2246 -7813.1797 8583.0625 C-7813.2095 8583.127 -7813.2549 8583.1426 -7813.2061 8583.2031 C-7813.1699 8582.875 -7812.6929 8583.1719 -7812.6235 8582.8594 C-7811.5762 8582.9199 -7810.6113 8582.8301 -7809.5337 8582.8281 C-7809.7041 8582.8633 -7809.7896 8583.1309 -7809.5869 8583.1094 C-7809.3755 8582.8994 L-7809.3408 8582.9922 L-7809.2021 8582.9434 -7809.0513 8582.7813 -7809.1943 8582.6758 C-7806.4873 8582.3926 -7803.8242 8583.0498 -7801.1729 8582.9697 C-7800.5435 8583.1064 -7799.6475 8582.9814 -7798.9629 8582.9141 C-7796.9355 8583.3506 -7795.1079 8583.7041 -7793.0479 8583.3984 C-7793.3169 8584.2461 -7794.1675 8584.4414 Vf-7884.2578 8584.2422 m-7884.1855 8584.4063 -7883.9497 8584.4961 -7884.1377 8584.7139 C-7884.1611 8584.5605 -7884.2822 8584.3887 -7884.2578 8584.2422 Cf-7877.9619 8585.9297 m-7877.9536 8585.8809 -7877.8721 8585.9961 -7877.8521 8586.0225 C-7877.9297 8586.0352 -7878.0024 8586.1729 -7878.0645 8586.0879 C-7877.9854 8586.0762 -7877.9976 8585.998 -7877.9619 8585.9297 Cf-7876.3521 8586.0273 m-7876.3765 8586.1729 -7876.7207 8586.2891 -7876.9238 8586.3066 C-7876.3521 8586.0273 Lf-7874.8521 8586.6289 m-7874.7227 8586.752 -7874.7583 8586.8193 -7874.9326 8586.8154 C-7874.9453 8586.7383 -7874.8877 8586.6992 -7874.8521 8586.6289 Cf-7874.7456 8586.2969 m-7874.6211 8586.293 -7874.5591 8586.3789 -7874.4985 8586.4629 C-7874.5029 8586.3369 -7874.7871 8586.541 -7874.7456 8586.2969 Cf-7871.4893 8586.7207 m-7871.4111 8586.709 -7871.2417 8586.5879 -7871.1689 8586.75 C-7871.2505 8586.6367 -7871.5498 8586.9346 -7871.4893 8586.7207 Cf-7869.9761 8586.5 m-7869.9272 8586.5098 -7869.9072 8586.5361 -7869.8506 8586.4961 C-7869.7607 8586.5625 -7869.8555 8586.6689 -7869.9312 8586.6826 C-7869.9761 8586.5 Lf-7842.4287 8585.9141 m-7842.5923 8585.9863 L-7842.5684 8585.8418 L-7842.4287 8585.9141 Lf-7830.3574 8585.9063 m-7830.1943 8585.8145 -7830.2441 8586.043 -7830.2168 8586.0645 C-7830.3643 8586.0801 -7830.1621 8585.8848 -7830.3574 8585.9063 Cf-7823.8486 8585.1777 m-7823.8984 8585.1816 L-7823.8818 8584.8818 L-7823.8486 8585.1777 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 k(White)Pc0 0 0 1 k(Black)Pc0 1 1 0 k(CMYK Red)Pc0 0 1 0 k(CMYK Yellow)Pc1 0 1 0 k(CMYK Green)Pc1 0 0 0 k(CMYK Cyan)Pc1 1 0 0 k(CMYK Blue)Pc0 1 0 0 k(CMYK Magenta)Pc0.15 1 0.9 0.1 k(C=15 M=100 Y=90 K=10)Pc0 0.9 0.85 0 k(C=0 M=90 Y=85 K=0)Pc0 0.8 0.95 0 k(C=0 M=80 Y=95 K=0)Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0)Pc0 0.35 0.85 0 k(C=0 M=35 Y=85 K=0)Pc0.05 0 0.9 0 k(C=5 M=0 Y=90 K=0)Pc0.2 0 1 0 k(C=20 M=0 Y=100 K=0)Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0)Pc0.75 0 1 0 k(C=75 M=0 Y=100 K=0)Pc0.85 0.1 1 0.1 k(C=85 M=10 Y=100 K=10)Pc0.9 0.3 0.95 0.3 k(C=90 M=30 Y=95 K=30)Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0)Pc0.8 0.1 0.45 0 k(C=80 M=10 Y=45 K=0)Pc0.7 0.15 0 0 k(C=70 M=15 Y=0 K=0)Pc0.85 0.5 0 0 k(C=85 M=50 Y=0 K=0)Pc1 0.95 0.05 0 k(C=100 M=95 Y=5 K=0)Pc1 1 0.25 0.25 k(C=100 M=100 Y=25 K=25)Pc0.75 1 0 0 k(C=75 M=100 Y=0 K=0)Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0)Pc0.35 1 0.35 0.1 k(C=35 M=100 Y=35 K=10)Pc0.1 1 0.5 0 k(C=10 M=100 Y=50 K=0)Pc0 0.95 0.2 0 k(C=0 M=95 Y=20 K=0)Pc0.25 0.25 0.4 0 k(C=25 M=25 Y=40 K=0)Pc0.4 0.45 0.5 0.05 k(C=40 M=45 Y=50 K=5)Pc0.5 0.5 0.6 0.25 k(C=50 M=50 Y=60 K=25)Pc0.55 0.6 0.65 0.4 k(C=55 M=60 Y=65 K=40)Pc0.25 0.4 0.65 0 k(C=25 M=40 Y=65 K=0)Pc0.3 0.5 0.75 0.1 k(C=30 M=50 Y=75 K=10)Pc0.35 0.6 0.8 0.25 k(C=35 M=60 Y=80 K=25)Pc0.4 0.65 0.9 0.35 k(C=40 M=65 Y=90 K=35)Pc0.4 0.7 1 0.5 k(C=40 M=70 Y=100 K=50)Pc0.5 0.7 0.8 0.7 k(C=50 M=70 Y=80 K=70)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.100006 g(K=90)Pc0.200012 g(K=80)Pc0.300003 g(K=70)Pc0.400009 g(K=60)Pc0.5 g(K=50)Pc0.600006 g(K=40)Pc0.700012 g(K=30)Pc0.800003 g(K=20)Pc0.900009 g(K=10)Pc0.950012 g(K=5)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A1 Ap0 O0 0 0 0 k0 J 0 j 1 w 4 M []0 d0 XR295.2808 342.6152 m73.8135 342.6152 L73.8135 447.248 L295.2808 447.248 L295.2808 342.6152 Lf0 Ap0 0 1 0 k1 XR90.2207 428.625 m103.1387 431.3203 113.9922 431.3203 v124.8452 431.3203 138.3447 428.625 Y138.3447 392.5195 138.3447 387.1035 V138.3447 383.7207 136.2715 381.9023 135.5342 381.3691 C133.8809 380.1777 126.479 374.5605 114.3003 374.5605 C102.8398 374.5605 95.8491 379.5059 93.0718 381.4512 C91.8257 382.3301 90.2207 384.2461 90.2207 387.1035 C90.2207 391.4961 90.2207 428.625 Yfuu0 0 0 1 k0 XR134.748 380.5957 m124.9316 374.2305 114.7402 374.5762 y114.459 375.877 114.5713 378.1191 v114.6831 380.3613 115.9072 379.7285 116.793 381.502 c117.1138 382.1445 117.3906 382.5879 117.8931 384.0957 c117.9131 384.1582 117.3057 394.9004 117.1509 399.4609 c117.0684 401.916 116.6064 406.0156 116.0659 410 c115.7466 412.3633 115.0288 414.2344 114.6963 416.4766 c114.2163 419.7148 113.6587 423.3672 y113.2593 422.3359 112.6875 418.4785 112.1128 414.123 c111.8369 412.0332 111.5605 409.8301 111.3027 407.7695 c110.7559 403.4063 109.3931 391.7266 109.1875 391.0938 c108.876 390.1328 108.8428 391.3477 y109.6504 403.5996 109.8931 408.9707 V110.0117 411.5977 110.2104 414.4844 110.5386 417.2539 C110.7842 419.332 111.1025 421.3477 111.5146 423.1367 C112.917 427.373 113.3647 427.459 v113.8115 427.541 115.4302 424.7871 115.9775 422.3359 c117.2153 416.8008 117.9458 416.0918 118.8887 410.2773 c119.7856 404.752 120.6045 400.1289 120.7158 399.373 c121.1167 396.6309 120.9185 388.0781 120.2266 384.6719 C120.0625 383.7422 120.0132 383.4004 119.4063 382.7852 c117.9834 381.3457 116.9722 379.6309 116.9722 378.5098 c116.9722 377.3887 116.7852 377.4082 117.0513 376.7598 C118.9272 373.9512 129.7104 380.3789 V133.0796 382.1426 133.0796 386.0391 V133.0796 425.4492 l122.3877 429.0645 114.1523 429.0645 v105.917 429.0645 95.605 425.457 y95.605 386.2168 l95.605 383.8027 95.9561 379.2715 99.4053 377.7266 C90.2207 380.8711 90.2207 386.2656 V90.2207 428.7891 l104.2412 431.3711 114.1587 431.3711 v124.0762 431.3711 138.3447 428.7891 y138.3447 389.8828 138.3447 386.2148 v138.3447 382.5488 134.748 380.5957 YfUUu*u267.9839 413.5313 m267.0034 412.9863 265.686 412.7129 264.0313 412.7129 c262.3638 412.7129 261.0674 413.2168 260.1421 414.2266 c259.2173 415.2363 258.7549 416.6465 258.7549 418.4551 c258.7549 420.2793 259.2173 421.7305 260.1431 422.8086 c261.041 423.8477 262.2334 424.3672 263.7192 424.3672 c264.3784 424.3672 264.9468 424.2949 265.4243 424.1504 c265.4243 428.7285 L267.9839 428.7285 l267.9839 413.5313 Lf1 D265.4243 414.6094 m265.4243 422.7676 L265.0869 422.8652 264.708 422.9141 264.2876 422.9141 c262.2974 422.9141 261.3018 421.4766 261.3018 418.6035 c261.3018 415.7715 262.2339 414.3555 264.0986 414.3555 c264.7158 414.3555 265.1572 414.4395 265.4243 414.6094 cf*U*u0 D279.6826 418.6641 m272.7422 417.6582 L272.9517 415.5566 273.9839 414.5078 275.835 414.5078 c276.9282 414.5078 277.8813 414.7129 278.6953 415.125 c279.3032 413.5117 L278.3364 412.9785 277.0889 412.7129 275.561 412.7129 c273.9346 412.7129 272.6499 413.2246 271.7109 414.248 c270.7725 415.2715 270.3022 416.7266 270.3022 418.6191 c270.3022 420.4551 270.7334 421.8887 271.5952 422.918 c272.4585 423.9473 273.6387 424.4629 275.1387 424.4629 c276.6533 424.4629 277.8027 423.9688 278.5889 422.9805 c279.3745 421.9941 279.7383 420.5566 279.6826 418.6641 cf1 D277.2856 419.6699 m277.2856 421.8145 276.5415 422.8867 275.0527 422.8867 c274.2661 422.8867 273.6631 422.5723 273.2417 421.9414 c272.7793 421.2539 272.561 420.2578 272.5894 418.9551 c277.2856 419.6699 Lf*UUu*u0 D150.6953 382.6855 m146.6719 382.6855 L146.6719 407.5547 L150.6953 407.5547 l150.6953 382.6855 Lf*U*u169.2505 391.5547 m169.2505 388.8086 168.6465 386.623 167.4375 384.998 c166.1187 383.2402 164.2622 382.3633 161.8672 382.3633 c159.4717 382.3633 157.6147 383.2402 156.2964 384.998 c155.0874 386.623 154.4834 388.8086 154.4834 391.5547 c154.4834 394.3223 155.0874 396.5195 156.2964 398.1445 c157.6147 399.9023 159.4717 400.7813 161.8672 400.7813 c164.2842 400.7813 166.1411 399.9023 167.4375 398.1445 c168.6465 396.5195 169.2505 394.3223 169.2505 391.5547 cf1 D165.2598 391.5859 m165.2598 396.0234 164.1284 398.2441 161.8672 398.2441 c159.6045 398.2441 158.4736 396.0234 158.4736 391.5859 c158.4736 387.2578 159.6045 385.0918 161.8672 385.0918 c164.1284 385.0918 165.2598 387.2578 165.2598 391.5859 cf*U*u0 D183.04 387.7988 m183.04 386.3047 182.4575 385.0313 181.292 383.9766 c180.127 382.9219 178.5996 382.3945 176.7085 382.3945 c174.686 382.3945 173.0479 382.8223 171.7949 383.6777 c172.8501 386.2461 L173.7085 385.5625 174.8184 385.2227 176.1826 385.2227 c176.9961 385.2227 177.6558 385.459 178.1611 385.9316 c178.6675 386.4023 178.9199 387.002 178.9199 387.7266 c178.9199 388.4746 178.7222 389.0625 178.3271 389.4902 c177.9316 389.9199 177.2612 390.3105 176.3169 390.6621 c173.6147 391.6934 172.2637 393.3535 172.2637 395.6387 c172.2637 397.0898 172.7847 398.3086 173.8281 399.2969 c174.8711 400.2871 176.2275 400.7813 177.8955 400.7813 c179.6958 400.7813 181.2334 400.3633 182.5068 399.5273 c181.52 397.1875 L180.7085 397.8496 179.7651 398.1797 178.6909 398.1797 c177.9009 398.1797 177.2808 397.9551 176.832 397.5039 c176.3823 397.0547 176.1572 396.498 176.1572 395.8398 c176.1572 394.6758 177.0352 393.7422 178.792 393.0391 c181.624 391.8965 183.04 390.1504 183.04 387.7988 cf*U*u212.7109 382.6855 m208.0186 382.6855 L206.1201 389.0254 L198.1675 389.0254 L196.1973 382.6855 L192.1133 382.6855 L200.2813 407.3398 L204.5791 407.3398 l212.7109 382.6855 Lf1 D205.4746 391.6758 m202.9312 400.3574 L202.5732 401.5781 202.3589 402.5703 202.2866 403.3359 c202.2153 403.3359 L202.0957 402.6895 201.8682 401.6992 201.5347 400.3574 c198.8833 391.6758 l205.4746 391.6758 Lf*U*u0 D229.2539 382.6855 m225.2314 382.6855 L225.2314 395.2773 L225.2314 397.2539 224.167 398.2441 222.0371 398.2441 c221.0264 398.2441 220.1045 398.0801 219.2695 397.75 c219.2695 382.6855 L215.2476 382.6855 L215.2476 399.4961 L217.0708 400.3516 219.3882 400.7813 222.2012 400.7813 c224.6836 400.7813 226.5195 400.2324 227.7061 399.1348 c228.7383 398.209 229.2539 396.9473 229.2539 395.3418 c229.2539 382.6855 Lf*U*u247.3857 383.6484 m245.8472 382.791 243.7798 382.3633 241.187 382.3633 c238.5703 382.3633 236.5366 383.1523 235.0854 384.7363 c233.6343 386.3164 232.9092 388.5254 232.9092 391.3594 c232.9092 394.2148 233.6343 396.4883 235.0854 398.1816 c236.4932 399.8066 238.3618 400.6211 240.6919 400.6211 c241.7246 400.6211 242.6152 400.5078 243.3633 400.2852 c243.3633 407.4766 L247.3857 407.4766 l247.3857 383.6484 Lf1 D243.3633 385.3262 m243.3633 398.1113 L242.8359 398.2656 242.2417 398.3418 241.5825 398.3418 c238.4604 398.3418 236.8999 396.0898 236.8999 391.5879 c236.8999 387.1484 238.3618 384.9316 241.2856 384.9316 c242.2524 384.9316 242.9448 385.0625 243.3633 385.3262 cf*U*u0 D265.6904 391.6836 m254.8115 390.1016 L255.1411 386.8047 256.7563 385.1582 259.6563 385.1582 c261.3701 385.1582 262.8643 385.4863 264.1392 386.1445 c265.0947 383.6133 L263.5786 382.7793 261.623 382.3633 259.228 382.3633 c256.6787 382.3633 254.6685 383.1641 253.1958 384.7676 c251.7236 386.3711 250.9883 388.6563 250.9883 391.6211 c250.9883 394.498 251.6636 396.7441 253.0151 398.3594 c254.3667 399.9727 256.2178 400.7813 258.5693 400.7813 c260.9438 400.7813 262.7461 400.0059 263.9761 398.457 c265.207 396.9082 265.7788 394.6504 265.6904 391.6836 cf1 D261.9263 393.2656 m261.9263 396.627 260.7612 398.3086 258.4312 398.3086 c257.2012 398.3086 256.2563 397.8145 255.5967 396.8262 c254.8716 395.748 254.5313 394.1875 254.5742 392.1445 c261.9263 393.2656 Lf*U*u0 D279.5122 387.7988 m279.5122 386.3047 278.9292 385.0313 277.7642 383.9766 c276.5986 382.9219 275.0713 382.3945 273.1807 382.3945 c271.1587 382.3945 269.52 382.8223 268.2661 383.6777 c269.3218 386.2461 L270.1797 385.5625 271.2905 385.2227 272.6538 385.2227 c273.4678 385.2227 274.1274 385.459 274.6328 385.9316 c275.1387 386.4023 275.3911 387.002 275.3911 387.7266 c275.3911 388.4746 275.1938 389.0625 274.7988 389.4902 c274.4033 389.9199 273.7334 390.3105 272.7891 390.6621 c270.0869 391.6934 268.7349 393.3535 268.7349 395.6387 c268.7349 397.0898 269.2568 398.3086 270.2998 399.2969 c271.3433 400.2871 272.6992 400.7813 274.3677 400.7813 c276.1685 400.7813 277.7056 400.3633 278.978 399.5273 c277.9912 397.1875 L277.1797 397.8496 276.2368 398.1797 275.1626 398.1797 c274.373 398.1797 273.7534 397.9551 273.3032 397.5039 c272.8535 397.0547 272.6294 396.498 272.6294 395.8398 c272.6294 394.6758 273.5078 393.7422 275.2637 393.0391 c278.0957 391.8965 279.5122 390.1504 279.5122 387.7988 cf*UUu*u167.894 412.8848 m165.333 412.8848 L165.333 420.918 L165.333 422.1797 164.6528 422.8125 163.293 422.8125 c162.6484 422.8125 162.0591 422.707 161.5259 422.4961 c161.5259 412.8848 L158.9658 412.8848 L158.9658 423.6074 L160.1279 424.1543 161.606 424.4277 163.3979 424.4277 c164.9805 424.4277 166.1504 424.0762 166.9058 423.375 c167.5645 422.7891 167.894 421.9824 167.894 420.957 c167.894 412.8848 Lf*U*u173.416 427.4453 m173.416 427.0938 173.2798 426.7949 173.0059 426.5488 c172.7324 426.3027 172.3994 426.1797 172.0068 426.1797 c171.6143 426.1797 171.2813 426.3027 171.0073 426.5488 c170.7344 426.7949 170.5972 427.0938 170.5972 427.4453 c170.5972 427.7949 170.7344 428.0957 171.0073 428.3496 c171.2813 428.5996 171.6143 428.7285 172.0068 428.7285 c172.3994 428.7285 172.7324 428.6055 173.0059 428.3594 c173.2798 428.1133 173.416 427.8086 173.416 427.4453 cf173.2813 412.8848 m170.7207 412.8848 L170.7207 424.2227 L173.2813 424.2227 l173.2813 412.8848 Lf*U*u184.9565 424.2227 m181.3179 412.8848 L178.8789 412.8848 L175.1763 424.2227 L177.9111 424.2227 L179.9092 416.9043 L180.0635 416.3574 180.1538 415.8379 180.1826 415.3496 c180.2241 415.3496 L180.2944 415.7559 180.3926 416.2734 180.5186 416.9043 c182.5591 424.2227 l184.9565 424.2227 Lf*U*u195.6987 418.6309 m188.7588 417.623 L188.9692 415.5215 190.0005 414.4727 191.8501 414.4727 c192.9443 414.4727 193.897 414.6797 194.7119 415.0918 c195.3213 413.4766 L194.3535 412.9434 193.106 412.6777 191.5776 412.6777 c189.9502 412.6777 188.6675 413.1895 187.728 414.2129 c186.7881 415.2363 186.3188 416.6934 186.3188 418.584 c186.3188 420.4219 186.75 421.8535 187.6123 422.8828 c188.4746 423.9121 189.6558 424.4277 191.1563 424.4277 c192.6694 424.4277 193.8198 423.9336 194.6055 422.9473 c195.3901 421.959 195.7549 420.5215 195.6987 418.6309 cf1 D193.3032 419.6348 m193.3032 421.7813 192.5586 422.8535 191.0703 422.8535 c190.2842 422.8535 189.6802 422.5371 189.2583 421.9063 c188.7954 421.2207 188.5776 420.2227 188.606 418.9199 c193.3032 419.6348 Lf*U*u0 D203.4932 424.4141 m202.9873 422.5391 L202.6084 422.6641 202.2144 422.7266 201.8071 422.7266 c201.3164 422.7266 200.9082 422.6367 200.585 422.4531 c200.585 412.8848 L198.0249 412.8848 L198.0249 423.6152 l199.2725 424.2168 201.0957 424.4844 203.4932 424.4141 cf*U*u211.6665 416.1426 m211.6665 415.1895 211.2959 414.375 210.5518 413.7031 c209.8076 413.0273 208.833 412.6914 207.6274 412.6914 c206.3364 412.6914 205.291 412.9668 204.4917 413.5137 c205.165 415.1543 L205.7114 414.7188 206.4199 414.498 207.291 414.498 c207.8096 414.498 208.2305 414.6504 208.5537 414.9531 c208.876 415.252 209.0376 415.6348 209.0376 416.0977 c209.0376 416.5742 208.9106 416.9512 208.6602 417.2227 c208.4067 417.4961 207.98 417.7461 207.377 417.9707 c205.6543 418.6289 204.7925 419.6875 204.7925 421.1465 c204.7925 422.0723 205.1245 422.8496 205.7905 423.4805 c206.4561 424.1133 207.3203 424.4277 208.3853 424.4277 c209.5342 424.4277 210.5146 424.1621 211.3271 423.6309 c210.6958 422.1387 L210.1782 422.5605 209.5757 422.7715 208.8901 422.7715 c208.3848 422.7715 207.9888 422.627 207.7021 422.3398 c207.415 422.0508 207.2715 421.6973 207.2715 421.2754 c207.2715 420.5332 207.8315 419.9375 208.9541 419.4902 c210.7622 418.7578 211.6665 417.6445 211.6665 416.1426 cf*U*u216.6821 427.4453 m216.6821 427.0938 216.5449 426.7949 216.272 426.5488 c215.999 426.3027 215.6655 426.1797 215.2734 426.1797 c214.8809 426.1797 214.5483 426.3027 214.2734 426.5488 c214.001 426.7949 213.8633 427.0938 213.8633 427.4453 c213.8633 427.7949 214.001 428.0957 214.2734 428.3496 c214.5483 428.5996 214.8809 428.7285 215.2734 428.7285 c215.6655 428.7285 215.999 428.6055 216.272 428.3594 c216.5449 428.1133 216.6821 427.8086 216.6821 427.4453 cf216.5483 412.8848 m213.9873 412.8848 L213.9873 424.2227 L216.5483 424.2227 l216.5483 412.8848 Lf*U*u228.1929 413.498 m227.2119 412.9512 225.8945 412.6777 224.2397 412.6777 c222.5728 412.6777 221.2759 413.1836 220.3501 414.1934 c219.4253 415.2012 218.9629 416.6113 218.9629 418.4219 c218.9629 420.2441 219.4263 421.6973 220.3516 422.7754 c221.249 423.8125 222.4414 424.332 223.9277 424.332 c224.5869 424.332 225.1553 424.2598 225.6318 424.1152 c225.6318 428.6934 L228.1929 428.6934 l228.1929 413.498 Lf1 D225.6318 414.5742 m225.6318 422.7324 L225.2959 422.8301 224.918 422.8809 224.4966 422.8809 c222.5054 422.8809 221.5103 421.4434 221.5103 418.5684 c221.5103 415.7383 222.4424 414.3223 224.3071 414.3223 c224.9243 414.3223 225.3662 414.4063 225.6318 414.5742 cf*U*u0 D239.1099 413.498 m238.0874 412.9512 236.7212 412.6777 235.0107 412.6777 c231.9282 412.6777 230.3872 413.8262 230.3872 416.125 c230.3872 417.4961 231.0107 418.5254 232.2583 419.2129 c233.2388 419.7441 234.7236 420.1094 236.7144 420.3047 c236.7144 420.9141 L236.7144 422.1621 235.9634 422.7832 234.4648 422.7832 c233.5259 422.7832 232.5811 422.5547 231.6274 422.0957 c231.0391 423.5664 L232.2158 424.1406 233.5122 424.4277 234.9277 424.4277 c237.7163 424.4277 239.1099 423.123 239.1099 420.5176 c239.1099 413.498 Lf1 D236.7144 414.418 m236.7144 419.0879 L235.3706 418.9199 234.4199 418.6621 233.8599 418.3105 c233.1611 417.875 232.8105 417.1738 232.8105 416.2051 c232.8105 414.8047 233.6011 414.1016 235.1812 414.1016 c235.7832 414.1016 236.2935 414.207 236.7144 414.418 cf*U*u0 D250.6563 413.498 m249.6753 412.9512 248.3574 412.6777 246.7036 412.6777 c245.0356 412.6777 243.7402 413.1836 242.814 414.1934 c241.8892 415.2012 241.4268 416.6113 241.4268 418.4219 c241.4268 420.2441 241.8896 421.6973 242.8154 422.7754 c243.7129 423.8125 244.9048 424.332 246.3921 424.332 c247.0513 424.332 247.6191 424.2598 248.0957 424.1152 c248.0957 428.6934 L250.6563 428.6934 l250.6563 413.498 Lf1 D248.0957 414.5742 m248.0957 422.7324 L247.7593 422.8301 247.3804 422.8809 246.9604 422.8809 c244.9692 422.8809 243.9741 421.4434 243.9741 418.5684 c243.9741 415.7383 244.9063 414.3223 246.772 414.3223 c247.3877 414.3223 247.8296 414.4063 248.0957 414.5742 cf*UU*u0 D146.6401 428.666 m149.3677 428.666 L149.3677 416.4785 L149.3677 415.1387 150.0894 414.4668 151.5332 414.4668 c152.2183 414.4668 152.8438 414.5801 153.4087 414.8027 c153.4087 428.666 L156.1362 428.666 L156.1362 413.6191 L154.8999 413.0391 153.3286 412.748 151.4214 412.748 c149.7388 412.748 148.4946 413.1211 147.6899 413.8652 c146.9907 414.4902 146.6401 415.3477 146.6401 416.4355 c146.6401 428.666 Lf*Uu*u95.2725 368.9258 m91.7925 368.9258 L91.7925 365.4297 L94.8877 365.4297 L94.8877 364.0283 L91.7925 364.0283 L91.7925 358.8076 L89.667 358.8076 L89.667 370.3418 L95.2725 370.3418 l95.2725 368.9258 Lf*U*u102.6338 359.2539 m101.8843 358.8535 100.8833 358.6533 99.6309 358.6533 c97.3721 358.6533 96.2432 359.4951 96.2432 361.1797 c96.2432 362.2568 96.7817 363.0527 97.8599 363.5664 c98.5273 363.8848 99.5332 364.1104 100.8784 364.2441 c100.8784 364.6904 L100.8784 365.6045 100.3291 366.0605 99.2305 366.0605 c98.5425 366.0605 97.8496 365.8916 97.1514 365.5527 c96.7202 366.6309 L97.5825 367.0518 98.5322 367.2627 99.5693 367.2627 c101.6123 367.2627 102.6338 366.3076 102.6338 364.3975 c102.6338 359.2539 Lf1 D100.8784 359.9316 m100.8784 363.3506 L99.9595 363.2373 99.3091 363.0781 98.9277 362.873 c98.3081 362.5449 97.9985 362 97.9985 361.2412 c97.9985 360.2139 98.5815 359.7012 99.748 359.7012 c100.1919 359.7012 100.5688 359.7773 100.8784 359.9316 cf*U*u0 D109.5483 359.2236 m109.127 358.8438 108.4751 358.6533 107.5923 358.6533 c106.4834 358.6533 105.6367 359.1211 105.0513 360.0547 c104.5586 360.835 104.312 361.8105 104.312 362.9814 c104.312 364.1514 104.5635 365.1221 105.0669 365.8916 c105.6519 366.8057 106.499 367.2627 107.6079 367.2627 c108.4395 367.2627 109.0811 367.0723 109.5327 366.6924 c109.1323 365.6299 L108.8345 365.8555 108.4648 365.9688 108.0234 365.9688 c106.812 365.9688 106.2065 364.9805 106.2065 363.0039 c106.2065 362.2461 106.3193 361.6064 106.5449 361.084 c106.853 360.3672 107.3354 360.0088 107.9927 360.0088 c108.4443 360.0088 108.8188 360.1318 109.1167 360.3779 c109.5483 359.2236 Lf*U*u117.4326 359.3008 m116.6011 358.8584 115.5386 358.6387 114.2451 358.6387 c112.0991 358.6387 111.0264 359.5723 111.0264 361.4414 c111.0264 367.1084 L112.9204 367.1084 L112.9204 361.333 L112.9204 360.3984 113.3823 359.9316 114.3057 359.9316 c114.813 359.9316 115.2236 360.0244 115.5386 360.209 c115.5386 367.1084 L117.4326 367.1084 l117.4326 359.3008 Lf*U*u121.4058 358.8076 m119.5117 358.8076 L119.5117 370.4658 L121.4058 370.4658 l121.4058 358.8076 Lf*U*u127.1807 358.8848 m126.9341 358.7715 126.6157 358.7148 126.2261 358.7148 c125.5176 358.7148 124.9604 358.9131 124.5552 359.3086 c124.1494 359.7031 123.9468 360.2549 123.9468 360.9639 c123.9468 365.9072 L123.0225 365.9072 L123.0225 367.1084 L123.9468 367.1084 L123.9468 369.8799 L125.8408 370.4043 L125.8408 367.1084 L127.1807 367.1084 L127.1807 365.9072 L125.8408 365.9072 L125.8408 361.0557 L125.8408 360.3369 126.1401 359.9775 126.7393 359.9775 c126.8608 359.9775 127.0078 360.0039 127.1807 360.0547 c127.1807 358.8848 Lf*U*u134.7573 359.2539 m134.0078 358.8535 133.0068 358.6533 131.7544 358.6533 c129.4956 358.6533 128.3667 359.4951 128.3667 361.1797 c128.3667 362.2568 128.9053 363.0527 129.9834 363.5664 c130.6509 363.8848 131.6567 364.1104 133.002 364.2441 c133.002 364.6904 L133.002 365.6045 132.4526 366.0605 131.354 366.0605 c130.666 366.0605 129.9731 365.8916 129.2749 365.5527 c128.8438 366.6309 L129.7061 367.0518 130.6558 367.2627 131.6929 367.2627 c133.7358 367.2627 134.7573 366.3076 134.7573 364.3975 c134.7573 359.2539 Lf1 D133.002 359.9316 m133.002 363.3506 L132.083 363.2373 131.4326 363.0781 131.0513 362.873 c130.4316 362.5449 130.1221 362 130.1221 361.2412 c130.1221 360.2139 130.7051 359.7012 131.8716 359.7012 c132.3154 359.7012 132.6924 359.7773 133.002 359.9316 cf*U*u0 D143.1499 359.3164 m142.4312 358.916 141.4663 358.7148 140.2549 358.7148 c138.9819 358.7148 138.0117 359.1064 137.3442 359.8877 c136.7075 360.6279 136.3896 361.6416 136.3896 362.9268 c136.3896 364.1611 136.6812 365.1689 137.2642 365.9512 c137.9092 366.8252 138.8252 367.2627 140.0122 367.2627 c140.4932 367.2627 140.9077 367.2109 141.2559 367.1084 c141.2559 370.5273 L143.1499 370.5273 l143.1499 359.3164 Lf1 D141.2559 360.1016 m141.2559 366.0918 L141.0107 366.1631 140.7349 366.1992 140.4287 366.1992 c138.978 366.1992 138.2529 365.1445 138.2529 363.0352 c138.2529 360.9561 138.9321 359.916 140.2905 359.916 c140.7397 359.916 141.0615 359.9775 141.2559 360.1016 cf*U*u0 D155.7935 359.3164 m155.0747 358.916 154.1099 358.7148 152.8984 358.7148 c151.6255 358.7148 150.6553 359.1064 149.9878 359.8877 c149.3511 360.6279 149.0332 361.6416 149.0332 362.9268 c149.0332 364.1611 149.3247 365.1689 149.9077 365.9512 c150.5527 366.8252 151.4688 367.2627 152.6558 367.2627 c153.1367 367.2627 153.5513 367.2109 153.8994 367.1084 c153.8994 370.5273 L155.7935 370.5273 l155.7935 359.3164 Lf1 D153.8994 360.1016 m153.8994 366.0918 L153.6543 366.1631 153.3784 366.1992 153.0723 366.1992 c151.6216 366.1992 150.8965 365.1445 150.8965 363.0352 c150.8965 360.9561 151.5757 359.916 152.9341 359.916 c153.3833 359.916 153.7051 359.9775 153.8994 360.1016 cf*U*u0 D164.4023 363.0059 m159.3188 362.2783 L159.4731 360.7246 160.2275 359.9473 161.583 359.9473 c162.3838 359.9473 163.082 360.1064 163.6777 360.4248 c164.1245 359.2393 L163.416 358.8486 162.5024 358.6533 161.3833 358.6533 c160.1104 358.6533 159.1348 359.0645 158.4575 359.8857 c157.8413 360.6455 157.5332 361.6768 157.5332 362.9814 c157.5332 364.2227 157.8052 365.2188 158.3496 365.9688 c158.9653 366.8311 159.8745 367.2627 161.0757 367.2627 c162.2974 367.2627 163.1855 366.8408 163.7402 365.998 c164.2227 365.2676 164.4434 364.2705 164.4023 363.0059 cf1 D162.646 363.751 m162.646 365.332 162.1021 366.123 161.0137 366.123 c160.3154 366.123 159.8174 365.792 159.52 365.1318 c159.2939 364.6367 159.1914 364.002 159.2119 363.2275 c162.646 363.751 Lf*U*u0 D176.6138 359.2539 m176.0596 358.8232 175.2588 358.6074 174.2114 358.6074 c172.6919 358.6074 171.5371 359.249 170.7466 360.5322 c170.0894 361.5996 169.7607 362.9453 169.7607 364.5674 c169.7607 366.1484 170.0996 367.4883 170.7773 368.5869 c171.5781 369.8799 172.7275 370.5273 174.2271 370.5273 c175.2124 370.5273 176.0078 370.3115 176.6138 369.8799 c176.1519 368.6016 L175.6997 368.8691 175.1973 369.002 174.6426 369.002 c173.6465 369.002 172.9229 368.4785 172.4712 367.4316 c172.1426 366.6816 171.9785 365.7324 171.9785 364.583 c171.9785 363.4844 172.1528 362.5498 172.502 361.7803 c172.9639 360.7529 173.6772 360.2402 174.6426 360.2402 c175.1973 360.2402 175.6846 360.373 176.1055 360.6406 c176.6138 359.2539 Lf*U*u179.8013 369.4648 m179.8013 369.1973 179.6987 368.9766 179.4932 368.8018 c179.2881 368.6279 179.0469 368.54 178.7695 368.54 c178.4922 368.54 178.251 368.6279 178.0459 368.8018 c177.8403 368.9766 177.7378 369.1973 177.7378 369.4648 c177.7378 369.7314 177.8403 369.9541 178.0459 370.1348 c178.251 370.3135 178.4922 370.4043 178.7695 370.4043 c179.0469 370.4043 179.2881 370.3164 179.4932 370.1416 c179.6987 369.9678 179.8013 369.7412 179.8013 369.4648 cf179.709 358.8076 m177.8149 358.8076 L177.8149 367.1084 L179.709 367.1084 l179.709 358.8076 Lf*U*u188.3335 363.0059 m183.25 362.2783 L183.4043 360.7246 184.1587 359.9473 185.5142 359.9473 c186.3149 359.9473 187.0132 360.1064 187.6089 360.4248 c188.0557 359.2393 L187.3472 358.8486 186.4336 358.6533 185.3145 358.6533 c184.0415 358.6533 183.0659 359.0645 182.3887 359.8857 c181.7725 360.6455 181.4644 361.6768 181.4644 362.9814 c181.4644 364.2227 181.7363 365.2188 182.2808 365.9688 c182.8965 366.8311 183.8057 367.2627 185.0068 367.2627 c186.2285 367.2627 187.1167 366.8408 187.6714 365.998 c188.1538 365.2676 188.3745 364.2705 188.3335 363.0059 cf1 D186.5771 363.751 m186.5771 365.332 186.0332 366.123 184.9448 366.123 c184.2466 366.123 183.7485 365.792 183.4512 365.1318 c183.2251 364.6367 183.1226 364.002 183.1431 363.2275 c186.5771 363.751 Lf*U*u0 D196.5869 358.8076 m194.6929 358.8076 L194.6929 364.6904 L194.6929 365.6143 194.2002 366.0762 193.2158 366.0762 c192.7485 366.0762 192.3218 365.999 191.936 365.8457 c191.936 358.8076 L190.042 358.8076 L190.042 366.6611 L190.894 367.0625 191.9771 367.2627 193.2915 367.2627 c194.2358 367.2627 194.9902 367.082 195.5552 366.7236 c196.2432 366.2813 196.5869 365.6143 196.5869 364.7217 c196.5869 358.8076 Lf*U*u203.5171 359.2236 m203.0957 358.8438 202.4438 358.6533 201.561 358.6533 c200.4521 358.6533 199.6055 359.1211 199.02 360.0547 c198.5273 360.835 198.2808 361.8105 198.2808 362.9814 c198.2808 364.1514 198.5322 365.1221 199.0356 365.8916 c199.6206 366.8057 200.4678 367.2627 201.5767 367.2627 c202.4082 367.2627 203.0498 367.0723 203.5015 366.6924 c203.1011 365.6299 L202.8032 365.8555 202.4336 365.9688 201.9922 365.9688 c200.7808 365.9688 200.1753 364.9805 200.1753 363.0039 c200.1753 362.2461 200.2881 361.6064 200.5137 361.084 c200.8218 360.3672 201.3042 360.0088 201.9614 360.0088 c202.4131 360.0088 202.7876 360.1318 203.0854 360.3779 c203.5171 359.2236 Lf*U*u207.0278 369.4648 m207.0278 369.1973 206.9253 368.9766 206.7197 368.8018 c206.5146 368.6279 206.2734 368.54 205.9961 368.54 c205.7188 368.54 205.4775 368.6279 205.2725 368.8018 c205.0669 368.9766 204.9644 369.1973 204.9644 369.4648 c204.9644 369.7314 205.0669 369.9541 205.2725 370.1348 c205.4775 370.3135 205.7188 370.4043 205.9961 370.4043 c206.2734 370.4043 206.5146 370.3164 206.7197 370.1416 c206.9253 369.9678 207.0278 369.7412 207.0278 369.4648 cf206.9355 358.8076 m205.0415 358.8076 L205.0415 367.1084 L206.9355 367.1084 l206.9355 358.8076 Lf*U*u215.0049 359.2539 m214.2554 358.8535 213.2544 358.6533 212.002 358.6533 c209.7432 358.6533 208.6143 359.4951 208.6143 361.1797 c208.6143 362.2568 209.1528 363.0527 210.231 363.5664 c210.8984 363.8848 211.9043 364.1104 213.2495 364.2441 c213.2495 364.6904 L213.2495 365.6045 212.7002 366.0605 211.6016 366.0605 c210.9136 366.0605 210.2207 365.8916 209.5225 365.5527 c209.0913 366.6309 L209.9536 367.0518 210.9033 367.2627 211.9404 367.2627 c213.9834 367.2627 215.0049 366.3076 215.0049 364.3975 c215.0049 359.2539 Lf1 D213.2495 359.9316 m213.2495 363.3506 L212.3306 363.2373 211.6802 363.0781 211.2988 362.873 c210.6792 362.5449 210.3696 362 210.3696 361.2412 c210.3696 360.2139 210.9526 359.7012 212.1191 359.7012 c212.563 359.7012 212.9399 359.7773 213.2495 359.9316 cf*U*u0 D221.7505 361.1943 m221.7505 360.4141 221.4473 359.7881 220.8418 359.3154 c220.2769 358.8848 219.5942 358.6689 218.7935 358.6689 c217.8486 358.6689 217.084 358.8691 216.499 359.2695 c216.9917 360.4707 L217.3921 360.1523 217.9106 359.9932 218.5474 359.9932 c218.9063 359.9932 219.2095 360.0986 219.4556 360.3096 c219.7021 360.5195 219.8252 360.8047 219.8252 361.1641 c219.8252 361.7695 219.4194 362.2266 218.6089 362.5342 c217.3457 363.0166 216.7144 363.792 216.7144 364.8594 c216.7144 365.5781 216.9766 366.1631 217.5 366.6152 c217.9927 367.0469 218.6089 367.2627 219.3481 367.2627 c220.1895 367.2627 220.9082 367.0674 221.5039 366.6768 c221.042 365.584 L220.6621 365.8916 220.2202 366.0459 219.7173 366.0459 c219.3789 366.0459 219.0962 365.9482 218.8706 365.7529 c218.6445 365.5576 218.5317 365.291 218.5317 364.9521 c218.5317 364.4082 218.9424 363.9717 219.7637 363.6436 c221.0879 363.1094 221.7505 362.293 221.7505 361.1943 cf*U*u233.438 362.1338 m233.438 361.0762 233.0864 360.2246 232.3833 359.5771 c231.6802 358.9307 230.7993 358.6074 229.7422 358.6074 c228.5 358.6074 227.5449 358.8232 226.8779 359.2539 c227.4014 360.7637 L227.9351 360.4043 228.5767 360.2246 229.3267 360.2246 c229.8911 360.2246 230.3428 360.3838 230.6816 360.7021 c231.0205 361.0195 231.1899 361.4561 231.1899 362.0107 c231.1899 362.5039 230.9995 362.9189 230.6201 363.2578 c230.3428 363.5049 229.9321 363.7402 229.3882 363.9668 c227.7866 364.623 226.9858 365.6758 226.9858 367.124 c226.9858 368.1299 227.3115 368.9482 227.9634 369.5801 c228.6152 370.2109 229.4497 370.5273 230.4658 370.5273 c231.5439 370.5273 232.3911 370.3115 233.0068 369.8799 c232.5298 368.5557 L231.9751 368.9043 231.3799 369.0791 230.7432 369.0791 c230.2197 369.0791 229.8115 368.9307 229.519 368.6328 c229.2266 368.335 229.0801 367.9248 229.0801 367.4004 c229.0801 366.918 229.2646 366.5127 229.6343 366.1846 c229.8911 365.9482 230.2915 365.7168 230.8354 365.4912 c232.5703 364.7617 233.438 363.6436 233.438 362.1338 cf*U*u241.4619 362.9502 m241.4619 361.7285 241.2002 360.7373 240.6763 359.9775 c240.0703 359.0947 239.1826 358.6533 238.0122 358.6533 c236.8418 358.6533 235.9536 359.0947 235.3481 359.9775 c234.8242 360.7373 234.5625 361.7285 234.5625 362.9502 c234.5625 364.1826 234.8242 365.1777 235.3481 365.9375 c235.9434 366.8203 236.8315 367.2627 238.0122 367.2627 c239.1929 367.2627 240.0811 366.8203 240.6763 365.9375 c241.2002 365.1777 241.4619 364.1826 241.4619 362.9502 cf1 D239.5986 362.9736 m239.5986 365.042 239.0693 366.0762 238.0122 366.0762 c236.9546 366.0762 236.4263 365.042 236.4263 362.9736 c236.4263 360.9561 236.9546 359.9473 238.0122 359.9473 c239.0693 359.9473 239.5986 360.9561 239.5986 362.9736 cf*U*u0 D248.084 359.2236 m247.6626 358.8438 247.0107 358.6533 246.1279 358.6533 c245.019 358.6533 244.1724 359.1211 243.5869 360.0547 c243.0942 360.835 242.8477 361.8105 242.8477 362.9814 c242.8477 364.1514 243.0991 365.1221 243.6025 365.8916 c244.1875 366.8057 245.0347 367.2627 246.1436 367.2627 c246.9751 367.2627 247.6167 367.0723 248.0684 366.6924 c247.668 365.6299 L247.3701 365.8555 247.0005 365.9688 246.5591 365.9688 c245.3477 365.9688 244.7422 364.9805 244.7422 363.0039 c244.7422 362.2461 244.855 361.6064 245.0806 361.084 c245.3887 360.3672 245.8711 360.0088 246.5283 360.0088 c246.98 360.0088 247.3545 360.1318 247.6523 360.3779 c248.084 359.2236 Lf*U*u251.5947 369.4648 m251.5947 369.1973 251.4922 368.9766 251.2866 368.8018 c251.0815 368.6279 250.8403 368.54 250.563 368.54 c250.2856 368.54 250.0444 368.6279 249.8394 368.8018 c249.6338 368.9766 249.5313 369.1973 249.5313 369.4648 c249.5313 369.7314 249.6338 369.9541 249.8394 370.1348 c250.0444 370.3135 250.2856 370.4043 250.563 370.4043 c250.8403 370.4043 251.0815 370.3164 251.2866 370.1416 c251.4922 369.9678 251.5947 369.7412 251.5947 369.4648 cf251.5024 358.8076 m249.6084 358.8076 L249.6084 367.1084 L251.5024 367.1084 l251.5024 358.8076 Lf*U*u259.5718 359.2539 m258.8223 358.8535 257.8213 358.6533 256.5688 358.6533 c254.3101 358.6533 253.1812 359.4951 253.1812 361.1797 c253.1812 362.2568 253.7197 363.0527 254.7979 363.5664 c255.4653 363.8848 256.4712 364.1104 257.8164 364.2441 c257.8164 364.6904 L257.8164 365.6045 257.2671 366.0605 256.1685 366.0605 c255.4805 366.0605 254.7876 365.8916 254.0894 365.5527 c253.6582 366.6309 L254.5205 367.0518 255.4702 367.2627 256.5073 367.2627 c258.5503 367.2627 259.5718 366.3076 259.5718 364.3975 c259.5718 359.2539 Lf1 D257.8164 359.9316 m257.8164 363.3506 L256.8975 363.2373 256.2471 363.0781 255.8657 362.873 c255.2461 362.5449 254.9365 362 254.9365 361.2412 c254.9365 360.2139 255.5195 359.7012 256.686 359.7012 c257.1299 359.7012 257.5068 359.7773 257.8164 359.9316 cf*U*u0 D263.5293 358.8076 m261.6353 358.8076 L261.6353 370.4658 L263.5293 370.4658 l263.5293 358.8076 Lf*U*u272.1548 363.0059 m267.0703 362.2783 L267.2246 360.7246 267.979 359.9473 269.3345 359.9473 c270.1353 359.9473 270.8345 360.1064 271.4302 360.4248 c271.8755 359.2393 L271.1685 358.8486 270.2544 358.6533 269.1348 358.6533 c267.8618 358.6533 266.8862 359.0645 266.209 359.8857 c265.5928 360.6455 265.2847 361.6768 265.2847 362.9814 c265.2847 364.2227 265.5566 365.2188 266.1011 365.9688 c266.7168 366.8311 267.626 367.2627 268.8271 367.2627 c270.0493 367.2627 270.938 366.8408 271.4927 365.998 c271.9751 365.2676 272.1958 364.2705 272.1548 363.0059 cf1 D270.397 363.751 m270.397 365.332 269.854 366.123 268.7651 366.123 c268.0669 366.123 267.5688 365.792 267.2715 365.1318 c267.0454 364.6367 266.9429 364.002 266.9634 363.2275 c270.397 363.751 Lf*U*u0 D278.6216 361.1943 m278.6216 360.4141 278.3188 359.7881 277.7124 359.3154 c277.1479 358.8848 276.4653 358.6689 275.6646 358.6689 c274.7202 358.6689 273.9556 358.8691 273.3696 359.2695 c273.8628 360.4707 L274.2632 360.1523 274.7817 359.9932 275.4185 359.9932 c275.7778 359.9932 276.0806 360.0986 276.3267 360.3096 c276.5728 360.5195 276.6968 360.8047 276.6968 361.1641 c276.6968 361.7695 276.2905 362.2266 275.48 362.5342 c274.2173 363.0166 273.5854 363.792 273.5854 364.8594 c273.5854 365.5781 273.8472 366.1631 274.3706 366.6152 c274.8638 367.0469 275.48 367.2627 276.2192 367.2627 c277.061 367.2627 277.7798 367.0674 278.3755 366.6768 c277.9126 365.584 L277.5327 365.8916 277.0913 366.0459 276.5884 366.0459 c276.2495 366.0459 275.9673 365.9482 275.7417 365.7529 c275.5161 365.5576 275.4028 365.291 275.4028 364.9521 c275.4028 364.4082 275.813 363.9717 276.6353 363.6436 c277.9595 363.1094 278.6216 362.293 278.6216 361.1943 cf*UU1 Ap0 0 0 0 k538.9561 342.8633 m317.4883 342.8633 L317.4883 447.4961 L538.9561 447.4961 L538.9561 342.8633 Lf0 Ap1 XR333.8955 428.873 m346.8145 431.5684 357.666 431.5684 v368.5195 431.5684 382.0195 428.873 Y382.0195 392.7676 382.0195 387.3516 V382.0195 383.9688 379.9473 382.1504 379.209 381.6172 C377.5566 380.4258 370.1543 374.8086 357.9746 374.8086 C346.5156 374.8086 339.5244 379.7539 336.7471 381.6992 C335.5 382.5781 333.8955 384.4941 333.8955 387.3516 C333.8955 391.7441 333.8955 428.873 Yfuu0 0 0 1 k0 XR378.4229 380.8438 m368.6074 374.4785 358.416 374.8242 y358.1348 376.125 358.2461 378.3672 v358.3584 380.6094 359.582 379.9766 360.4688 381.75 c360.7891 382.3926 361.0664 382.8359 361.5684 384.3438 c361.5879 384.4063 360.9805 395.1484 360.8252 399.707 c360.7422 402.1641 360.2813 406.2637 359.7402 410.248 c359.4209 412.6113 358.7031 414.4824 358.3711 416.7246 c357.8916 419.9629 357.334 423.6152 y356.9346 422.584 356.3623 418.7266 355.7871 414.3711 c355.5117 412.2813 355.2354 410.0781 354.9766 408.0176 c354.4307 403.6543 353.0684 391.9746 352.8623 391.3418 c352.5508 390.3809 352.5176 391.5957 y353.3242 403.8457 353.5684 409.2188 V353.6875 411.8457 353.8857 414.7324 354.2129 417.502 C354.459 419.5801 354.7773 421.5957 355.1895 423.3848 C356.5928 427.6211 357.04 427.707 v357.4863 427.7891 359.1055 425.0352 359.6523 422.584 c360.8906 417.0488 361.6211 416.3398 362.5645 410.5254 c363.4609 405 364.2793 400.377 364.3906 399.6211 c364.792 396.8789 364.5938 388.3262 363.9014 384.9199 C363.7383 383.9902 363.6875 383.6484 363.0801 383.0332 c361.6582 381.5938 360.6465 379.8789 360.6465 378.7578 c360.6465 377.6367 360.46 377.6563 360.7266 377.0078 C362.6025 374.1992 373.3848 380.625 V376.7549 382.3906 376.7549 386.2871 V376.7549 425.6973 l366.0625 429.3125 357.8281 429.3125 v349.5918 429.3125 339.2793 425.7051 y339.2793 386.4648 l339.2793 384.0508 339.6309 379.5195 343.0801 377.9746 C333.8955 381.1172 333.8955 386.5137 V333.8955 429.0371 l347.916 431.6191 357.834 431.6191 v367.751 431.6191 382.0195 429.0371 y382.0195 390.1309 382.0195 386.4629 v382.0195 382.7969 378.4229 380.8438 YfUUu*u511.6582 413.7793 m510.6787 413.2324 509.3604 412.9609 507.707 412.9609 c506.0381 412.9609 504.7422 413.4648 503.8164 414.4746 c502.8916 415.4844 502.4297 416.8945 502.4297 418.7031 c502.4297 420.5273 502.8916 421.9785 503.8184 423.0566 c504.7168 424.0957 505.9082 424.6152 507.3945 424.6152 c508.0537 424.6152 508.6221 424.543 509.0996 424.3984 c509.0996 428.9746 L511.6582 428.9746 l511.6582 413.7793 Lf1 D509.0996 414.8574 m509.0996 423.0156 L508.7617 423.1133 508.3828 423.1621 507.9629 423.1621 c505.9727 423.1621 504.9766 421.7246 504.9766 418.8516 c504.9766 416.0195 505.9082 414.6035 507.7734 414.6035 c508.3906 414.6035 508.832 414.6875 509.0996 414.8574 cf*U*u0 D523.3574 418.9121 m516.418 417.9063 L516.627 415.8047 517.6592 414.7539 519.5098 414.7539 c520.6035 414.7539 521.5566 414.9609 522.3701 415.373 c522.9785 413.7598 L522.0117 413.2266 520.7637 412.9609 519.2363 412.9609 c517.6094 412.9609 516.3252 413.4727 515.3867 414.4961 c514.4473 415.5176 513.9775 416.9746 513.9775 418.8672 c513.9775 420.7031 514.4092 422.1367 515.2705 423.1641 c516.1328 424.1953 517.3145 424.7109 518.8145 424.7109 c520.3281 424.7109 521.4766 424.2168 522.2637 423.2285 c523.0488 422.2422 523.4141 420.8047 523.3574 418.9121 cf1 D520.9609 419.918 m520.9609 422.0625 520.2168 423.1348 518.7285 423.1348 c517.9414 423.1348 517.3379 422.8203 516.916 422.1895 c516.4541 421.502 516.2354 420.5059 516.2637 419.2031 c520.9609 419.918 Lf*UUu*u0 D394.3691 382.9336 m390.3477 382.9336 L390.3477 407.8027 L394.3691 407.8027 l394.3691 382.9336 Lf*U*u412.9258 391.8027 m412.9258 389.0566 412.3213 386.8711 411.1133 385.2461 c409.793 383.4883 407.9365 382.6113 405.543 382.6113 c403.1465 382.6113 401.29 383.4883 399.9717 385.2461 c398.7627 386.8711 398.1582 389.0566 398.1582 391.8027 c398.1582 394.5703 398.7627 396.7676 399.9717 398.3926 c401.29 400.1504 403.1465 401.0293 405.543 401.0293 c407.959 401.0293 409.8154 400.1504 411.1133 398.3926 c412.3213 396.7676 412.9258 394.5703 412.9258 391.8027 cf1 D408.9355 391.834 m408.9355 396.2715 407.8027 398.4922 405.543 398.4922 c403.2803 398.4922 402.1484 396.2715 402.1484 391.834 c402.1484 387.5059 403.2803 385.3398 405.543 385.3398 c407.8027 385.3398 408.9355 387.5059 408.9355 391.834 cf*U*u0 D426.7148 388.0469 m426.7148 386.5527 426.1328 385.2793 424.9668 384.2246 c423.8027 383.1699 422.2754 382.6426 420.3838 382.6426 c418.3604 382.6426 416.7227 383.0703 415.4707 383.9258 c416.5254 386.4941 L417.3828 385.8105 418.4941 385.4707 419.8574 385.4707 c420.6709 385.4707 421.3311 385.7051 421.8359 386.1797 c422.3418 386.6504 422.5947 387.25 422.5947 387.9746 c422.5947 388.7227 422.3965 389.3086 422.002 389.7383 c421.6074 390.168 420.9365 390.5566 419.9922 390.9082 c417.29 391.9414 415.9375 393.6016 415.9375 395.8867 c415.9375 397.3379 416.46 398.5547 417.502 399.5449 c418.5469 400.5352 419.9023 401.0293 421.5703 401.0293 c423.3711 401.0293 424.9082 400.6113 426.1816 399.7754 c425.1953 397.4355 L424.3828 398.0977 423.4404 398.4277 422.3662 398.4277 c421.5752 398.4277 420.9551 398.2031 420.5068 397.752 c420.0576 397.3027 419.832 396.7461 419.832 396.0879 c419.832 394.9238 420.7109 393.9902 422.4668 393.2871 c425.2988 392.1445 426.7148 390.3984 426.7148 388.0469 cf*U*u456.3848 382.9336 m451.6934 382.9336 L449.7949 389.2734 L441.8428 389.2734 L439.873 382.9336 L435.7881 382.9336 L443.9561 407.5879 L448.2539 407.5879 l456.3848 382.9336 Lf1 D449.1504 391.9238 m446.6064 400.6055 L446.248 401.8242 446.0332 402.8184 445.9609 403.584 c445.8906 403.584 L445.7715 402.9375 445.543 401.9473 445.209 400.6055 c442.5586 391.9238 l449.1504 391.9238 Lf*U*u0 D472.9297 382.9336 m468.9063 382.9336 L468.9063 395.5254 L468.9063 397.502 467.8418 398.4922 465.7129 398.4922 c464.7012 398.4922 463.7793 398.3262 462.9453 397.998 c462.9453 382.9336 L458.9219 382.9336 L458.9219 399.7441 L460.7461 400.5996 463.0635 401.0293 465.876 401.0293 c468.3594 401.0293 470.1953 400.4805 471.3809 399.3809 c472.4131 398.457 472.9297 397.1934 472.9297 395.5898 c472.9297 382.9336 Lf*U*u491.0605 383.8945 m489.5215 383.0391 487.4551 382.6113 484.8613 382.6113 c482.2461 382.6113 480.2109 383.4004 478.7607 384.9844 c477.3096 386.5645 476.584 388.7734 476.584 391.6074 c476.584 394.4629 477.3096 396.7363 478.7607 398.4297 c480.168 400.0547 482.0371 400.8672 484.3662 400.8672 c485.4004 400.8672 486.29 400.7559 487.0381 400.5332 c487.0381 407.7227 L491.0605 407.7227 l491.0605 383.8945 Lf1 D487.0381 385.5742 m487.0381 398.3594 L486.5107 398.5117 485.916 398.5898 485.2578 398.5898 c482.1357 398.5898 480.5742 396.3379 480.5742 391.8359 c480.5742 387.3965 482.0371 385.1797 484.9609 385.1797 c485.9277 385.1797 486.6191 385.3105 487.0381 385.5742 cf*U*u0 D509.3652 391.9316 m498.4863 390.3496 L498.8154 387.0527 500.4307 385.4063 503.3311 385.4063 c505.0449 385.4063 506.5391 385.7344 507.8135 386.3926 c508.7695 383.8594 L507.2539 383.0273 505.2988 382.6113 502.9033 382.6113 c500.3535 382.6113 498.3438 383.4121 496.8711 385.0156 c495.3984 386.6191 494.6641 388.9043 494.6641 391.8691 c494.6641 394.7461 495.3379 396.9922 496.6904 398.6074 c498.042 400.2207 499.8926 401.0293 502.2451 401.0293 c504.6191 401.0293 506.4219 400.2539 507.6504 398.7051 c508.8828 397.1563 509.4531 394.8984 509.3652 391.9316 cf1 D505.6006 393.5137 m505.6006 396.875 504.4355 398.5566 502.1055 398.5566 c500.875 398.5566 499.9316 398.0625 499.2715 397.0742 c498.5469 395.9961 498.207 394.4355 498.25 392.3926 c505.6006 393.5137 Lf*U*u0 D523.1875 388.0469 m523.1875 386.5527 522.6035 385.2793 521.4395 384.2246 c520.2734 383.1699 518.7461 382.6426 516.8555 382.6426 c514.834 382.6426 513.1953 383.0703 511.9414 383.9258 c512.9961 386.4941 L513.8555 385.8105 514.9648 385.4707 516.3281 385.4707 c517.1426 385.4707 517.8027 385.7051 518.3076 386.1797 c518.8145 386.6504 519.0664 387.25 519.0664 387.9746 c519.0664 388.7227 518.8691 389.3086 518.4746 389.7383 c518.0781 390.168 517.4082 390.5566 516.4639 390.9082 c513.7617 391.9414 512.4102 393.6016 512.4102 395.8867 c512.4102 397.3379 512.9326 398.5547 513.9746 399.5449 c515.0176 400.5352 516.374 401.0293 518.043 401.0293 c519.8438 401.0293 521.3809 400.6113 522.6533 399.7754 c521.666 397.4355 L520.8555 398.0977 519.9121 398.4277 518.8369 398.4277 c518.0479 398.4277 517.4287 398.2031 516.9785 397.752 c516.5293 397.3027 516.3037 396.7461 516.3037 396.0879 c516.3037 394.9238 517.1826 393.9902 518.9395 393.2871 c521.7705 392.1445 523.1875 390.3984 523.1875 388.0469 cf*UUu*u411.5684 413.1328 m409.0078 413.1328 L409.0078 421.166 L409.0078 422.4277 408.3281 423.0586 406.9678 423.0586 c406.3223 423.0586 405.7344 422.9531 405.2012 422.7441 c405.2012 413.1328 L402.6406 413.1328 L402.6406 423.8555 L403.8027 424.4023 405.2803 424.6758 407.0732 424.6758 c408.6553 424.6758 409.8252 424.3242 410.5801 423.623 c411.2393 423.0371 411.5684 422.2305 411.5684 421.2051 c411.5684 413.1328 Lf*U*u417.0918 427.6914 m417.0918 427.3398 416.9541 427.041 416.6807 426.7969 c416.4072 426.5508 416.0742 426.4277 415.6816 426.4277 c415.2891 426.4277 414.957 426.5508 414.6816 426.7969 c414.4082 427.041 414.2715 427.3398 414.2715 427.6914 c414.2715 428.043 414.4082 428.3438 414.6816 428.5957 c414.957 428.8477 415.2891 428.9746 415.6816 428.9746 c416.0742 428.9746 416.4072 428.8516 416.6807 428.6074 c416.9541 428.3613 417.0918 428.0566 417.0918 427.6914 cf416.9561 413.1328 m414.3955 413.1328 L414.3955 424.4707 L416.9561 424.4707 l416.9561 413.1328 Lf*U*u428.6309 424.4707 m424.9922 413.1328 L422.5547 413.1328 L418.8506 424.4707 L421.5859 424.4707 L423.584 417.1523 L423.7383 416.6055 423.8291 416.0859 423.8574 415.5977 c423.8994 415.5977 L423.9697 416.002 424.0684 416.5215 424.1934 417.1523 c426.2334 424.4707 l428.6309 424.4707 Lf*U*u439.373 418.8789 m432.4336 417.8711 L432.6445 415.7695 433.6758 414.7207 435.5254 414.7207 c436.6191 414.7207 437.5713 414.9277 438.3867 415.3398 c438.9961 413.7246 L438.0283 413.1914 436.7803 412.9258 435.2529 412.9258 c433.625 412.9258 432.3418 413.4375 431.4033 414.4609 c430.4629 415.4824 429.9941 416.9414 429.9941 418.832 c429.9941 420.668 430.4258 422.1016 431.2871 423.1309 c432.1494 424.1602 433.3301 424.6758 434.8311 424.6758 c436.3447 424.6758 437.4951 424.1816 438.2793 423.1953 c439.0654 422.207 439.4297 420.7695 439.373 418.8789 cf1 D436.9785 419.8828 m436.9785 422.0293 436.2344 423.1016 434.7451 423.1016 c433.959 423.1016 433.3545 422.7852 432.9336 422.1543 c432.4707 421.4688 432.252 420.4707 432.2803 419.168 c436.9785 419.8828 Lf*U*u0 D447.168 424.6621 m446.6631 422.7871 L446.2832 422.9121 445.8896 422.9746 445.4814 422.9746 c444.9912 422.9746 444.584 422.8828 444.2598 422.7012 c444.2598 413.1328 L441.6992 413.1328 L441.6992 423.8633 l442.9473 424.4648 444.7705 424.7324 447.168 424.6621 cf*U*u455.3418 416.3906 m455.3418 415.4375 454.9707 414.623 454.2266 413.9512 c453.4834 413.2754 452.5078 412.9395 451.3027 412.9395 c450.0117 412.9395 448.9658 413.2148 448.166 413.7617 c448.8398 415.4023 L449.3867 414.9648 450.0957 414.7461 450.9658 414.7461 c451.4844 414.7461 451.9063 414.8984 452.2285 415.2012 c452.5518 415.5 452.7129 415.8828 452.7129 416.3457 c452.7129 416.8223 452.5859 417.1973 452.3359 417.4707 c452.082 417.7441 451.6553 417.9941 451.0527 418.2168 c449.3301 418.877 448.4668 419.9355 448.4668 421.3945 c448.4668 422.3203 448.7988 423.0977 449.4648 423.7285 c450.1309 424.3594 450.9961 424.6758 452.0605 424.6758 c453.209 424.6758 454.1895 424.4102 455.002 423.877 c454.3711 422.3867 L453.8535 422.8086 453.251 423.0195 452.5654 423.0195 c452.0596 423.0195 451.6641 422.875 451.377 422.5879 c451.0898 422.2988 450.9473 421.9453 450.9473 421.5234 c450.9473 420.7813 451.5059 420.1855 452.6289 419.7363 c454.4375 419.0059 455.3418 417.8906 455.3418 416.3906 cf*U*u460.3574 427.6914 m460.3574 427.3398 460.2207 427.041 459.9473 426.7969 c459.6738 426.5508 459.3398 426.4277 458.9482 426.4277 c458.5566 426.4277 458.2227 426.5508 457.9482 426.7969 c457.6758 427.041 457.5391 427.3398 457.5391 427.6914 c457.5391 428.043 457.6758 428.3438 457.9482 428.5957 c458.2227 428.8477 458.5566 428.9746 458.9482 428.9746 c459.3398 428.9746 459.6738 428.8516 459.9473 428.6074 c460.2207 428.3613 460.3574 428.0566 460.3574 427.6914 cf460.2227 413.1328 m457.6621 413.1328 L457.6621 424.4707 L460.2227 424.4707 l460.2227 413.1328 Lf*U*u471.8682 413.7461 m470.8867 413.1992 469.5684 412.9258 467.915 412.9258 c466.248 412.9258 464.9512 413.4316 464.0254 414.4414 c463.0996 415.4492 462.6377 416.8594 462.6377 418.6699 c462.6377 420.4922 463.1016 421.9434 464.0264 423.0234 c464.9238 424.0605 466.1172 424.5801 467.6035 424.5801 c468.2617 424.5801 468.8301 424.5078 469.3066 424.3633 c469.3066 428.9414 L471.8682 428.9414 l471.8682 413.7461 Lf1 D469.3066 414.8223 m469.3066 422.9805 L468.9707 423.0781 468.5938 423.1289 468.1719 423.1289 c466.1797 423.1289 465.1855 421.6914 465.1855 418.8164 c465.1855 415.9844 466.1172 414.5684 467.9814 414.5684 c468.5986 414.5684 469.041 414.6543 469.3066 414.8223 cf*U*u0 D482.7852 413.7461 m481.7627 413.1992 480.3965 412.9258 478.6855 412.9258 c475.6035 412.9258 474.0625 414.0742 474.0625 416.373 c474.0625 417.7441 474.6855 418.7734 475.9336 419.4609 c476.9131 419.9922 478.3984 420.3574 480.3887 420.5527 c480.3887 421.1621 L480.3887 422.4082 479.6387 423.0313 478.1406 423.0313 c477.2012 423.0313 476.2559 422.8027 475.3027 422.3438 c474.7139 423.8145 L475.8906 424.3887 477.1875 424.6758 478.6025 424.6758 c481.3906 424.6758 482.7852 423.3711 482.7852 420.7656 c482.7852 413.7461 Lf1 D480.3887 414.666 m480.3887 419.3359 L479.0449 419.168 478.0938 418.9102 477.5352 418.5586 c476.8359 418.123 476.4863 417.4219 476.4863 416.4531 c476.4863 415.0527 477.2754 414.3496 478.8564 414.3496 c479.459 414.3496 479.9688 414.4551 480.3887 414.666 cf*U*u0 D494.3311 413.7461 m493.3506 413.1992 492.0322 412.9258 490.3789 412.9258 c488.7109 412.9258 487.415 413.4316 486.4883 414.4414 c485.5645 415.4492 485.1016 416.8594 485.1016 418.6699 c485.1016 420.4922 485.5645 421.9434 486.4902 423.0234 c487.3877 424.0605 488.5801 424.5801 490.0664 424.5801 c490.7266 424.5801 491.2939 424.5078 491.7695 424.3633 c491.7695 428.9414 L494.3311 428.9414 l494.3311 413.7461 Lf1 D491.7695 414.8223 m491.7695 422.9805 L491.4346 423.0781 491.0557 423.1289 490.6348 423.1289 c488.6445 423.1289 487.6484 421.6914 487.6484 418.8164 c487.6484 415.9844 488.582 414.5684 490.4463 414.5684 c491.0625 414.5684 491.5049 414.6543 491.7695 414.8223 cf*UU*u0 D390.3154 428.9141 m393.043 428.9141 L393.043 416.7266 L393.043 415.3867 393.7637 414.7148 395.208 414.7148 c395.8936 414.7148 396.5186 414.8281 397.084 415.0508 c397.084 428.9141 L399.8105 428.9141 L399.8105 413.8672 L398.5742 413.2871 397.0029 412.9961 395.0967 412.9961 c393.4141 412.9961 392.1689 413.3691 391.3652 414.1133 c390.666 414.7383 390.3154 415.5957 390.3154 416.6836 c390.3154 428.9141 Lf*Uu*u338.9473 369.1748 m335.4668 369.1748 L335.4668 365.6787 L338.5625 365.6787 L338.5625 364.2773 L335.4668 364.2773 L335.4668 359.0566 L333.3418 359.0566 L333.3418 370.5908 L338.9473 370.5908 l338.9473 369.1748 Lf*U*u346.3086 359.5029 m345.5605 359.1025 344.5586 358.9023 343.3066 358.9023 c341.0469 358.9023 339.918 359.7441 339.918 361.4287 c339.918 362.5059 340.457 363.3018 341.5352 363.8154 c342.2031 364.1338 343.209 364.3594 344.5527 364.4932 c344.5527 364.9395 L344.5527 365.8535 344.0039 366.3096 342.9063 366.3096 c342.2188 366.3096 341.5254 366.1406 340.8262 365.8018 c340.3965 366.8799 L341.2578 367.3008 342.207 367.5117 343.2441 367.5117 c345.2871 367.5117 346.3086 366.5566 346.3086 364.6465 c346.3086 359.5029 Lf1 D344.5527 360.1807 m344.5527 363.5996 L343.6348 363.4863 342.9844 363.3271 342.6035 363.1221 c341.9844 362.7939 341.6738 362.249 341.6738 361.4902 c341.6738 360.4629 342.2578 359.9502 343.4238 359.9502 c343.8672 359.9502 344.2441 360.0264 344.5527 360.1807 cf*U*u0 D353.2227 359.4727 m352.8027 359.0928 352.1504 358.9023 351.2676 358.9023 c350.1582 358.9023 349.3125 359.3701 348.7266 360.3037 c348.2344 361.084 347.9883 362.0596 347.9883 363.2305 c347.9883 364.4004 348.2383 365.3711 348.7422 366.1406 c349.3281 367.0547 350.1738 367.5117 351.2832 367.5117 c352.1152 367.5117 352.7559 367.3213 353.209 366.9414 c352.8086 365.8789 L352.5098 366.1045 352.1406 366.2178 351.6992 366.2178 c350.4863 366.2178 349.8809 365.2295 349.8809 363.2529 c349.8809 362.4951 349.9941 361.8555 350.2207 361.333 c350.5293 360.6162 351.0117 360.2578 351.668 360.2578 c352.1191 360.2578 352.4941 360.3809 352.793 360.627 c353.2227 359.4727 Lf*U*u361.1074 359.5498 m360.2773 359.1074 359.2148 358.8877 357.9199 358.8877 c355.7734 358.8877 354.7012 359.8213 354.7012 361.6904 c354.7012 367.3574 L356.5957 367.3574 L356.5957 361.582 L356.5957 360.6475 357.0566 360.1807 357.9805 360.1807 c358.4883 360.1807 358.8984 360.2734 359.2148 360.458 c359.2148 367.3574 L361.1074 367.3574 l361.1074 359.5498 Lf*U*u365.082 359.0566 m363.1875 359.0566 L363.1875 370.7148 L365.082 370.7148 l365.082 359.0566 Lf*U*u370.8555 359.1338 m370.6094 359.0205 370.291 358.9639 369.9023 358.9639 c369.1934 358.9639 368.6367 359.1621 368.2305 359.5576 c367.8242 359.9521 367.623 360.5039 367.623 361.2129 c367.623 366.1563 L366.6992 366.1563 L366.6992 367.3574 L367.623 367.3574 L367.623 370.1289 L369.5176 370.6533 L369.5176 367.3574 L370.8555 367.3574 L370.8555 366.1563 L369.5176 366.1563 L369.5176 361.3047 L369.5176 360.5859 369.8164 360.2266 370.4141 360.2266 c370.5371 360.2266 370.6836 360.2529 370.8555 360.3037 c370.8555 359.1338 Lf*U*u378.4316 359.5029 m377.6836 359.1025 376.6816 358.9023 375.4297 358.9023 c373.1699 358.9023 372.041 359.7441 372.041 361.4287 c372.041 362.5059 372.5801 363.3018 373.6582 363.8154 c374.3262 364.1338 375.332 364.3594 376.6758 364.4932 c376.6758 364.9395 L376.6758 365.8535 376.127 366.3096 375.0293 366.3096 c374.3418 366.3096 373.6484 366.1406 372.9492 365.8018 c372.5195 366.8799 L373.3809 367.3008 374.3301 367.5117 375.3672 367.5117 c377.4102 367.5117 378.4316 366.5566 378.4316 364.6465 c378.4316 359.5029 Lf1 D376.6758 360.1807 m376.6758 363.5996 L375.7578 363.4863 375.1074 363.3271 374.7266 363.1221 c374.1074 362.7939 373.7969 362.249 373.7969 361.4902 c373.7969 360.4629 374.3809 359.9502 375.5469 359.9502 c375.9902 359.9502 376.3672 360.0264 376.6758 360.1807 cf*U*u0 D386.8262 359.5654 m386.1074 359.165 385.1426 358.9639 383.9297 358.9639 c382.6582 358.9639 381.6875 359.3555 381.0195 360.1367 c380.3828 360.877 380.0645 361.8906 380.0645 363.1758 c380.0645 364.4102 380.3574 365.418 380.9395 366.2002 c381.5859 367.0742 382.5 367.5117 383.6875 367.5117 c384.1699 367.5117 384.584 367.46 384.9316 367.3574 c384.9316 370.7764 L386.8262 370.7764 l386.8262 359.5654 Lf1 D384.9316 360.3506 m384.9316 366.3408 L384.6855 366.4121 384.4102 366.4482 384.1035 366.4482 c382.6543 366.4482 381.9277 365.3936 381.9277 363.2842 c381.9277 361.2051 382.6074 360.165 383.9668 360.165 c384.416 360.165 384.7383 360.2266 384.9316 360.3506 cf*U*u0 D399.4688 359.5654 m398.75 359.165 397.7852 358.9639 396.5723 358.9639 c395.3008 358.9639 394.3301 359.3555 393.6621 360.1367 c393.0254 360.877 392.707 361.8906 392.707 363.1758 c392.707 364.4102 393 365.418 393.582 366.2002 c394.2285 367.0742 395.1426 367.5117 396.3301 367.5117 c396.8125 367.5117 397.2266 367.46 397.5742 367.3574 c397.5742 370.7764 L399.4688 370.7764 l399.4688 359.5654 Lf1 D397.5742 360.3506 m397.5742 366.3408 L397.3281 366.4121 397.0527 366.4482 396.7461 366.4482 c395.2969 366.4482 394.5703 365.3936 394.5703 363.2842 c394.5703 361.2051 395.25 360.165 396.6094 360.165 c397.0586 360.165 397.3809 360.2266 397.5742 360.3506 cf*U*u0 D408.0781 363.2549 m402.9941 362.5273 L403.1484 360.9736 403.9043 360.1963 405.2598 360.1963 c406.0605 360.1963 406.7578 360.3555 407.3535 360.6738 c407.8008 359.4883 L407.0918 359.0977 406.1777 358.9023 405.0586 358.9023 c403.7852 358.9023 402.8105 359.3135 402.1328 360.1348 c401.5176 360.8945 401.209 361.9258 401.209 363.2305 c401.209 364.4717 401.4805 365.4678 402.0254 366.2178 c402.6406 367.0801 403.5508 367.5117 404.752 367.5117 c405.9727 367.5117 406.8613 367.0898 407.416 366.2471 c407.8984 365.5166 408.1191 364.5195 408.0781 363.2549 cf1 D406.3223 364 m406.3223 365.5811 405.7773 366.3721 404.6895 366.3721 c403.9922 366.3721 403.4941 366.041 403.1953 365.3809 c402.9707 364.8857 402.8672 364.251 402.8887 363.4766 c406.3223 364 Lf*U*u0 D420.2891 359.5029 m419.7344 359.0723 418.9336 358.8564 417.8867 358.8564 c416.3672 358.8564 415.2129 359.498 414.4219 360.7813 c413.7637 361.8486 413.4355 363.1943 413.4355 364.8164 c413.4355 366.3975 413.7754 367.7373 414.4531 368.8359 c415.2539 370.1289 416.4023 370.7764 417.9023 370.7764 c418.8887 370.7764 419.6836 370.5605 420.2891 370.1289 c419.8262 368.8506 L419.375 369.1182 418.873 369.251 418.3184 369.251 c417.3223 369.251 416.5977 368.7275 416.1465 367.6807 c415.8184 366.9307 415.6543 365.9814 415.6543 364.832 c415.6543 363.7334 415.8281 362.7988 416.1777 362.0293 c416.6387 361.002 417.3535 360.4893 418.3184 360.4893 c418.873 360.4893 419.3594 360.6221 419.7813 360.8896 c420.2891 359.5029 Lf*U*u423.4766 369.7139 m423.4766 369.4463 423.373 369.2256 423.168 369.0508 c422.9629 368.877 422.7227 368.7891 422.4453 368.7891 c422.168 368.7891 421.9258 368.877 421.7207 369.0508 c421.5156 369.2256 421.4121 369.4463 421.4121 369.7139 c421.4121 369.9805 421.5156 370.2031 421.7207 370.3838 c421.9258 370.5625 422.168 370.6533 422.4453 370.6533 c422.7227 370.6533 422.9629 370.5654 423.168 370.3906 c423.373 370.2168 423.4766 369.9902 423.4766 369.7139 cf423.3848 359.0566 m421.4902 359.0566 L421.4902 367.3574 L423.3848 367.3574 l423.3848 359.0566 Lf*U*u432.0098 363.2549 m426.9258 362.5273 L427.0801 360.9736 427.834 360.1963 429.1895 360.1963 c429.9902 360.1963 430.6895 360.3555 431.2852 360.6738 c431.7305 359.4883 L431.0234 359.0977 430.1094 358.9023 428.9902 358.9023 c427.7168 358.9023 426.7422 359.3135 426.0645 360.1348 c425.4473 360.8945 425.1406 361.9258 425.1406 363.2305 c425.1406 364.4717 425.4121 365.4678 425.9551 366.2178 c426.5723 367.0801 427.4805 367.5117 428.6816 367.5117 c429.9043 367.5117 430.793 367.0898 431.3477 366.2471 c431.8301 365.5166 432.0508 364.5195 432.0098 363.2549 cf1 D430.252 364 m430.252 365.5811 429.709 366.3721 428.6211 366.3721 c427.9219 366.3721 427.4238 366.041 427.127 365.3809 c426.9004 364.8857 426.7969 364.251 426.8184 363.4766 c430.252 364 Lf*U*u0 D440.2617 359.0566 m438.3672 359.0566 L438.3672 364.9395 L438.3672 365.8633 437.875 366.3252 436.8906 366.3252 c436.4238 366.3252 435.998 366.248 435.6113 366.0947 c435.6113 359.0566 L433.7168 359.0566 L433.7168 366.9102 L434.5703 367.3115 435.6523 367.5117 436.9668 367.5117 c437.9121 367.5117 438.666 367.3311 439.2305 366.9727 c439.918 366.5303 440.2617 365.8633 440.2617 364.9707 c440.2617 359.0566 Lf*U*u447.1914 359.4727 m446.7715 359.0928 446.1191 358.9023 445.2363 358.9023 c444.127 358.9023 443.2813 359.3701 442.6953 360.3037 c442.2031 361.084 441.957 362.0596 441.957 363.2305 c441.957 364.4004 442.207 365.3711 442.7109 366.1406 c443.2969 367.0547 444.1426 367.5117 445.252 367.5117 c446.084 367.5117 446.7246 367.3213 447.1777 366.9414 c446.7773 365.8789 L446.4785 366.1045 446.1094 366.2178 445.668 366.2178 c444.4551 366.2178 443.8496 365.2295 443.8496 363.2529 c443.8496 362.4951 443.9629 361.8555 444.1895 361.333 c444.498 360.6162 444.9805 360.2578 445.6367 360.2578 c446.0879 360.2578 446.4629 360.3809 446.7617 360.627 c447.1914 359.4727 Lf*U*u450.7031 369.7139 m450.7031 369.4463 450.5996 369.2256 450.3945 369.0508 c450.1895 368.877 449.9492 368.7891 449.6719 368.7891 c449.3945 368.7891 449.1523 368.877 448.9473 369.0508 c448.7422 369.2256 448.6387 369.4463 448.6387 369.7139 c448.6387 369.9805 448.7422 370.2031 448.9473 370.3838 c449.1523 370.5625 449.3945 370.6533 449.6719 370.6533 c449.9492 370.6533 450.1895 370.5654 450.3945 370.3906 c450.5996 370.2168 450.7031 369.9902 450.7031 369.7139 cf450.6113 359.0566 m448.7168 359.0566 L448.7168 367.3574 L450.6113 367.3574 l450.6113 359.0566 Lf*U*u458.6797 359.5029 m457.9316 359.1025 456.9297 358.9023 455.6777 358.9023 c453.418 358.9023 452.2891 359.7441 452.2891 361.4287 c452.2891 362.5059 452.8281 363.3018 453.9063 363.8154 c454.5742 364.1338 455.5801 364.3594 456.9238 364.4932 c456.9238 364.9395 L456.9238 365.8535 456.375 366.3096 455.2773 366.3096 c454.5898 366.3096 453.8965 366.1406 453.1973 365.8018 c452.7676 366.8799 L453.6289 367.3008 454.5781 367.5117 455.6152 367.5117 c457.6582 367.5117 458.6797 366.5566 458.6797 364.6465 c458.6797 359.5029 Lf1 D456.9238 360.1807 m456.9238 363.5996 L456.0059 363.4863 455.3555 363.3271 454.9746 363.1221 c454.3555 362.7939 454.0449 362.249 454.0449 361.4902 c454.0449 360.4629 454.6289 359.9502 455.7949 359.9502 c456.2383 359.9502 456.6152 360.0264 456.9238 360.1807 cf*U*u0 D465.4258 361.4434 m465.4258 360.6631 465.123 360.0371 464.5156 359.5645 c463.9512 359.1338 463.2695 358.918 462.4688 358.918 c461.5234 358.918 460.7598 359.1182 460.1738 359.5186 c460.666 360.7197 L461.0664 360.4014 461.5859 360.2422 462.2227 360.2422 c462.582 360.2422 462.8848 360.3477 463.1309 360.5586 c463.377 360.7686 463.5 361.0537 463.5 361.4131 c463.5 362.0186 463.0938 362.4756 462.2832 362.7832 c461.0215 363.2656 460.3887 364.041 460.3887 365.1084 c460.3887 365.8271 460.6504 366.4121 461.1738 366.8643 c461.668 367.2959 462.2832 367.5117 463.0234 367.5117 c463.8652 367.5117 464.584 367.3164 465.1797 366.9258 c464.7168 365.833 L464.3359 366.1406 463.8945 366.2949 463.3926 366.2949 c463.0527 366.2949 462.7715 366.1973 462.5449 366.002 c462.3203 365.8066 462.207 365.54 462.207 365.2012 c462.207 364.6572 462.6172 364.2207 463.4395 363.8926 c464.7637 363.3584 465.4258 362.542 465.4258 361.4434 cf*U*u477.1133 362.3828 m477.1133 361.3252 476.7617 360.4736 476.0586 359.8262 c475.3555 359.1797 474.4746 358.8564 473.418 358.8564 c472.1758 358.8564 471.2207 359.0723 470.5527 359.5029 c471.0781 361.0127 L471.6113 360.6533 472.252 360.4736 473.002 360.4736 c473.5664 360.4736 474.0195 360.6328 474.3574 360.9512 c474.6953 361.2686 474.8652 361.7051 474.8652 362.2598 c474.8652 362.7529 474.6758 363.168 474.2949 363.5068 c474.0195 363.7539 473.6074 363.9893 473.0645 364.2158 c471.4629 364.8721 470.6621 365.9248 470.6621 367.373 c470.6621 368.3789 470.9863 369.1973 471.6387 369.8291 c472.291 370.46 473.125 370.7764 474.1426 370.7764 c475.2207 370.7764 476.0664 370.5605 476.6836 370.1289 c476.2051 368.8047 L475.6504 369.1533 475.0547 369.3281 474.4199 369.3281 c473.8945 369.3281 473.4883 369.1797 473.1953 368.8818 c472.9023 368.584 472.7559 368.1738 472.7559 367.6494 c472.7559 367.167 472.9414 366.7617 473.3105 366.4336 c473.5664 366.1973 473.9668 365.9658 474.5117 365.7402 c476.2461 365.0107 477.1133 363.8926 477.1133 362.3828 cf*U*u485.1367 363.1992 m485.1367 361.9775 484.875 360.9863 484.3516 360.2266 c483.7461 359.3438 482.8574 358.9023 481.6875 358.9023 c480.5176 358.9023 479.6289 359.3438 479.0234 360.2266 c478.5 360.9863 478.2383 361.9775 478.2383 363.1992 c478.2383 364.4316 478.5 365.4268 479.0234 366.1865 c479.6172 367.0693 480.5059 367.5117 481.6875 367.5117 c482.8672 367.5117 483.7559 367.0693 484.3516 366.1865 c484.875 365.4268 485.1367 364.4316 485.1367 363.1992 cf1 D483.2734 363.2227 m483.2734 365.291 482.7441 366.3252 481.6875 366.3252 c480.6289 366.3252 480.1016 365.291 480.1016 363.2227 c480.1016 361.2051 480.6289 360.1963 481.6875 360.1963 c482.7441 360.1963 483.2734 361.2051 483.2734 363.2227 cf*U*u0 D491.7578 359.4727 m491.3379 359.0928 490.6855 358.9023 489.8027 358.9023 c488.6934 358.9023 487.8477 359.3701 487.2617 360.3037 c486.7695 361.084 486.5234 362.0596 486.5234 363.2305 c486.5234 364.4004 486.7734 365.3711 487.2773 366.1406 c487.8633 367.0547 488.709 367.5117 489.8184 367.5117 c490.6504 367.5117 491.291 367.3213 491.7441 366.9414 c491.3438 365.8789 L491.0449 366.1045 490.6758 366.2178 490.2344 366.2178 c489.0215 366.2178 488.416 365.2295 488.416 363.2529 c488.416 362.4951 488.5293 361.8555 488.7559 361.333 c489.0645 360.6162 489.5469 360.2578 490.2031 360.2578 c490.6543 360.2578 491.0293 360.3809 491.3281 360.627 c491.7578 359.4727 Lf*U*u495.2695 369.7139 m495.2695 369.4463 495.166 369.2256 494.9609 369.0508 c494.7559 368.877 494.5156 368.7891 494.2383 368.7891 c493.9609 368.7891 493.7188 368.877 493.5137 369.0508 c493.3086 369.2256 493.2051 369.4463 493.2051 369.7139 c493.2051 369.9805 493.3086 370.2031 493.5137 370.3838 c493.7188 370.5625 493.9609 370.6533 494.2383 370.6533 c494.5156 370.6533 494.7559 370.5654 494.9609 370.3906 c495.166 370.2168 495.2695 369.9902 495.2695 369.7139 cf495.1777 359.0566 m493.2832 359.0566 L493.2832 367.3574 L495.1777 367.3574 l495.1777 359.0566 Lf*U*u503.2461 359.5029 m502.498 359.1025 501.4961 358.9023 500.2441 358.9023 c497.9844 358.9023 496.8555 359.7441 496.8555 361.4287 c496.8555 362.5059 497.3945 363.3018 498.4727 363.8154 c499.1406 364.1338 500.1465 364.3594 501.4902 364.4932 c501.4902 364.9395 L501.4902 365.8535 500.9414 366.3096 499.8438 366.3096 c499.1563 366.3096 498.4629 366.1406 497.7637 365.8018 c497.334 366.8799 L498.1953 367.3008 499.1445 367.5117 500.1816 367.5117 c502.2246 367.5117 503.2461 366.5566 503.2461 364.6465 c503.2461 359.5029 Lf1 D501.4902 360.1807 m501.4902 363.5996 L500.5723 363.4863 499.9219 363.3271 499.541 363.1221 c498.9219 362.7939 498.6113 362.249 498.6113 361.4902 c498.6113 360.4629 499.1953 359.9502 500.3613 359.9502 c500.8047 359.9502 501.1816 360.0264 501.4902 360.1807 cf*U*u0 D507.2051 359.0566 m505.3105 359.0566 L505.3105 370.7148 L507.2051 370.7148 l507.2051 359.0566 Lf*U*u515.8301 363.2549 m510.7461 362.5273 L510.9004 360.9736 511.6543 360.1963 513.0098 360.1963 c513.8105 360.1963 514.5098 360.3555 515.1055 360.6738 c515.5508 359.4883 L514.8438 359.0977 513.9297 358.9023 512.8105 358.9023 c511.5371 358.9023 510.5625 359.3135 509.8848 360.1348 c509.2676 360.8945 508.9609 361.9258 508.9609 363.2305 c508.9609 364.4717 509.2324 365.4678 509.7754 366.2178 c510.3926 367.0801 511.3008 367.5117 512.502 367.5117 c513.7246 367.5117 514.6133 367.0898 515.168 366.2471 c515.6504 365.5166 515.8711 364.5195 515.8301 363.2549 cf1 D514.0723 364 m514.0723 365.5811 513.5293 366.3721 512.4414 366.3721 c511.7422 366.3721 511.2441 366.041 510.9473 365.3809 c510.7207 364.8857 510.6172 364.251 510.6387 363.4766 c514.0723 364 Lf*U*u0 D522.2969 361.4434 m522.2969 360.6631 521.9941 360.0371 521.3867 359.5645 c520.8223 359.1338 520.1406 358.918 519.3398 358.918 c518.3945 358.918 517.6309 359.1182 517.0449 359.5186 c517.5371 360.7197 L517.9375 360.4014 518.457 360.2422 519.0938 360.2422 c519.4531 360.2422 519.7559 360.3477 520.002 360.5586 c520.248 360.7686 520.3711 361.0537 520.3711 361.4131 c520.3711 362.0186 519.9648 362.4756 519.1543 362.7832 c517.8926 363.2656 517.2598 364.041 517.2598 365.1084 c517.2598 365.8271 517.5215 366.4121 518.0449 366.8643 c518.5391 367.2959 519.1543 367.5117 519.8945 367.5117 c520.7363 367.5117 521.4551 367.3164 522.0508 366.9258 c521.5879 365.833 L521.207 366.1406 520.7656 366.2949 520.2637 366.2949 c519.9238 366.2949 519.6426 366.1973 519.416 366.002 c519.1914 365.8066 519.0781 365.54 519.0781 365.2012 c519.0781 364.6572 519.4883 364.2207 520.3105 363.8926 c521.6348 363.3584 522.2969 362.542 522.2969 361.4434 cf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF