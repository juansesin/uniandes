%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.2%%For: (Hugo) ()%%Title: (firma_fac_derecho.eps)%%CreationDate: 10/29/07 11:24 PM%%BoundingBox: 74 343 540 448%%HiResBoundingBox: 74.6724 343 539.9658 447.9961%%DocumentProcessColors: Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: 26.5 16 585.5 799%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -354 793 1.2 1589 965 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 32 8%%BeginData: 5640 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFD0FFFA8A8FD057DA8A8FD3BFFA8A87D7D7DA8A8FD%32FF7D27F8272751517C515127272752FFFF52A852FFFFFF7DA8FD0AFF7D%A8FFA87DFD05FF52FFFFFF7D7DFD11FFA8FD04272E5252522727275252FF%A87DA87DFFFFFFA87DFD0AFFA87DFFA87DFD05FF7DFFFFFFA87DFD0BFF7D%F87CA5CCFE7C7BCCFECC7B2727FFA8527D52A87DA8A87DFD05A8FFA87DA8%A87D7DFF527DA87DFFFF5252FFFFA85252FF7DFD0FFF522752A8FFFF7D7D%FFFFA87D2027FFFF27A852FF7DFFA87DA8FFA8FF7EFFFD04A87DA8FF7D52%FF7DFFFF7D27FFFFFF527DFFA8FD09FF5227C6FEC6FE2751C6FEC6FE2727%FFFF27A8525227525353287D52522753287D27A8FD0552A8F87D525227FF%A8522753525252FD0EFF59F8FD04FF5227FD04FF52F8FFA8527DFD04527D%FD08527D28537D7D5227527D27527D5252FFFF5252527D2752FD08FF7DF8%CCFECCC75227CCFECCFE5227FFA852A85252A8527D7D7D277D277D7D52FF%7D7D7D2E7D7E7D7D525252A852FFA852A852527DA8FD0EFF5227A8FFFFFF%5252A8FFFFFF5227FFFF27A8527D7D7D527D59277D527D7D28FFFD047D52%A8527E52522EFF52FFA8527E7D527D7DFD08FF5227A4FEC6A551517BFEC6%FE2727FFFF275252527D52527D7D27AF5252A852FF5252527DFD0452277D%7D5252FFFF52277D52527DFD0EFF7DF8A8FFFFA859277DFFFFFF52F8FFFF%522752527D525252A8F8FF52527D52A87D277D537D27522752527D5252FF%FF5252527D52A8FD08FF7DF8CCFEFE7B7C517CFECCFE5127FFFFFFA8FFA8%FFA8FFFFFFA8FFFFA8A8FFFFA8A8FFFFFF7DFFA8A8FFFFA8FFFFFFA8A8FF%FF7EFD0FFF5227A8FFFFA97D7D52FFFFFF5227FFFFFF7DA8FFA8A8A8FFFF%A8FFFF7DA8A8FF7DA8A8FFFFA8A8FF7DFFFFA8A8FFFFFF7DFFFFA8A8FD08%FF5226A4FEC6A57B7C51FEC6FE2727CAFF7DFD0DFFA87DFD0AFFA8A8FD17%FF7DF8A8FFFF7D7D7D52FFFFFF5221FFFFA8FD0EFF7DFD0AFFA884FD11FF%7DF8CCFECC7BA67B52FECCFE5127FFFF277DFD0CFF7DF8A8FD09FF7D27FD%17FF5327A8FFFFA87DA827FFFFFF5227FFFFF8A8FD0CFF7D277DFD09FF7D%27FD11FF5227A4FEC69F9FA527CCC6FE2727CFFFF884FF7D52AFFFFF7D7E%FD04FF272752FFFFA8527DA8FFA87D2752FFFF527DFFFF7D7DA8FD0EFF7D%F8A8FFFFA8A8A827A8FFFF5227FFA8277DFF7D7DA8FFA9A87DFD04FF52F8%52FFFFA87D7DFFFFFF7D5227FFFF7D7DFFFFA87DFD09FF7DF8CCFECC7BCC%A527C7FEFE5227FFA927A87D275227FF27527DFFFFFFA8275227FFA8F859%277DFF52525227FF2752277DA82752A8FD0EFF5227A8FFFFA8A8FF27FFFF%FF5227FFFFF8A87E272752FF53277DFD04FF277D27FFA827522852FF5252%2827FF52285253FF27527DFD08FF5227A4FEC69FA4A5F8CCC6FE2727FFFF%F8A8277DFF277D2727FD04FF5327AFF8A8A827A87D27A8F8FF7D527D27A8%52277DF8A8FD0FFF59F8A8FFFF7DFFA8277DFFFF52F8FFA8277D5252FFF8%7D2752FD04FF5227A8277DA9F8FF7D27A827A87D27A8F8FF52277D277DFD%09FF7DF8CCFECCC7CCA527C7CCFE5227FFFF277D277DFF277EA8272EFFFF%FF2727522753FFF8FF7D527D27FF7D52A8277D52A8FF7DF8A8FD0EFF5227%A8FD05FF27AFFFFF5227FFFF27A8277DFF277DA82752FFFFFF52277DF87D%A827A8A827A827FF7D527D2752597DFF52277DFD08FF5227A4FEC6FEC6C7%27CCC6FE2727FFFFF8A82752A8277EFF7D27A8FFA8277DA82727A827A87D%27A8F8A87D52A8277DFFA8FFA82727FD0EFF53F8A8FD05FF27A8FFFF52F8%FFA8277D5252FFF87DFF7EF8A8FFFFF87DA852F8A8F8AF7D27A827A87D27%A8F8A8FD04FF2727FD08FF7DF8C7FEFEFECCA552FECCFE2727FFFF27A8A8%272752FF282752FFFF7D27FFFFA827A827FF7D52FF7D272852FF5252277D%7D2727A8FD0EFF7D27A8FD05FF52FFFFFF2727FFFF27A8A8272752FF5227%52FFFF7D27FFFFA8277D52A87D27FF52272752FF7D27527DA827277DFD08%FFCF5251FEC6FEC67C7BFEA45127A8FFFFA8FFFFFF84FFFFA8A8FFFFFFA8%A8FFFFFFA8A8A8FFFFA8FFFFA87DFFFFFFA8A8A8FF7DFD11FF277DFD04FF%537DFFFF52277DFFA8A8A8FFA8A8A8FF7DA8A8FFFFFFA8FFFFFFA8AFA8FF%A8A8FFFF7D84A8FFFFA87DAFA8847EFD0BFFA8CDCCFECC277C7B527DFD39%FF7DFD04FF527DA8527DA8FD34FFCFCFC9A87DA8A8FD3FFF7D7D7DA8FD42%FF7D7DFD06FFA8A8FD04FFA8FFFFA8FD04FF7D7EFD08FFA8FD22FF7DA8FD%06FFA8FD05FFA8FFFFFFA8FFFFFF7DA8FD08FFA8FD1CFF27A87D7E7D7D7D%A852527D7D847D27FFA8527D7DA8A82E52FD057D84A87D277DA87DA8FD1E%FF527DA87DA87DA87D52277D7DA87D52FFFF2E7D7DA8A85252A87DA87DA8%7DFF7D5259FF7DFD19FF527D7D277D7D7D527D52A82752527DFF7D525227%A8A87D7D5227FD05527D7D525952A8FD1EFF52A87D5252A8527D527D7D52%527D52FF7D7D52277DFF7DA82752527D525252A8525352527DFD18FF52FF%2752527D2752537D5252527D52FF7D525252A8FF277D52527D7E527D597D%537D52527DFD1EFF53A85252527D52527D525227535252FF7D525227A8A8%52527D277D7D7D527D527D52522E84FD1BFFA8FFA8FFA8FFA8FFA8FFA8FF%FFFFA8FFA8FFFFA9FFFFA8FFFFFFA8FFA8FFA9FFA8FD1FFFA8FFA8FFFFA8%A8A8FFFFA8A9FFFFA8FFFFA8FFA9A8FF84FFFFA8A8FFFFA8FFA8A8FFA8A9%FDFCFFFDFCFFFD8CFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 7 Bd[<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br[0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 7 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br[0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.0313 29.4307 L3.0313 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.8906 50.123 L5.8906 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.8906 50.123 m25.0264 50.123 L25.0264 32.4961 L5.8906 32.4961 L5.8906 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0235 0.64 0.78 0.0039 k 0.0235 0.64 0.78 0.0039 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.3057 48.793 L8.3057 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1059 0.9294 0.8314 0.0196 k 0.1059 0.9294 0.8314 0.0196 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.6758 L28.9355 1.6758 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.957 L47.6777 4.957 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.957 L30.0527 4.957 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.4315 0 0.8301 0 k 0.4315 0 0.8301 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.5029 L47.4199 6.5029 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4941 0.9412 0 0 k 0.4941 0.9412 0 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.7529 26.1445 L2.7529 2.1699 L25.4316 2.1699 L25.4316 26.1445 Lf*U*u4.9561 7.4004 m22.582 7.4004 L22.582 25.0273 L4.9561 25.0273 L4.9561 7.4004 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.6738 m4.9561 5.6738 L4.9561 25.0273 L22.582 25.0273 L22.582 5.6738 Lf20.3887 21.3281 m7.5811 21.3281 L7.5811 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.9137 0 0.498 0 k 0.9137 0 0.498 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.9355 8.7363 m21.0371 8.7363 L21.0371 22.8379 L6.9355 22.8379 L6.9355 8.7363 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8235 0 0.0039 0 k 0.8235 0 0.0039 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0275 0.2078 0.4431 0.0039 k 0.0275 0.2078 0.4431 0.0039 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.8902 0 0 k 0 0.8902 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7884.8833 8586.9551 m-7793.0479 8586.9551 L-7793.0479 8582.6758 L-7884.8833 8582.6758 L-7884.8833 8586.9551 Ln0 O0.695313 0.671875 0.636719 0.738281 k-7884.6631 8584.2754 m-7885 8584.3418 -7884.4814 8584.5313 -7884.8833 8584.3887 C-7884.8379 8584.2705 -7884.7725 8584.1816 -7884.6631 8584.2754 Cf-7794.1675 8584.4414 m-7795.2524 8585.2041 -7796.6816 8584.4336 -7797.8701 8584.9199 C-7798.0098 8584.9521 -7797.8345 8584.502 -7798.1484 8584.6025 C-7799.3008 8585.1953 -7801.1162 8584.8418 -7802.5195 8584.3848 C-7802.4346 8584.2666 L-7802.7017 8584.1816 -7803.0283 8584.5723 -7803.3115 8584.5176 C-7803.3135 8584.4395 -7803.2207 8584.4063 -7803.2861 8584.2979 C-7803.3574 8584.5352 -7803.7983 8584.4082 -7803.9185 8584.584 C-7804.0303 8584.4922 -7804.0195 8584.3047 -7804.1641 8584.2002 C-7804.3262 8584.4697 L-7804.7769 8585.1094 -7805.4209 8584.4258 -7806.0361 8584.7559 C-7806.0063 8584.6934 -7805.9453 8584.6445 -7805.9941 8584.584 C-7806.9814 8584.9727 -7808.2168 8584.8994 -7809.3208 8585.043 C-7809.2769 8584.9482 -7809.2363 8584.7754 -7809.3008 8584.668 C-7809.3555 8584.9512 -7809.6963 8585.0225 -7809.9922 8585.0781 C-7810.1255 8584.7871 -7810.4995 8585.3438 -7810.8467 8585.1826 C-7810.8169 8585.1191 L-7811.0732 8585.4238 -7811.1973 8584.9434 -7811.4053 8585.3086 C-7811.5684 8585.0801 L-7811.6807 8585.4902 -7811.9395 8584.8672 -7812.1514 8585.0762 C-7812.1445 8585.1602 L-7812.3442 8585.2598 -7812.4482 8585.0537 -7812.6338 8585.123 C-7812.6514 8585.0762 L-7813.0854 8585.1826 -7813.3379 8584.9551 -7813.3271 8585.2754 C-7813.4795 8585.0186 -7812.9063 8585.1582 -7813.1455 8584.7842 C-7814.5732 8585.1152 -7816.0459 8585.0498 -7817.4834 8585.0566 C-7817.6465 8584.9277 -7817.7505 8584.8887 -7817.7871 8584.7666 C-7817.9307 8584.832 -7818.3281 8584.8262 -7818.4585 8584.9902 C-7818.4102 8584.9834 -7818.5513 8584.8262 -7818.6274 8584.8105 C-7818.8887 8584.6895 -7818.9131 8585.1621 -7819.2002 8585.0186 C-7819.0859 8584.9336 -7819.0469 8584.8301 -7819.0854 8584.7109 C-7819.3301 8584.9609 -7819.6577 8584.9209 -7819.9473 8585.002 C-7819.9023 8584.9482 -7819.8325 8584.916 -7819.8433 8584.8154 C-7820.1602 8585.0986 -7820.4209 8584.7559 -7820.6982 8584.9346 C-7820.5947 8584.75 L-7821.0415 8584.5254 -7820.7266 8585.1367 -7821.1128 8585.0039 C-7821.02 8584.9453 -7821.0527 8584.873 -7821.0361 8584.7979 C-7821.3965 8585.1338 -7821.9795 8585.0225 -7822.3389 8585.1367 C-7822.3174 8585.1113 -7822.3232 8585.0605 Y-7822.7148 8585.1025 -7823.1245 8584.998 -7823.5552 8585.1445 C-7823.7119 8585.0625 -7823.5039 8584.6934 -7823.9185 8584.7617 C-7823.9033 8585.1328 -7824.6221 8584.9141 -7824.3779 8585.334 C-7824.7319 8585.2734 -7825.2925 8585.1338 -7825.5283 8585.2598 C-7825.3691 8585.1191 -7825.7007 8584.8066 -7825.4063 8584.7754 C-7825.6289 8584.5498 L-7825.5957 8584.3984 -7825.3999 8584.6016 -7825.4707 8584.4102 C-7825.6182 8584.4258 -7826.0479 8584.5723 -7826.1797 8584.5117 C-7826.4531 8584.7393 -7826.7041 8585.1641 -7827.1465 8585.2109 C-7826.9385 8585.0664 -7827.2646 8584.8018 -7827.1235 8584.7383 C-7827.7407 8585.4482 L-7827.8877 8585.4658 -7827.7725 8585.1563 -7827.9854 8585.2529 C-7827.9746 8585.3506 -7828.0674 8585.4121 -7828.1318 8585.4922 C-7828.1875 8585.4482 -7828.7441 8585.584 -7828.8081 8585.2178 C-7828.8735 8585.0762 -7828.5684 8585.1426 -7828.7314 8585.0117 C-7829.0029 8585.0146 -7829.0151 8585.1406 -7829.2871 8585.1465 C-7829.2925 8585.0977 L-7829.4717 8585.043 -7829.8213 8585.2529 -7829.6265 8585.4551 C-7829.5015 8585.4658 -7829.6738 8585.2354 -7829.4888 8585.3418 C-7829.6152 8585.5537 -7829.9312 8585.6133 -7830.2031 8585.6162 C-7830.1104 8585.5586 -7830.1216 8585.4609 -7830.0845 8585.3574 C-7830.4497 8585.6445 -7830.8369 8585.7354 -7831.2451 8585.8555 C-7831.2515 8586.0293 -7831.0928 8585.5391 -7831.0327 8585.6309 C-7831.5557 8585.3896 -7832.1128 8585.9727 -7832.5479 8585.6201 C-7832.4766 8585.5898 -7832.5098 8585.8672 -7832.5146 8585.8184 C-7832.7666 8585.7969 -7832.7549 8585.5449 -7832.9189 8585.6377 C-7832.9355 8585.4902 -7833.1255 8585.6855 -7833.2944 8585.7305 C-7833.3818 8585.8369 -7833.3384 8585.6582 -7833.1914 8585.6426 C-7833.4268 8585.7666 -7834.3691 8585.9941 -7834.9131 8585.7793 C-7834.9023 8585.877 -7835.2471 8586.1377 -7835.3721 8586.127 C-7835.3232 8585.8984 L-7835.4375 8585.7617 -7835.7422 8585.918 -7835.7632 8585.7227 C-7836.0303 8586 -7834.7344 8585.4863 -7835.0957 8585.7002 C-7835.1895 8585.5098 -7835.5991 8586.0645 -7835.5215 8585.7529 C-7835.7725 8585.7617 -7836.0161 8586.0186 -7836.2559 8585.8047 C-7836.1865 8585.8418 -7836.0522 8585.4873 -7836.2549 8585.5039 C-7836.6123 8585.5449 -7836.3564 8585.6133 -7836.6465 8585.6895 C-7836.8281 8585.7832 L-7836.8398 8586.0059 -7837.1475 8585.7529 -7837.0146 8586.002 C-7837.0586 8585.8184 -7837.5337 8586.1152 -7837.4971 8585.7461 C-7837.4473 8585.4551 L-7837.6016 8585.4766 -7837.7002 8585.7617 -7837.8213 8585.8896 C-7837.8418 8585.8633 -7837.8823 8585.8047 -7837.8745 8585.7578 C-7837.8994 8586.2031 -7838.2432 8585.7207 -7838.4268 8586.0645 C-7838.7505 8585.9102 -7839.2495 8586.0498 -7839.4023 8585.7734 C-7839.6514 8585.9082 -7839.8784 8586.0674 -7840.1621 8585.9727 C-7840.1055 8585.9307 -7840.0283 8585.918 -7840.0122 8585.8223 C-7840.1904 8585.6914 -7840.2344 8585.8086 -7840.3975 8585.8809 C-7840.3608 8585.8145 -7840.7539 8585.6201 -7840.9521 8585.4629 C-7841.1992 8585.5957 -7841.1143 8585.8359 -7841.1392 8585.9824 C-7841.3652 8585.543 -7841.8379 8586.2656 -7842.1211 8585.8672 C-7842.0352 8585.8066 -7841.7598 8585.6514 -7841.9658 8585.541 C-7842.1919 8585.1025 -7842.4219 8585.8643 -7842.7861 8585.6543 C-7842.6968 8586.0186 L-7842.8594 8585.793 -7843.2334 8586.2305 -7843.1963 8585.8594 C-7843.3184 8585.9902 -7843.6265 8585.7383 -7843.5859 8586.0938 C-7844.1846 8585.793 -7845.0425 8586.2754 -7845.4102 8585.6377 C-7845.4961 8585.6973 -7845.7104 8585.6367 -7845.6665 8585.8193 C-7845.5239 8586.0176 -7845.4673 8585.6777 -7845.4141 8585.8125 C-7845.4912 8585.8232 -7845.5078 8585.9209 -7845.5161 8585.9697 C-7845.7021 8585.8887 -7845.8486 8585.8633 -7845.6729 8585.5674 C-7846.0869 8585.3477 -7846.1001 8586.1719 -7846.6274 8586.0322 C-7846.6035 8585.8857 -7846.6436 8585.8301 -7846.7979 8585.8535 C-7847.0903 8586.1055 L-7847.4312 8586.0469 -7847.2842 8585.7705 -7847.2925 8585.5215 C-7847.4746 8585.5645 -7847.6973 8585.5527 -7847.7803 8585.7383 C-7848.0015 8585.4258 L-7847.8398 8585.6514 -7848.1514 8585.5762 -7848.2368 8585.6367 C-7848.1514 8585.5762 L-7848.1846 8585.4697 -7848.3955 8585.5352 -7848.5024 8585.5664 C-7848.4766 8585.7207 -7848.2617 8585.7832 -7848.1445 8585.8281 C-7848.2373 8585.9375 -7848.3823 8585.9121 -7848.5059 8586.041 C-7848.4648 8585.7969 -7848.8027 8585.8672 -7848.9473 8585.8418 C-7849.1133 8585.7891 -7849.1348 8586.0605 -7849.1831 8586.0527 C-7849.1875 8585.9258 -7849.4541 8586.0313 -7849.3247 8585.8535 C-7849.2681 8585.8125 -7849.1953 8585.9766 -7849.1016 8585.8643 C-7849.2109 8585.7705 -7849.1982 8585.5498 -7849.4258 8585.7109 C-7849.5967 8585.832 -7849.3818 8586.1934 -7849.7061 8586.0391 C-7849.6211 8585.9785 -7849.6055 8585.8809 -7849.5391 8585.793 C-7849.8433 8585.666 L-7849.8564 8585.8887 L-7849.8975 8585.832 -7849.8691 8585.8125 -7849.8877 8585.7832 C-7849.9785 8586.0176 -7850.3521 8585.8555 -7850.4209 8586.1191 C-7850.5742 8586.1426 -7850.7441 8585.9648 -7850.8906 8585.9395 C-7850.8623 8585.9199 L-7851.0415 8585.7891 -7851.2793 8585.875 -7851.4297 8586.0254 C-7851.4219 8585.9766 L-7851.5195 8585.959 -7851.7505 8585.9941 -7851.8735 8586.125 C-7852.1201 8585.957 -7851.9561 8585.2842 -7852.2295 8585.5645 C-7852.48 8585.5723 -7852.6221 8585.9727 -7852.5215 8586.1152 C-7852.9717 8585.9648 -7853.4834 8586.3281 -7853.9009 8585.9824 C-7853.9658 8586.0723 -7853.9248 8586.1289 -7854.0586 8586.1816 C-7854.7197 8586.0938 -7855.4551 8586.4453 -7855.9814 8586.0078 C-7855.79 8585.9141 -7855.9688 8585.7842 -7855.9727 8585.6582 C-7856.1309 8585.8574 -7856.1631 8585.4512 -7856.2197 8585.793 C-7856.2041 8585.9941 -7856.2197 8586.0918 -7856.0337 8586.1729 C-7856.4282 8586.2813 -7857.0283 8586.2813 -7857.2471 8586.0938 C-7857.1377 8586.1865 -7857.2227 8586.248 -7857.3086 8586.3086 C-7857.2803 8585.9873 -7857.5713 8585.9395 -7857.7915 8586.0527 C-7857.8223 8586.248 L-7857.9658 8586.0469 L-7858.0503 8586.1094 -7858.0591 8586.457 -7858.2773 8586.2695 C-7858.2891 8586.1934 -7858.3018 8586.1162 -7858.3418 8586.0605 C-7858.5693 8586.2207 -7858.8906 8586.4922 -7859.1377 8586.3262 C-7859.3398 8586.041 L-7859.4453 8586.0723 -7859.6235 8586.2441 -7859.4375 8586.3262 C-7859.8594 8586.1543 -7860.1309 8586.1328 -7860.2646 8585.8857 C-7860.9912 8586.4873 -7862.0459 8586.5117 -7862.8906 8586.4688 C-7862.8652 8586.3223 L-7863.0923 8586.1855 -7862.9834 8586.5781 -7863.1416 8586.4766 C-7863.0684 8586.3369 -7863.3145 8586.1729 -7863.1362 8586.002 C-7863.4609 8585.8477 -7863.5547 8586.2559 -7863.7656 8586.3223 C-7863.7979 8586.5146 -7863.5957 8586.1992 -7863.6367 8586.4434 C-7863.6729 8586.5117 -7864.0859 8586.293 -7864.1362 8586.584 C-7864.2178 8586.4697 -7864.1543 8586.2559 -7864.1104 8586.1377 C-7864.3086 8586.2793 L-7864.5513 8585.9395 -7863.7559 8585.6719 -7864.0107 8585.2529 C-7864.1934 8585.2979 L-7864.3682 8584.9941 -7863.71 8584.9551 -7864.1689 8584.8506 C-7864.3682 8584.9941 -7864.5381 8585.416 -7864.3608 8585.5449 C-7864.7754 8585.625 -7864.5527 8586.2383 -7864.9985 8586.2139 C-7865.1201 8586.043 -7864.6416 8586.1729 -7864.7275 8585.9336 C-7864.9375 8585.6992 -7865.1484 8586.0645 -7865.3354 8585.9824 C-7865.1279 8586.0918 -7865.3032 8586.3857 -7865.4375 8586.4395 C-7865.6641 8586.3018 -7865.29 8586.1641 -7865.6113 8586.1338 C-7865.6641 8586.3018 -7865.9595 8586.4277 -7865.7041 8586.5449 C-7865.8203 8586.9258 -7866.0381 8586.4395 -7866.2129 8586.7344 C-7866.3174 8586.4658 -7865.8823 8586.1152 -7866.2354 8585.9814 C-7866.1792 8586.2393 -7866.6704 8586.332 -7866.4839 8586.7139 C-7866.6221 8586.6406 -7866.6367 8586.4375 -7866.5361 8586.2793 C-7866.7334 8586.1201 -7867.0151 8586.75 -7867.0801 8586.2383 C-7867.1479 8586.502 L-7867.21 8586.416 -7867.2983 8586.3506 -7867.3994 8586.209 C-7867.5732 8586.2041 -7867.96 8586.5664 -7867.9443 8586.168 C-7868 8586.209 -7868.3975 8586.1914 -7868.2441 8586.4658 C-7867.9971 8586.6338 -7867.96 8586.2656 -7867.8223 8586.6377 C-7867.9971 8586.334 -7868.1787 8586.6777 -7868.3213 8586.7793 C-7868.3447 8586.625 L-7868.4297 8586.6855 -7868.6255 8586.6514 -7868.6787 8586.8184 C-7868.6133 8586.7305 -7868.6475 8586.625 -7868.7148 8586.5879 C-7868.8042 8586.8223 L-7869.1494 8586.9395 -7868.8857 8586.4102 -7869.2217 8586.4785 C-7868.9663 8586.2969 L-7869.0225 8586.3359 -7869.1367 8586.1162 -7869.2979 8586.1895 C-7869.3604 8586.4033 -7869.4775 8586.6602 -7869.5313 8586.8262 C-7869.7207 8586.9199 -7869.6162 8586.585 -7869.8027 8586.8047 C-7869.5586 8586.5469 L-7869.5215 8586.4766 -7869.7231 8586.1934 -7869.9761 8586.1992 C-7870.1377 8586.2734 -7870.3887 8586.582 -7870.1338 8586.6992 C-7870.2607 8586.7031 -7870.4385 8586.5723 -7870.3379 8586.416 C-7870.6255 8586.4902 -7870.2998 8586.6465 -7870.5479 8586.7793 C-7870.6494 8586.6367 -7870.9658 8586.4336 -7871.1563 8586.2266 C-7870.8975 8585.8682 L-7871.0693 8585.8643 L-7870.8467 8585.5781 -7871.1826 8585.6465 -7871.0566 8585.3438 C-7871.1743 8585.2969 -7871.3169 8585.3994 -7871.4307 8585.4785 C-7871.0864 8585.9629 -7871.8159 8586.1406 -7871.7158 8586.582 C-7872.1875 8586.7031 -7872.0107 8585.5078 -7872.5024 8586.1992 C-7872.4219 8586.3145 -7872.6533 8586.6504 -7872.3564 8586.5225 C-7872.6494 8586.4746 -7872.5557 8586.9658 -7872.9014 8586.7832 C-7872.6455 8586.6016 -7873.1763 8586.3359 -7872.8066 8586.0723 C-7872.8311 8586.2178 -7872.6001 8586.1826 -7872.5435 8586.1426 C-7872.6641 8585.9727 -7872.5186 8585.6973 -7872.8184 8585.6973 C-7873.0015 8585.7393 -7873.2524 8585.748 -7873.2158 8585.9785 C-7873.2085 8586.2314 -7872.9365 8585.9512 -7873.0537 8586.207 C-7873.4185 8586.2949 -7873.4795 8585.9102 -7873.6304 8586.3594 C-7873.3999 8586.3232 -7873.3423 8586.584 -7873.3467 8586.7578 C-7873.6143 8586.8633 L-7873.5625 8586.6953 L-7873.9922 8586.5742 -7873.6895 8587 -7874.1055 8586.9551 C-7874.3008 8586.623 L-7874.2017 8586.3369 -7873.6953 8586.75 -7873.7695 8586.2842 C-7874.04 8586.2656 -7874.1299 8586.502 -7874.3848 8586.3818 C-7874.3281 8586.3418 -7874.2505 8586.3301 -7874.1943 8586.2891 C-7874.2915 8586.2734 -7874.3877 8585.6563 -7874.7734 8586.0176 C-7874.9727 8586.1582 -7874.8262 8586.1826 -7874.8311 8586.3574 C-7875.2656 8586.4102 -7875.3955 8586.5879 -7875.6753 8586.6152 C-7875.6177 8586.2754 -7876.1699 8586.582 -7875.8608 8586.2344 C-7875.7188 8586.4336 -7875.0903 8586.4141 -7874.9365 8586.0898 C-7875.0947 8585.6865 -7874.5952 8586.1465 -7874.5024 8585.7383 C-7874.8506 8585.7285 -7874.8335 8585.332 -7874.8896 8585.0723 C-7874.9863 8585.0537 -7875.0801 8585.1641 -7875.1377 8585.2041 C-7875.1787 8585.4482 -7875.0522 8585.4453 -7875.0449 8585.6973 C-7875.4336 8585.6309 -7875.8081 8585.7666 -7876.0225 8586.0059 C-7876.1523 8585.8848 -7876.1113 8585.6406 -7875.9575 8585.6162 C-7876.4199 8585.6895 -7876.9141 8585.6563 -7877.3535 8585.582 C-7877.0693 8585.9814 -7877.8433 8585.6758 -7877.6494 8586.0078 C-7877.4141 8586.0977 -7877.2119 8586.3818 -7877.3418 8586.5605 C-7877.4888 8586.5352 -7877.3369 8586.3857 -7877.3984 8586.3008 C-7877.5859 8586.5186 -7877.6895 8585.9512 -7877.8735 8586.2949 C-7877.4512 8586.166 -7877.7915 8585.8086 -7877.7139 8585.4961 C-7878.0186 8585.6719 -7877.7007 8585.2734 -7878.0024 8585.2734 C-7878.3057 8585.4473 -7878.6787 8585.584 -7879.0161 8585.6514 C-7879.4399 8585.3555 -7880.0898 8585.6465 -7880.4683 8585.6582 C-7880.6665 8585.5 -7880.5322 8585.1465 -7880.7471 8585.085 C-7880.9995 8585.0918 -7880.5601 8585.4658 -7880.9336 8585.3047 C-7880.8975 8585.2344 L-7881.0107 8585.3154 -7881.5825 8584.9941 -7881.6929 8585.502 C-7881.5776 8585.1191 L-7881.6475 8585.084 -7881.7119 8585.1719 -7881.7695 8585.2129 C-7881.7725 8585.0879 -7881.8535 8584.9746 -7881.7402 8584.8926 C-7881.9707 8584.6289 -7882.2241 8584.9346 -7882.4746 8584.9453 C-7882.3135 8585.1719 L-7882.7422 8585.3496 -7883.0293 8585.125 -7883.4443 8585.2041 C-7883.4316 8584.9824 L-7883.6787 8585.1152 L-7883.6182 8584.8994 -7883.8447 8584.7617 -7883.9751 8584.9414 C-7883.3335 8584.3984 L-7883.1553 8584.5293 -7883.5283 8584.666 -7883.4165 8584.8848 C-7883.3213 8585.0762 -7882.9375 8585.0146 -7882.8755 8584.8018 C-7883.0225 8584.7773 -7883.0293 8584.8262 -7883.1436 8584.9063 C-7883.1919 8584.5977 -7882.9688 8584.6094 -7882.8584 8584.4033 C-7882.9355 8584.416 -7883.0449 8584.3223 -7883.0615 8584.4199 C-7882.9102 8584.2695 -7882.7578 8584.2461 -7882.5059 8584.2383 C-7882.6763 8584.3594 -7882.4131 8584.4297 -7882.4775 8584.5176 C-7882.4575 8584.2461 -7882.2168 8584.1621 -7881.9053 8584.2383 C-7881.6831 8584.5527 -7881.3208 8584.0361 -7880.96 8584.123 C-7881.1064 8584.3984 -7881.2935 8584.6191 -7881.5127 8584.7305 C-7881.2861 8584.8682 -7881.2607 8584.7227 -7881.0337 8584.8613 C-7880.9238 8584.6563 -7880.8457 8584.3418 -7880.5503 8584.2168 C-7880.5342 8584.4199 L-7880.2666 8584.3154 -7880.2666 8584.0146 -7879.9258 8584.0723 C-7879.3418 8584.1719 -7878.7407 8584.1719 -7878.2949 8584.1973 C-7878.2783 8584.3994 L-7878.0303 8583.9658 -7877.4521 8584.2393 -7877.1182 8584.0469 C-7876.5503 8584.2422 -7875.8848 8583.8535 -7875.5938 8584.2031 C-7874.5913 8584.0469 -7873.7148 8583.8945 -7872.6768 8583.9688 C-7872.8516 8584.2637 L-7872.6655 8584.0469 -7872.7305 8584.4336 -7872.5479 8584.3896 C-7872.7578 8584.1543 -7872.2949 8584.084 -7872.1665 8583.9033 C-7871.7041 8584.1328 -7871.1104 8583.8818 -7870.7007 8583.6758 C-7870.6846 8583.8789 L-7870.2705 8583.498 -7869.7759 8583.832 -7869.2598 8583.8945 C-7869.2007 8583.9785 -7869.1074 8584.1689 -7868.9536 8584.1465 C-7868.6738 8583.8184 -7868.5273 8583.8418 -7868.1167 8583.6367 C-7867.8169 8583.6367 -7867.3301 8583.7178 -7867.0254 8583.8457 C-7865.8975 8583.3848 -7864.7456 8583.6797 -7863.5732 8583.4023 C-7863.4888 8583.6406 L-7862.3521 8583.1309 -7860.9541 8583.5938 -7859.9839 8583.332 C-7860.0776 8583.7393 L-7859.7734 8583.8643 -7859.3843 8583.6328 -7859.4619 8583.3438 C-7859.1567 8583.4688 -7858.7007 8583.1465 -7858.5068 8583.4814 C-7858.1953 8583.5566 -7858.1255 8583.293 -7857.8662 8583.2383 C-7857.2422 8583.3926 -7857.0107 8583.3574 -7856.4224 8583.2813 C-7856.5684 8583.2559 L-7856.6328 8583.3457 -7856.6387 8583.5186 -7856.4922 8583.5449 C-7856.2725 8583.4307 -7855.6846 8583.6543 -7855.9033 8583.168 C-7855.2754 8583.4482 -7854.4385 8582.9395 -7853.8271 8583.3184 C-7853.8789 8583.1855 -7853.7246 8583.1602 -7853.6602 8583.0703 C-7853.1089 8583.0645 -7852.5293 8583.3359 -7852.0898 8583.1094 C-7852.0024 8583.1758 -7852.2295 8583.3359 -7852.0049 8583.3496 C-7851.8721 8583.2979 -7852.0024 8583.1758 -7851.8384 8583.1016 C-7850.9453 8582.8535 -7850.0303 8583.3574 -7849.2188 8583.293 C-7847.7754 8583.0361 -7846.2695 8583.166 -7844.8867 8583.123 C-7844.9023 8583.2207 L-7844.4395 8582.8477 -7843.8159 8583.6025 -7843.4463 8583.041 C-7843.3369 8583.1338 -7843.0283 8583.085 -7843.1094 8583.2734 C-7842.7407 8583.0098 -7842.0771 8583.5215 -7841.5439 8583.1865 C-7841.5928 8583.1777 -7841.6211 8583.1973 -7841.6777 8583.2393 C-7841.1392 8583.4551 -7840.6641 8583.1602 -7840.0957 8583.3555 C-7840.1533 8583.3975 -7840.2583 8583.4277 -7840.2754 8583.5254 C-7840.0557 8583.7129 -7839.7549 8583.1133 -7839.6348 8583.584 C-7839.5088 8583.5801 -7839.5449 8583.3477 -7839.6221 8583.3613 C-7838.3779 8583.5449 -7837.0498 8583.2441 -7835.7549 8583.1367 C-7834.8271 8583.418 -7835.6982 8583.9297 -7834.9663 8583.5781 C-7834.9063 8583.6689 -7834.9229 8583.3984 -7834.9131 8583.4961 C-7834.6299 8583.3643 -7834.4717 8584.0215 -7834.2754 8583.7754 C-7834.3564 8583.4863 -7834.1445 8583.6133 -7834.1387 8583.4375 C-7833.5713 8583.625 -7833.4575 8583.8857 -7833.0098 8583.666 C-7833.0435 8583.8184 L-7832.5186 8583.3887 -7831.9102 8583.6191 -7831.4673 8583.123 C-7828.5728 8583.0322 -7825.7983 8582.7578 -7822.9761 8582.7002 C-7820.1865 8582.7949 -7817.4551 8582.5723 -7814.6221 8582.8359 C-7813.9585 8583.2354 -7813.9087 8583.2246 -7813.1797 8583.0625 C-7813.2095 8583.127 -7813.2549 8583.1426 -7813.2061 8583.2031 C-7813.1699 8582.875 -7812.6929 8583.1719 -7812.6235 8582.8594 C-7811.5762 8582.9199 -7810.6113 8582.8301 -7809.5337 8582.8281 C-7809.7041 8582.8633 -7809.7896 8583.1309 -7809.5869 8583.1094 C-7809.3755 8582.8994 L-7809.3408 8582.9922 L-7809.2021 8582.9434 -7809.0513 8582.7813 -7809.1943 8582.6758 C-7806.4873 8582.3926 -7803.8242 8583.0498 -7801.1729 8582.9697 C-7800.5435 8583.1064 -7799.6475 8582.9814 -7798.9629 8582.9141 C-7796.9355 8583.3506 -7795.1079 8583.7041 -7793.0479 8583.3984 C-7793.3169 8584.2461 -7794.1675 8584.4414 Vf-7884.2578 8584.2422 m-7884.1855 8584.4063 -7883.9497 8584.4961 -7884.1377 8584.7139 C-7884.1611 8584.5605 -7884.2822 8584.3887 -7884.2578 8584.2422 Cf-7877.9619 8585.9297 m-7877.9536 8585.8809 -7877.8721 8585.9961 -7877.8521 8586.0225 C-7877.9297 8586.0352 -7878.0024 8586.1729 -7878.0645 8586.0879 C-7877.9854 8586.0762 -7877.9976 8585.998 -7877.9619 8585.9297 Cf-7876.3521 8586.0273 m-7876.3765 8586.1729 -7876.7207 8586.2891 -7876.9238 8586.3066 C-7876.3521 8586.0273 Lf-7874.8521 8586.6289 m-7874.7227 8586.752 -7874.7583 8586.8193 -7874.9326 8586.8154 C-7874.9453 8586.7383 -7874.8877 8586.6992 -7874.8521 8586.6289 Cf-7874.7456 8586.2969 m-7874.6211 8586.293 -7874.5591 8586.3789 -7874.4985 8586.4629 C-7874.5029 8586.3369 -7874.7871 8586.541 -7874.7456 8586.2969 Cf-7871.4893 8586.7207 m-7871.4111 8586.709 -7871.2417 8586.5879 -7871.1689 8586.75 C-7871.2505 8586.6367 -7871.5498 8586.9346 -7871.4893 8586.7207 Cf-7869.9761 8586.5 m-7869.9272 8586.5098 -7869.9072 8586.5361 -7869.8506 8586.4961 C-7869.7607 8586.5625 -7869.8555 8586.6689 -7869.9312 8586.6826 C-7869.9761 8586.5 Lf-7842.4287 8585.9141 m-7842.5923 8585.9863 L-7842.5684 8585.8418 L-7842.4287 8585.9141 Lf-7830.3574 8585.9063 m-7830.1943 8585.8145 -7830.2441 8586.043 -7830.2168 8586.0645 C-7830.3643 8586.0801 -7830.1621 8585.8848 -7830.3574 8585.9063 Cf-7823.8486 8585.1777 m-7823.8984 8585.1816 L-7823.8818 8584.8818 L-7823.8486 8585.1777 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 k(White)Pc0 0 0 1 k(Black)Pc0 1 1 0 k(CMYK Red)Pc0 0 1 0 k(CMYK Yellow)Pc1 0 1 0 k(CMYK Green)Pc1 0 0 0 k(CMYK Cyan)Pc1 1 0 0 k(CMYK Blue)Pc0 1 0 0 k(CMYK Magenta)Pc0.15 1 0.9 0.1 k(C=15 M=100 Y=90 K=10)Pc0 0.9 0.85 0 k(C=0 M=90 Y=85 K=0)Pc0 0.8 0.95 0 k(C=0 M=80 Y=95 K=0)Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0)Pc0 0.35 0.85 0 k(C=0 M=35 Y=85 K=0)Pc0.05 0 0.9 0 k(C=5 M=0 Y=90 K=0)Pc0.2 0 1 0 k(C=20 M=0 Y=100 K=0)Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0)Pc0.75 0 1 0 k(C=75 M=0 Y=100 K=0)Pc0.85 0.1 1 0.1 k(C=85 M=10 Y=100 K=10)Pc0.9 0.3 0.95 0.3 k(C=90 M=30 Y=95 K=30)Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0)Pc0.8 0.1 0.45 0 k(C=80 M=10 Y=45 K=0)Pc0.7 0.15 0 0 k(C=70 M=15 Y=0 K=0)Pc0.85 0.5 0 0 k(C=85 M=50 Y=0 K=0)Pc1 0.95 0.05 0 k(C=100 M=95 Y=5 K=0)Pc1 1 0.25 0.25 k(C=100 M=100 Y=25 K=25)Pc0.75 1 0 0 k(C=75 M=100 Y=0 K=0)Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0)Pc0.35 1 0.35 0.1 k(C=35 M=100 Y=35 K=10)Pc0.1 1 0.5 0 k(C=10 M=100 Y=50 K=0)Pc0 0.95 0.2 0 k(C=0 M=95 Y=20 K=0)Pc0.25 0.25 0.4 0 k(C=25 M=25 Y=40 K=0)Pc0.4 0.45 0.5 0.05 k(C=40 M=45 Y=50 K=5)Pc0.5 0.5 0.6 0.25 k(C=50 M=50 Y=60 K=25)Pc0.55 0.6 0.65 0.4 k(C=55 M=60 Y=65 K=40)Pc0.25 0.4 0.65 0 k(C=25 M=40 Y=65 K=0)Pc0.3 0.5 0.75 0.1 k(C=30 M=50 Y=75 K=10)Pc0.35 0.6 0.8 0.25 k(C=35 M=60 Y=80 K=25)Pc0.4 0.65 0.9 0.35 k(C=40 M=65 Y=90 K=35)Pc0.4 0.7 1 0.5 k(C=40 M=70 Y=100 K=50)Pc0.5 0.7 0.8 0.7 k(C=50 M=70 Y=80 K=70)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.100006 g(K=90)Pc0.200012 g(K=80)Pc0.300003 g(K=70)Pc0.400009 g(K=60)Pc0.5 g(K=50)Pc0.600006 g(K=40)Pc0.700012 g(K=30)Pc0.800003 g(K=20)Pc0.900009 g(K=10)Pc0.950012 g(K=5)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A1 Ap0 O0 0 0 0 k0 J 0 j 1 w 4 M []0 d0 XR539.9658 343 m318.498 343 L318.498 447.6348 L539.9658 447.6348 L539.9658 343 Lf0 Ap1 XR334.9053 429.0098 m347.8223 431.707 358.6777 431.707 v369.5293 431.707 383.0293 429.0098 Y383.0293 392.9043 383.0293 387.4902 V383.0293 384.1055 380.9551 382.2871 380.2188 381.7559 C378.5645 380.5625 371.1641 374.9473 358.9844 374.9473 C347.5234 374.9473 340.5332 379.8926 337.7559 381.8379 C336.5098 382.7168 334.9053 384.6328 334.9053 387.4902 C334.9053 391.8809 334.9053 429.0098 Yfuu0 0 0 1 k0 XR379.4326 380.9824 m369.6162 374.6172 359.4238 374.9609 y359.1445 376.2617 359.2559 378.5039 v359.3682 380.748 360.5918 380.1152 361.4775 381.8867 c361.7988 382.5313 362.0752 382.9746 362.5781 384.4824 c362.5977 384.5449 361.9902 395.2871 361.8359 399.8457 c361.7539 402.3008 361.291 406.4004 360.75 410.3867 c360.4316 412.748 359.7129 414.6211 359.3809 416.8613 c358.9004 420.1016 358.3438 423.752 y357.9443 422.7227 357.3721 418.8652 356.7979 414.5098 c356.5215 412.4199 356.2451 410.2168 355.9883 408.1563 c355.4414 403.793 354.0781 392.1133 353.8721 391.4785 c353.5605 390.5176 353.5273 391.7344 y354.3359 403.9844 354.5781 409.3574 V354.6973 411.9844 354.8945 414.8711 355.2227 417.6406 C355.4688 419.7188 355.7871 421.7324 356.1992 423.5215 C357.6016 427.7598 358.0498 427.8438 v358.4961 427.9277 360.1152 425.1738 360.6621 422.7207 c361.9004 417.1875 362.6309 416.4785 363.5742 410.6621 c364.4707 405.1367 365.2891 400.5156 365.4004 399.7578 c365.8018 397.0156 365.6035 388.4648 364.9111 385.0586 C364.7471 384.1289 364.6973 383.7871 364.0918 383.1719 c362.668 381.7324 361.6563 380.0176 361.6563 378.8945 c361.6563 377.7734 361.4707 377.7949 361.7363 377.1445 C363.6113 374.3359 374.3955 380.7637 V377.7637 382.5293 377.7637 386.4258 V377.7637 425.8359 l367.0723 429.4512 358.8369 429.4512 v350.6016 429.4512 340.2891 425.8438 y340.2891 386.6035 l340.2891 384.1875 340.6406 379.6582 344.0898 378.1133 C334.9053 381.2559 334.9053 386.6523 V334.9053 429.1758 l348.9258 431.7559 358.8438 431.7559 v368.7607 431.7559 383.0293 429.1758 y383.0293 390.2676 383.0293 386.6016 v383.0293 382.9336 379.4326 380.9824 YfUUu*u512.668 413.918 m511.6875 413.3711 510.3711 413.0996 508.7168 413.0996 c507.0488 413.0996 505.752 413.6035 504.8271 414.6133 c503.9023 415.623 503.4395 417.0332 503.4395 418.8418 c503.4395 420.6641 503.9023 422.1172 504.8281 423.1953 c505.7246 424.2344 506.918 424.7539 508.4043 424.7539 c509.0635 424.7539 509.6309 424.6797 510.1094 424.5352 c510.1094 429.1133 L512.668 429.1133 l512.668 413.918 Lf1 D510.1094 414.9941 m510.1094 423.1543 L509.7715 423.252 509.3926 423.3008 508.9717 423.3008 c506.9824 423.3008 505.9863 421.8633 505.9863 418.9883 c505.9863 416.1582 506.9189 414.7422 508.7832 414.7422 c509.4004 414.7422 509.8418 414.8262 510.1094 414.9941 cf*U*u0 D524.3672 419.0508 m517.4268 418.043 L517.6367 415.9434 518.668 414.8926 520.5195 414.8926 c521.6123 414.8926 522.5664 415.0996 523.3799 415.5117 c523.9883 413.8965 L523.0215 413.3633 521.7734 413.0996 520.2461 413.0996 c518.6191 413.0996 517.334 413.6094 516.3945 414.6328 c515.457 415.6563 514.9873 417.1133 514.9873 419.0059 c514.9873 420.8418 515.418 422.2734 516.2793 423.3027 c517.1426 424.332 518.3232 424.8477 519.8223 424.8477 c521.3379 424.8477 522.4883 424.3535 523.2734 423.3672 c524.0586 422.3809 524.4229 420.9414 524.3672 419.0508 cf1 D521.9707 420.0547 m521.9707 422.2012 521.2256 423.2734 519.7383 423.2734 c518.9512 423.2734 518.3477 422.957 517.9258 422.3262 c517.4639 421.6406 517.2461 420.6445 517.2734 419.3398 c521.9707 420.0547 Lf*UUu*u0 D395.3809 383.0723 m391.3564 383.0723 L391.3564 407.9414 L395.3809 407.9414 l395.3809 383.0723 Lf*U*u413.9355 391.9414 m413.9355 389.1934 413.3311 387.0098 412.1211 385.3848 c410.8027 383.627 408.9473 382.748 406.5508 382.748 c404.1563 382.748 402.2988 383.627 400.9805 385.3848 c399.7715 387.0098 399.168 389.1934 399.168 391.9414 c399.168 394.709 399.7715 396.9063 400.9805 398.5313 c402.2988 400.2871 404.1563 401.166 406.5508 401.166 c408.9688 401.166 410.8262 400.2871 412.1211 398.5313 c413.3311 396.9063 413.9355 394.709 413.9355 391.9414 cf1 D409.9434 391.9707 m409.9434 396.4102 408.8135 398.6309 406.5508 398.6309 c404.2891 398.6309 403.1582 396.4102 403.1582 391.9707 c403.1582 387.6426 404.2891 385.4785 406.5508 385.4785 c408.8135 385.4785 409.9434 387.6426 409.9434 391.9707 cf*U*u0 D427.7246 388.1855 m427.7246 386.6914 427.1426 385.416 425.9766 384.3613 c424.8115 383.3086 423.2832 382.7793 421.3926 382.7793 c419.3711 382.7793 417.7324 383.209 416.4795 384.0625 c417.5352 386.6309 L418.3936 385.9492 419.5029 385.6074 420.8672 385.6074 c421.6807 385.6074 422.3398 385.8438 422.8457 386.3164 c423.3525 386.7891 423.6045 387.3867 423.6045 388.1133 c423.6045 388.8594 423.4063 389.4473 423.0117 389.877 c422.6152 390.3047 421.9463 390.6953 421.002 391.0469 c418.2988 392.0801 416.9492 393.7383 416.9492 396.0234 c416.9492 397.4746 417.4688 398.6934 418.5137 399.6836 c419.5557 400.6719 420.9121 401.166 422.5801 401.166 c424.3809 401.166 425.918 400.75 427.1914 399.9141 c426.2051 397.5723 L425.3926 398.2344 424.4492 398.5645 423.375 398.5645 c422.5859 398.5645 421.9648 398.3398 421.5176 397.8887 c421.0674 397.4395 420.8418 396.8848 420.8418 396.2246 c420.8418 395.0605 421.7188 394.127 423.4766 393.4258 c426.3086 392.2813 427.7246 390.5371 427.7246 388.1855 cf*U*u457.3965 383.0723 m452.7031 383.0723 L450.8047 389.4102 L442.8516 389.4102 L440.8828 383.0723 L436.7979 383.0723 L444.9668 407.7266 L449.2637 407.7266 l457.3965 383.0723 Lf1 D450.1592 392.0625 m447.6152 400.7441 L447.2578 401.9629 447.0439 402.957 446.9707 403.7227 c446.9004 403.7227 L446.7803 403.0762 446.5527 402.084 446.2197 400.7441 c443.5684 392.0625 l450.1592 392.0625 Lf*U*u0 D473.9385 383.0723 m469.916 383.0723 L469.916 395.6641 L469.916 397.6406 468.8516 398.6309 466.7227 398.6309 c465.7109 398.6309 464.7891 398.4648 463.9541 398.1348 c463.9541 383.0723 L459.9326 383.0723 L459.9326 399.8809 L461.7559 400.7383 464.0723 401.166 466.8867 401.166 c469.3682 401.166 471.2031 400.6191 472.3906 399.5195 c473.4229 398.5957 473.9385 397.332 473.9385 395.7285 c473.9385 383.0723 Lf*U*u492.0703 384.0332 m490.5322 383.1777 488.4648 382.748 485.8711 382.748 c483.2549 382.748 481.2207 383.5391 479.7695 385.1211 c478.3193 386.7031 477.5938 388.9102 477.5938 391.7441 c477.5938 394.6016 478.3193 396.875 479.7695 398.5664 c481.1777 400.1914 483.0459 401.0059 485.377 401.0059 c486.4102 401.0059 487.2998 400.8945 488.0479 400.6719 c488.0479 407.8613 L492.0703 407.8613 l492.0703 384.0332 Lf1 D488.0479 385.7129 m488.0479 398.4961 L487.5205 398.6504 486.9258 398.7266 486.2676 398.7266 c483.1445 398.7266 481.585 396.4746 481.585 391.9727 c481.585 387.5352 483.0459 385.3184 485.9707 385.3184 c486.9375 385.3184 487.6289 385.4492 488.0479 385.7129 cf*U*u0 D510.375 392.0703 m499.4961 390.4863 L499.8262 387.1914 501.4414 385.543 504.3408 385.543 c506.0547 385.543 507.5488 385.873 508.8242 386.5313 c509.7793 383.998 L508.2637 383.1641 506.3086 382.748 503.9131 382.748 c501.3633 382.748 499.3535 383.5508 497.8799 385.1523 c496.4082 386.7578 495.6719 389.041 495.6719 392.0059 c495.6719 394.8848 496.3477 397.1309 497.6992 398.7441 c499.0508 400.3594 500.9023 401.166 503.2539 401.166 c505.6289 401.166 507.4297 400.3906 508.6602 398.8438 c509.8906 397.293 510.4629 395.0352 510.375 392.0703 cf1 D506.6113 393.6504 m506.6113 397.0137 505.4453 398.6953 503.1152 398.6953 c501.8867 398.6953 500.9404 398.1992 500.2813 397.2109 c499.5566 396.1348 499.2158 394.5723 499.2598 392.5313 c506.6113 393.6504 Lf*U*u0 D524.1963 388.1855 m524.1963 386.6914 523.6143 385.416 522.4492 384.3613 c521.2832 383.3086 519.7559 382.7793 517.8652 382.7793 c515.8438 382.7793 514.2051 383.209 512.9512 384.0625 c514.0059 386.6309 L514.8643 385.9492 515.9746 385.6074 517.3389 385.6074 c518.1523 385.6074 518.8125 385.8438 519.3174 386.3164 c519.8223 386.7891 520.0762 387.3867 520.0762 388.1133 c520.0762 388.8594 519.8789 389.4473 519.4834 389.877 c519.0879 390.3047 518.418 390.6953 517.4736 391.0469 c514.7715 392.0801 513.4189 393.7383 513.4189 396.0234 c513.4189 397.4746 513.9414 398.6934 514.9844 399.6836 c516.0273 400.6719 517.3838 401.166 519.0527 401.166 c520.8535 401.166 522.3906 400.75 523.6621 399.9141 c522.6758 397.5723 L521.8652 398.2344 520.9219 398.5645 519.8477 398.5645 c519.0586 398.5645 518.4375 398.3398 517.9883 397.8887 c517.5371 397.4395 517.3145 396.8848 517.3145 396.2246 c517.3145 395.0605 518.1924 394.127 519.9492 393.4258 c522.7803 392.2813 524.1963 390.5371 524.1963 388.1855 cf*UUu*u412.5781 413.2695 m410.0176 413.2695 L410.0176 421.3047 L410.0176 422.5664 409.3379 423.1973 407.9775 423.1973 c407.334 423.1973 406.7441 423.0918 406.21 422.8828 c406.21 413.2695 L403.6504 413.2695 L403.6504 423.9922 L404.8125 424.5391 406.291 424.8125 408.082 424.8125 c409.665 424.8125 410.835 424.4609 411.5908 423.7617 c412.249 423.1738 412.5781 422.3672 412.5781 421.3438 c412.5781 413.2695 Lf*U*u418.1016 427.8301 m418.1016 427.4785 417.9648 427.1797 417.6904 426.9336 c417.417 426.6875 417.084 426.5664 416.6914 426.5664 c416.2988 426.5664 415.9658 426.6875 415.6914 426.9336 c415.4199 427.1797 415.2822 427.4785 415.2822 427.8301 c415.2822 428.1816 415.4199 428.4805 415.6914 428.7344 c415.9658 428.9863 416.2988 429.1133 416.6914 429.1133 c417.084 429.1133 417.417 428.9902 417.6904 428.7441 c417.9648 428.498 418.1016 428.1934 418.1016 427.8301 cf417.9668 413.2695 m415.4053 413.2695 L415.4053 424.6074 L417.9668 424.6074 l417.9668 413.2695 Lf*U*u429.6416 424.6074 m426.0029 413.2695 L423.5635 413.2695 L419.8613 424.6074 L422.5957 424.6074 L424.5938 417.291 L424.748 416.7441 424.8379 416.2246 424.8672 415.7344 c424.9082 415.7344 L424.9785 416.1406 425.0762 416.6602 425.2031 417.291 c427.2441 424.6074 l429.6416 424.6074 Lf*U*u440.3838 419.0176 m433.4434 418.0078 L433.6543 415.9082 434.6855 414.8574 436.5342 414.8574 c437.6289 414.8574 438.582 415.0645 439.3965 415.4785 c440.0059 413.8613 L439.0381 413.3281 437.791 413.0645 436.2617 413.0645 c434.6348 413.0645 433.3525 413.5762 432.4121 414.5996 c431.4727 415.6211 431.0039 417.0781 431.0039 418.9707 c431.0039 420.8066 431.4346 422.2402 432.2969 423.2695 c433.1592 424.2988 434.3398 424.8125 435.8408 424.8125 c437.3535 424.8125 438.5049 424.3203 439.291 423.332 c440.0742 422.3457 440.4395 420.9063 440.3838 419.0176 cf1 D437.9883 420.0215 m437.9883 422.166 437.2422 423.2383 435.7559 423.2383 c434.9688 423.2383 434.3652 422.9238 433.9434 422.293 c433.4805 421.6055 433.2627 420.6094 433.291 419.3047 c437.9883 420.0215 Lf*U*u0 D448.1777 424.7988 m447.6719 422.9238 L447.293 423.0508 446.8984 423.1133 446.4922 423.1133 c446.001 423.1133 445.5938 423.0215 445.2695 422.8398 c445.2695 413.2695 L442.709 413.2695 L442.709 424 l443.957 424.6035 445.7803 424.8691 448.1777 424.7988 cf*U*u456.3516 416.5293 m456.3516 415.5762 455.9805 414.7617 455.2363 414.0879 c454.4922 413.4141 453.5176 413.0781 452.3125 413.0781 c451.0215 413.0781 449.9766 413.3516 449.1758 413.9004 c449.8496 415.541 L450.3965 415.1035 451.1045 414.8848 451.9756 414.8848 c452.4941 414.8848 452.915 415.0352 453.2383 415.3379 c453.5605 415.6387 453.7227 416.0195 453.7227 416.4844 c453.7227 416.9609 453.5957 417.3359 453.3438 417.6094 c453.0908 417.8809 452.6641 418.1309 452.0625 418.3555 c450.3398 419.0156 449.4766 420.0742 449.4766 421.5332 c449.4766 422.457 449.8086 423.2363 450.4756 423.8672 c451.1406 424.498 452.0049 424.8125 453.0703 424.8125 c454.2188 424.8125 455.1992 424.5469 456.0117 424.0156 c455.3809 422.5234 L454.8633 422.9453 454.2598 423.1563 453.5742 423.1563 c453.0703 423.1563 452.6738 423.0137 452.3867 422.7246 c452.0996 422.4375 451.957 422.082 451.957 421.6621 c451.957 420.9199 452.5156 420.3223 453.6387 419.875 c455.4463 419.1445 456.3516 418.0293 456.3516 416.5293 cf*U*u461.3672 427.8301 m461.3672 427.4785 461.2295 427.1797 460.957 426.9336 c460.6836 426.6875 460.3506 426.5664 459.958 426.5664 c459.5645 426.5664 459.2324 426.6875 458.959 426.9336 c458.6855 427.1797 458.5488 427.4785 458.5488 427.8301 c458.5488 428.1816 458.6855 428.4805 458.959 428.7344 c459.2324 428.9863 459.5645 429.1133 459.958 429.1133 c460.3506 429.1133 460.6836 428.9902 460.957 428.7441 c461.2295 428.498 461.3672 428.1934 461.3672 427.8301 cf461.2334 413.2695 m458.6719 413.2695 L458.6719 424.6074 L461.2334 424.6074 l461.2334 413.2695 Lf*U*u472.877 413.8828 m471.8965 413.3379 470.5801 413.0645 468.9238 413.0645 c467.2578 413.0645 465.96 413.5684 465.0352 414.5781 c464.1094 415.5879 463.6475 416.998 463.6475 418.8066 c463.6475 420.6309 464.1113 422.082 465.0361 423.1602 c465.9336 424.1992 467.127 424.7188 468.6123 424.7188 c469.2715 424.7188 469.8398 424.6465 470.3164 424.502 c470.3164 429.0781 L472.877 429.0781 l472.877 413.8828 Lf1 D470.3164 414.9609 m470.3164 423.1191 L469.9805 423.2168 469.6016 423.2656 469.1816 423.2656 c467.1904 423.2656 466.1953 421.8301 466.1953 418.9551 c466.1953 416.123 467.127 414.707 468.9922 414.707 c469.6094 414.707 470.0508 414.791 470.3164 414.9609 cf*U*u0 D483.7949 413.8828 m482.7715 413.3379 481.4063 413.0645 479.6953 413.0645 c476.6123 413.0645 475.0723 414.2129 475.0723 416.5098 c475.0723 417.8809 475.6953 418.9121 476.9434 419.5977 c477.9238 420.1309 479.4082 420.4941 481.3984 420.6914 c481.3984 421.3008 L481.3984 422.5469 480.6484 423.1699 479.1484 423.1699 c478.21 423.1699 477.2656 422.9414 476.3115 422.4824 c475.7236 423.9531 L476.9004 424.5254 478.1973 424.8125 479.6133 424.8125 c482.4004 424.8125 483.7949 423.5098 483.7949 420.9043 c483.7949 413.8828 Lf1 D481.3984 414.8047 m481.3984 419.4746 L480.0557 419.3047 479.1055 419.0469 478.5439 418.6953 c477.8457 418.2598 477.4941 417.5605 477.4941 416.5918 c477.4941 415.1895 478.2852 414.4883 479.8662 414.4883 c480.4688 414.4883 480.9785 414.5938 481.3984 414.8047 cf*U*u0 D495.3408 413.8828 m494.3594 413.3379 493.043 413.0645 491.3887 413.0645 c489.7207 413.0645 488.4248 413.5684 487.498 414.5781 c486.5742 415.5879 486.1113 416.998 486.1113 418.8066 c486.1113 420.6309 486.5742 422.082 487.5 423.1602 c488.3975 424.1992 489.5898 424.7188 491.0771 424.7188 c491.7363 424.7188 492.3047 424.6465 492.7813 424.502 c492.7813 429.0781 L495.3408 429.0781 l495.3408 413.8828 Lf1 D492.7813 414.9609 m492.7813 423.1191 L492.4434 423.2168 492.0654 423.2656 491.6445 423.2656 c489.6533 423.2656 488.6582 421.8301 488.6582 418.9551 c488.6582 416.123 489.5898 414.707 491.457 414.707 c492.0723 414.707 492.5137 414.791 492.7813 414.9609 cf*UU*u0 D391.3252 429.0527 m394.0527 429.0527 L394.0527 416.8652 L394.0527 415.5254 394.7734 414.8535 396.2178 414.8535 c396.9023 414.8535 397.5283 414.9648 398.0938 415.1895 c398.0938 429.0527 L400.8203 429.0527 L400.8203 414.0059 L399.585 413.4258 398.0137 413.1348 396.1064 413.1348 c394.4238 413.1348 393.1797 413.5059 392.375 414.252 c391.6748 414.877 391.3252 415.7344 391.3252 416.8223 c391.3252 429.0527 Lf*Uu*u397.4092 369.0547 m393.9805 369.0547 L393.9805 365.6113 L397.0303 365.6113 L397.0303 364.2314 L393.9805 364.2314 L393.9805 359.0889 L391.8877 359.0889 L391.8877 370.4502 L397.4092 370.4502 l397.4092 369.0547 Lf*U*u404.6602 359.5283 m403.9219 359.1348 402.9355 358.9375 401.7021 358.9375 c399.4766 358.9375 398.3643 359.7666 398.3643 361.4248 c398.3643 362.4863 398.8955 363.2705 399.957 363.7764 c400.6143 364.0898 401.6055 364.3115 402.9307 364.4434 c402.9307 364.8838 L402.9307 365.7832 402.3896 366.2334 401.3076 366.2334 c400.6299 366.2334 399.9473 366.0664 399.2598 365.7324 c398.835 366.7949 L399.6846 367.209 400.6191 367.417 401.6406 367.417 c403.6533 367.417 404.6602 366.4766 404.6602 364.5957 c404.6602 359.5283 Lf1 D402.9307 360.1963 m402.9307 363.5635 L402.0254 363.4521 401.3848 363.2959 401.0088 363.0938 c400.3984 362.7695 400.0938 362.2334 400.0938 361.4854 c400.0938 360.4746 400.668 359.9688 401.8174 359.9688 c402.2539 359.9688 402.625 360.0449 402.9307 360.1963 cf*U*u0 D411.4707 359.498 m411.0557 359.124 410.4141 358.9375 409.5449 358.9375 c408.4521 358.9375 407.6182 359.3975 407.042 360.3174 c406.5566 361.0859 406.3135 362.0469 406.3135 363.1992 c406.3135 364.3525 406.5615 365.3086 407.0566 366.0664 c407.6328 366.9668 408.4678 367.417 409.5596 367.417 c410.3789 367.417 411.0107 367.2295 411.4561 366.8555 c411.0615 365.8086 L410.7676 366.0313 410.4043 366.1426 409.9688 366.1426 c408.7754 366.1426 408.1797 365.1689 408.1797 363.2227 c408.1797 362.4756 408.29 361.8457 408.5127 361.3311 c408.8164 360.625 409.292 360.2725 409.9385 360.2725 c410.3838 360.2725 410.7529 360.3936 411.0459 360.6357 c411.4707 359.498 Lf*U*u419.2373 359.5742 m418.4189 359.1396 417.3721 358.9219 416.0977 358.9219 c413.9844 358.9219 412.9277 359.8418 412.9277 361.6826 c412.9277 367.2646 L414.793 367.2646 L414.793 361.5762 L414.793 360.6563 415.248 360.1963 416.1572 360.1963 c416.6572 360.1963 417.0615 360.2871 417.3721 360.4697 c417.3721 367.2646 L419.2373 367.2646 l419.2373 359.5742 Lf*U*u423.1514 359.0889 m421.2852 359.0889 L421.2852 370.5723 L423.1514 370.5723 l423.1514 359.0889 Lf*U*u428.8398 359.165 m428.5977 359.0537 428.2832 358.998 427.8994 358.998 c427.2021 358.998 426.6533 359.1924 426.2539 359.582 c425.8545 359.9707 425.6543 360.5146 425.6543 361.2129 c425.6543 366.082 L424.7441 366.082 L424.7441 367.2646 L425.6543 367.2646 L425.6543 369.9951 L427.5205 370.5107 L427.5205 367.2646 L428.8398 367.2646 L428.8398 366.082 L427.5205 366.082 L427.5205 361.3037 L427.5205 360.5957 427.8154 360.2422 428.4053 360.2422 c428.5254 360.2422 428.6699 360.2666 428.8398 360.3174 c428.8398 359.165 Lf*U*u436.3037 359.5283 m435.5654 359.1348 434.5791 358.9375 433.3457 358.9375 c431.1201 358.9375 430.0078 359.7666 430.0078 361.4248 c430.0078 362.4863 430.5391 363.2705 431.6006 363.7764 c432.2578 364.0898 433.249 364.3115 434.5742 364.4434 c434.5742 364.8838 L434.5742 365.7832 434.0332 366.2334 432.9512 366.2334 c432.2734 366.2334 431.5908 366.0664 430.9033 365.7324 c430.4785 366.7949 L431.3281 367.209 432.2627 367.417 433.2842 367.417 c435.2969 367.417 436.3037 366.4766 436.3037 364.5957 c436.3037 359.5283 Lf1 D434.5742 360.1963 m434.5742 363.5635 L433.6689 363.4521 433.0283 363.2959 432.6523 363.0938 c432.042 362.7695 431.7373 362.2334 431.7373 361.4854 c431.7373 360.4746 432.3115 359.9688 433.4609 359.9688 c433.8975 359.9688 434.2686 360.0449 434.5742 360.1963 cf*U*u0 D444.5703 359.5898 m443.8623 359.1953 442.9121 358.998 441.7188 358.998 c440.4648 358.998 439.5088 359.3828 438.8516 360.1523 c438.2246 360.8818 437.9111 361.8799 437.9111 363.1465 c437.9111 364.3623 438.1992 365.3545 438.7734 366.125 c439.4082 366.9863 440.3105 367.417 441.4805 367.417 c441.9541 367.417 442.3623 367.3662 442.7051 367.2646 c442.7051 370.6328 L444.5703 370.6328 l444.5703 359.5898 Lf1 D442.7051 360.3633 m442.7051 366.2637 L442.4639 366.334 442.1914 366.3701 441.8896 366.3701 c440.4609 366.3701 439.7471 365.3311 439.7471 363.2529 c439.7471 361.2051 440.416 360.1807 441.7539 360.1807 c442.1963 360.1807 442.5137 360.2422 442.7051 360.3633 cf*U*u0 D457.0244 359.5898 m456.3164 359.1953 455.3662 358.998 454.1729 358.998 c452.9189 358.998 451.9629 359.3828 451.3057 360.1523 c450.6787 360.8818 450.3652 361.8799 450.3652 363.1465 c450.3652 364.3623 450.6533 365.3545 451.2275 366.125 c451.8623 366.9863 452.7646 367.417 453.9346 367.417 c454.4082 367.417 454.8164 367.3662 455.1592 367.2646 c455.1592 370.6328 L457.0244 370.6328 l457.0244 359.5898 Lf1 D455.1592 360.3633 m455.1592 366.2637 L454.918 366.334 454.6455 366.3701 454.3438 366.3701 c452.915 366.3701 452.2012 365.3311 452.2012 363.2529 c452.2012 361.2051 452.8701 360.1807 454.208 360.1807 c454.6504 360.1807 454.9678 360.2422 455.1592 360.3633 cf*U*u0 D465.5049 363.2246 m460.498 362.5078 L460.6494 360.9766 461.3936 360.2109 462.7285 360.2109 c463.5166 360.2109 464.2051 360.3682 464.792 360.6816 c465.2314 359.5137 L464.5342 359.1289 463.6338 358.9375 462.5313 358.9375 c461.2773 358.9375 460.3164 359.3418 459.6494 360.1504 c459.043 360.8994 458.7393 361.915 458.7393 363.1992 c458.7393 364.4229 459.0068 365.4043 459.543 366.1426 c460.1504 366.9922 461.0449 367.417 462.2285 367.417 c463.4316 367.417 464.3066 367.001 464.8535 366.1709 c465.3281 365.4521 465.5459 364.4697 465.5049 363.2246 cf1 D463.7754 363.958 m463.7754 365.5156 463.2393 366.2939 462.167 366.2939 c461.4795 366.2939 460.9893 365.9688 460.6963 365.3184 c460.4736 364.8301 460.3721 364.2051 460.3926 363.4424 c463.7754 363.958 Lf*U*u0 D479.126 364.8379 m479.126 363.0684 478.7725 361.6777 478.0645 360.666 c477.2451 359.4834 475.9863 358.8916 474.2871 358.8916 c472.8818 358.8916 471.8047 359.1045 471.0566 359.5283 c471.0566 369.9951 L471.8955 370.4199 472.9375 370.6328 474.1807 370.6328 c475.8896 370.6328 477.1641 370.0762 478.0039 368.9639 c478.752 367.9727 479.126 366.5977 479.126 364.8379 cf1 D476.9873 364.8838 m476.9873 367.8057 476.0674 369.2676 474.2266 369.2676 c473.792 369.2676 473.4326 369.2119 473.1494 369.1006 c473.1494 360.5146 L473.4834 360.4033 473.8525 360.3477 474.2568 360.3477 c475.3799 360.3477 476.1475 360.8584 476.5625 361.8799 c476.8457 362.5674 476.9873 363.5684 476.9873 364.8838 cf*U*u0 D486.9688 363.2246 m481.9619 362.5078 L482.1133 360.9766 482.8574 360.2109 484.1924 360.2109 c484.9805 360.2109 485.6689 360.3682 486.2559 360.6816 c486.6953 359.5137 L485.998 359.1289 485.0977 358.9375 483.9951 358.9375 c482.7412 358.9375 481.7803 359.3418 481.1133 360.1504 c480.5068 360.8994 480.2031 361.915 480.2031 363.1992 c480.2031 364.4229 480.4707 365.4043 481.0068 366.1426 c481.6143 366.9922 482.5088 367.417 483.6924 367.417 c484.8955 367.417 485.7705 367.001 486.3174 366.1709 c486.792 365.4521 487.0098 364.4697 486.9688 363.2246 cf1 D485.2393 363.958 m485.2393 365.5156 484.7031 366.2939 483.6309 366.2939 c482.9434 366.2939 482.4531 365.9688 482.1602 365.3184 c481.9375 364.8301 481.8359 364.2051 481.8564 363.4424 c485.2393 363.958 Lf*U*u0 D492.5957 367.4014 m492.2344 366.0518 L491.9629 366.1426 491.6826 366.1875 491.3916 366.1875 c491.04 366.1875 490.749 366.1221 490.5176 365.9912 c490.5176 359.0889 L488.6523 359.0889 L488.6523 366.8252 l489.5518 367.2598 490.8662 367.4521 492.5957 367.4014 cf*U*u500.2715 363.2246 m495.2646 362.5078 L495.416 360.9766 496.1602 360.2109 497.4951 360.2109 c498.2832 360.2109 498.9717 360.3682 499.5586 360.6816 c499.998 359.5137 L499.3008 359.1289 498.4004 358.9375 497.2979 358.9375 c496.0439 358.9375 495.083 359.3418 494.416 360.1504 c493.8096 360.8994 493.5059 361.915 493.5059 363.1992 c493.5059 364.4229 493.7734 365.4043 494.3096 366.1426 c494.917 366.9922 495.8115 367.417 496.9951 367.417 c498.1982 367.417 499.0732 367.001 499.6201 366.1709 c500.0947 365.4521 500.3125 364.4697 500.2715 363.2246 cf1 D498.542 363.958 m498.542 365.5156 498.0059 366.2939 496.9336 366.2939 c496.2461 366.2939 495.7559 365.9688 495.4629 365.3184 c495.2402 364.8301 495.1387 364.2051 495.1592 363.4424 c498.542 363.958 Lf*U*u0 D506.8086 359.498 m506.3936 359.124 505.752 358.9375 504.8828 358.9375 c503.79 358.9375 502.9561 359.3975 502.3799 360.3174 c501.8945 361.0859 501.6514 362.0469 501.6514 363.1992 c501.6514 364.3525 501.8994 365.3086 502.3945 366.0664 c502.9707 366.9668 503.8057 367.417 504.8975 367.417 c505.7168 367.417 506.3486 367.2295 506.7939 366.8555 c506.3994 365.8086 L506.1055 366.0313 505.7422 366.1426 505.3066 366.1426 c504.1133 366.1426 503.5176 365.1689 503.5176 363.2227 c503.5176 362.4756 503.6279 361.8457 503.8506 361.3311 c504.1543 360.625 504.6299 360.2725 505.2764 360.2725 c505.7217 360.2725 506.0908 360.3936 506.3838 360.6357 c506.8086 359.498 Lf*U*u514.7119 359.0889 m512.8467 359.0889 L512.8467 364.8379 L512.8467 365.7578 512.3711 366.2188 511.4209 366.2188 c510.9307 366.2188 510.501 366.1064 510.1309 365.8848 c510.1309 359.0889 L508.2656 359.0889 L508.2656 370.5566 L510.1309 370.5566 L510.1309 366.916 L510.7256 367.1992 511.3311 367.3408 511.9453 367.3408 c512.792 367.3408 513.457 367.1436 513.9414 366.75 c514.4551 366.3262 514.7119 365.7002 514.7119 364.873 c514.7119 359.0889 Lf*U*u523.1768 363.1689 m523.1768 361.9658 522.9189 360.9902 522.4033 360.2422 c521.8057 359.3721 520.9316 358.9375 519.7783 358.9375 c518.626 358.9375 517.751 359.3721 517.1543 360.2422 c516.6387 360.9902 516.3809 361.9658 516.3809 363.1689 c516.3809 364.3828 516.6387 365.3633 517.1543 366.1123 c517.7412 366.9814 518.6152 367.417 519.7783 367.417 c520.9414 367.417 521.8164 366.9814 522.4033 366.1123 c522.9189 365.3633 523.1768 364.3828 523.1768 363.1689 cf1 D521.3408 363.1924 m521.3408 365.2295 520.8203 366.249 519.7783 366.249 c518.7373 366.249 518.2158 365.2295 518.2158 363.1924 c518.2158 361.2051 518.7373 360.2109 519.7783 360.2109 c520.8203 360.2109 521.3408 361.2051 521.3408 363.1924 cf*UU1 Ap0 D0 0 0 0 k296.1401 343.3633 m74.6724 343.3633 L74.6724 447.9961 L296.1401 447.9961 L296.1401 343.3633 Lf0 Ap0 0 1 0 k1 XR91.0796 429.373 m103.9976 432.0684 114.8511 432.0684 v125.7041 432.0684 139.2036 429.373 Y139.2036 393.2676 139.2036 387.8516 V139.2036 384.4688 137.1304 382.6504 136.3931 382.1172 C134.7397 380.9258 127.3379 375.3086 115.1592 375.3086 C103.6987 375.3086 96.708 380.2539 93.9307 382.1992 C92.6846 383.0781 91.0796 384.9941 91.0796 387.8516 C91.0796 392.2441 91.0796 429.373 Yfuu0 0 0 1 k0 XR135.6069 381.3438 m125.7905 374.9785 115.5991 375.3242 y115.3184 376.625 115.4302 378.8672 v115.5425 381.1094 116.7661 380.4766 117.6519 382.25 c117.9727 382.8926 118.2495 383.3359 118.752 384.8438 c118.7725 384.9063 118.1646 395.6484 118.0098 400.207 c117.9272 402.6641 117.4653 406.7637 116.9248 410.748 c116.6055 413.1113 115.8877 414.9824 115.5557 417.2246 c115.0752 420.4629 114.5176 424.1152 y114.1187 423.084 113.5464 419.2266 112.9717 414.8711 c112.6958 412.7813 112.4194 410.5781 112.1616 408.5176 c111.6147 404.1543 110.252 392.4746 110.0464 391.8418 c109.7349 390.8809 109.7021 392.0957 y110.5093 404.3457 110.7524 409.7188 V110.8711 412.3457 111.0693 415.2324 111.3975 418.002 C111.6431 420.0801 111.9614 422.0957 112.374 423.8848 C113.7759 428.1211 114.2241 428.207 v114.6704 428.2891 116.2896 425.5352 116.8364 423.084 c118.0742 417.5488 118.8047 416.8398 119.748 411.0254 c120.6445 405.5 121.4634 400.877 121.5747 400.1211 c121.9761 397.3789 121.7773 388.8262 121.0854 385.4199 C120.9214 384.4902 120.8721 384.1484 120.2651 383.5332 c118.8428 382.0938 117.8311 380.3789 117.8311 379.2578 c117.8311 378.1367 117.644 378.1563 117.9102 377.5078 C119.7861 374.6992 130.5693 381.125 V133.9385 382.8906 133.9385 386.7871 V133.9385 426.1973 l123.2466 429.8125 115.0112 429.8125 v106.7759 429.8125 96.4639 426.2051 y96.4639 386.9648 l96.4639 384.5508 96.8149 380.0195 100.2642 378.4746 C91.0796 381.6172 91.0796 387.0137 V91.0796 429.5371 l105.1001 432.1191 115.0176 432.1191 v124.9351 432.1191 139.2036 429.5371 y139.2036 390.6309 139.2036 386.9629 v139.2036 383.2969 135.6069 381.3438 YfUUu*u268.8428 414.2793 m267.8623 413.7324 266.5449 413.4609 264.8906 413.4609 c263.2227 413.4609 261.9263 413.9648 261.001 414.9746 c260.0762 415.9844 259.6138 417.3945 259.6138 419.2031 c259.6138 421.0273 260.0762 422.4785 261.002 423.5566 c261.8999 424.5957 263.0923 425.1152 264.5786 425.1152 c265.2378 425.1152 265.8057 425.043 266.2837 424.8984 c266.2837 429.4746 L268.8428 429.4746 l268.8428 414.2793 Lf1 D266.2837 415.3574 m266.2837 423.5156 L265.9458 423.6133 265.5674 423.6621 265.1465 423.6621 c263.1563 423.6621 262.1606 422.2246 262.1606 419.3516 c262.1606 416.5195 263.0928 415.1035 264.9575 415.1035 c265.5747 415.1035 266.0161 415.1875 266.2837 415.3574 cf*U*u0 D280.5415 419.4121 m273.6011 418.4063 L273.8105 416.3047 274.8428 415.2539 276.6938 415.2539 c277.7871 415.2539 278.7402 415.4609 279.5542 415.873 c280.1621 414.2598 L279.1953 413.7266 277.9478 413.4609 276.4199 413.4609 c274.7935 413.4609 273.5088 413.9727 272.5698 414.9961 c271.6313 416.0176 271.1616 417.4746 271.1616 419.3672 c271.1616 421.2031 271.5923 422.6367 272.4541 423.6641 c273.3174 424.6953 274.4976 425.2109 275.9976 425.2109 c277.5122 425.2109 278.6616 424.7168 279.4478 423.7285 c280.2334 422.7422 280.5972 421.3047 280.5415 419.4121 cf1 D278.1445 420.418 m278.1445 422.5625 277.4004 423.6348 275.9121 423.6348 c275.1255 423.6348 274.522 423.3203 274.1006 422.6895 c273.6382 422.002 273.4199 421.0059 273.4482 419.7031 c278.1445 420.418 Lf*UUu*u0 D151.5542 383.4336 m147.5308 383.4336 L147.5308 408.3027 L151.5542 408.3027 l151.5542 383.4336 Lf*U*u170.1094 392.3027 m170.1094 389.5566 169.5054 387.3711 168.2964 385.7461 c166.9775 383.9883 165.1211 383.1113 162.7261 383.1113 c160.3306 383.1113 158.4736 383.9883 157.1553 385.7461 c155.9463 387.3711 155.3423 389.5566 155.3423 392.3027 c155.3423 395.0703 155.9463 397.2676 157.1553 398.8926 c158.4736 400.6504 160.3306 401.5293 162.7261 401.5293 c165.1431 401.5293 167 400.6504 168.2964 398.8926 c169.5054 397.2676 170.1094 395.0703 170.1094 392.3027 cf1 D166.1187 392.334 m166.1187 396.7715 164.9873 398.9922 162.7261 398.9922 c160.4634 398.9922 159.3325 396.7715 159.3325 392.334 c159.3325 388.0059 160.4634 385.8398 162.7261 385.8398 c164.9873 385.8398 166.1187 388.0059 166.1187 392.334 cf*U*u0 D183.8989 388.5469 m183.8989 387.0527 183.3164 385.7793 182.1509 384.7246 c180.9858 383.6699 179.4585 383.1426 177.5674 383.1426 c175.5449 383.1426 173.9067 383.5703 172.6538 384.4258 c173.709 386.9941 L174.5674 386.3105 175.6772 385.9707 177.0415 385.9707 c177.855 385.9707 178.5146 386.2051 179.02 386.6797 c179.5264 387.1504 179.7788 387.75 179.7788 388.4746 c179.7788 389.2227 179.5811 389.8086 179.186 390.2383 c178.7905 390.668 178.1206 391.0566 177.1758 391.4082 c174.4736 392.4414 173.1226 394.1016 173.1226 396.3867 c173.1226 397.8379 173.6436 399.0547 174.687 400.0449 c175.73 401.0352 177.0864 401.5293 178.7544 401.5293 c180.5552 401.5293 182.0923 401.1113 183.3657 400.2754 c182.3789 397.9355 L181.5674 398.5977 180.624 398.9277 179.5498 398.9277 c178.7598 398.9277 178.1396 398.7031 177.6909 398.252 c177.2417 397.8027 177.0161 397.2461 177.0161 396.5879 c177.0161 395.4238 177.894 394.4902 179.6509 393.7871 c182.4829 392.6445 183.8989 390.8984 183.8989 388.5469 cf*U*u213.5698 383.4336 m208.8774 383.4336 L206.979 389.7734 L199.0264 389.7734 L197.0566 383.4336 L192.9722 383.4336 L201.1401 408.0879 L205.438 408.0879 l213.5698 383.4336 Lf1 D206.3335 392.4238 m203.79 401.1055 L203.4321 402.3242 203.2178 403.3184 203.1455 404.084 c203.0742 404.084 L202.9546 403.4375 202.7271 402.4473 202.3936 401.1055 c199.7422 392.4238 l206.3335 392.4238 Lf*U*u0 D230.1128 383.4336 m226.0903 383.4336 L226.0903 396.0254 L226.0903 398.002 225.0259 398.9922 222.8965 398.9922 c221.8857 398.9922 220.9634 398.8262 220.1284 398.498 c220.1284 383.4336 L216.1064 383.4336 L216.1064 400.2441 L217.9297 401.0996 220.2471 401.5293 223.0601 401.5293 c225.5425 401.5293 227.3784 400.9805 228.5654 399.8809 c229.5972 398.957 230.1128 397.6934 230.1128 396.0898 c230.1128 383.4336 Lf*U*u248.2446 384.3945 m246.7061 383.5391 244.6387 383.1113 242.0459 383.1113 c239.4292 383.1113 237.3955 383.9004 235.9443 385.4844 c234.4937 387.0645 233.7686 389.2734 233.7686 392.1074 c233.7686 394.9629 234.4937 397.2363 235.9443 398.9297 c237.3521 400.5547 239.2207 401.3672 241.5508 401.3672 c242.584 401.3672 243.4741 401.2559 244.2222 401.0332 c244.2222 408.2227 L248.2446 408.2227 l248.2446 384.3945 Lf1 D244.2222 386.0742 m244.2222 398.8594 L243.6948 399.0117 243.1006 399.0898 242.4414 399.0898 c239.3193 399.0898 237.7588 396.8379 237.7588 392.3359 c237.7588 387.8965 239.2207 385.6797 242.1445 385.6797 c243.1113 385.6797 243.8037 385.8105 244.2222 386.0742 cf*U*u0 D266.5493 392.4316 m255.6709 390.8496 L256 387.5527 257.6152 385.9063 260.5151 385.9063 c262.229 385.9063 263.7231 386.2344 264.998 386.8926 c265.9541 384.3594 L264.438 383.5273 262.4824 383.1113 260.0874 383.1113 c257.5376 383.1113 255.5273 383.9121 254.0547 385.5156 c252.5825 387.1191 251.8472 389.4043 251.8472 392.3691 c251.8472 395.2461 252.5225 397.4922 253.874 399.1074 c255.2256 400.7207 257.0771 401.5293 259.4282 401.5293 c261.8027 401.5293 263.605 400.7539 264.835 399.2051 c266.0659 397.6563 266.6377 395.3984 266.5493 392.4316 cf1 D262.7852 394.0137 m262.7852 397.375 261.6201 399.0566 259.29 399.0566 c258.0601 399.0566 257.1152 398.5625 256.4556 397.5742 c255.7305 396.4961 255.3901 394.9355 255.4336 392.8926 c262.7852 394.0137 Lf*U*u0 D280.3711 388.5469 m280.3711 387.0527 279.7881 385.7793 278.6235 384.7246 c277.4575 383.6699 275.9302 383.1426 274.0396 383.1426 c272.0176 383.1426 270.3794 383.5703 269.125 384.4258 c270.1807 386.9941 L271.0386 386.3105 272.1494 385.9707 273.5127 385.9707 c274.3267 385.9707 274.9863 386.2051 275.4917 386.6797 c275.9976 387.1504 276.2505 387.75 276.2505 388.4746 c276.2505 389.2227 276.0527 389.8086 275.6577 390.2383 c275.2622 390.668 274.5923 391.0566 273.6479 391.4082 c270.9458 392.4414 269.5938 394.1016 269.5938 396.3867 c269.5938 397.8379 270.1157 399.0547 271.1587 400.0449 c272.2021 401.0352 273.5581 401.5293 275.2266 401.5293 c277.0273 401.5293 278.5645 401.1113 279.8369 400.2754 c278.8501 397.9355 L278.0391 398.5977 277.0957 398.9277 276.0215 398.9277 c275.2319 398.9277 274.6123 398.7031 274.1621 398.252 c273.7124 397.8027 273.4883 397.2461 273.4883 396.5879 c273.4883 395.4238 274.3667 394.4902 276.123 393.7871 c278.9546 392.6445 280.3711 390.8984 280.3711 388.5469 cf*UUu*u168.7529 413.6328 m166.1919 413.6328 L166.1919 421.666 L166.1919 422.9277 165.5117 423.5586 164.1519 423.5586 c163.5073 423.5586 162.918 423.4531 162.3848 423.2441 c162.3848 413.6328 L159.8247 413.6328 L159.8247 424.3555 L160.9868 424.9023 162.4648 425.1758 164.2568 425.1758 c165.8394 425.1758 167.0093 424.8242 167.7646 424.123 c168.4233 423.5371 168.7529 422.7305 168.7529 421.7051 c168.7529 413.6328 Lf*U*u174.2754 428.1914 m174.2754 427.8398 174.1387 427.541 173.8647 427.2969 c173.5913 427.0508 173.2583 426.9277 172.8657 426.9277 c172.4731 426.9277 172.1401 427.0508 171.8662 427.2969 c171.5933 427.541 171.4561 427.8398 171.4561 428.1914 c171.4561 428.543 171.5933 428.8438 171.8662 429.0957 c172.1401 429.3477 172.4731 429.4746 172.8657 429.4746 c173.2583 429.4746 173.5913 429.3516 173.8647 429.1074 c174.1387 428.8613 174.2754 428.5566 174.2754 428.1914 cf174.1401 413.6328 m171.5796 413.6328 L171.5796 424.9707 L174.1401 424.9707 l174.1401 413.6328 Lf*U*u185.8154 424.9707 m182.1768 413.6328 L179.7378 413.6328 L176.0352 424.9707 L178.77 424.9707 L180.7681 417.6523 L180.9224 417.1055 181.0127 416.5859 181.0415 416.0977 c181.083 416.0977 L181.1533 416.502 181.2515 417.0215 181.3774 417.6523 c183.418 424.9707 l185.8154 424.9707 Lf*U*u196.5576 419.3789 m189.6177 418.3711 L189.8281 416.2695 190.8594 415.2207 192.709 415.2207 c193.8032 415.2207 194.7559 415.4277 195.5708 415.8398 c196.1802 414.2246 L195.2124 413.6914 193.9648 413.4258 192.4365 413.4258 c190.8091 413.4258 189.5264 413.9375 188.5869 414.9609 c187.647 415.9824 187.1777 417.4414 187.1777 419.332 c187.1777 421.168 187.6089 422.6016 188.4712 423.6309 c189.3335 424.6602 190.5146 425.1758 192.0151 425.1758 c193.5283 425.1758 194.6792 424.6816 195.4644 423.6953 c196.249 422.707 196.6138 421.2695 196.5576 419.3789 cf1 D194.1621 420.3828 m194.1621 422.5293 193.4175 423.6016 191.9292 423.6016 c191.1431 423.6016 190.5391 423.2852 190.1177 422.6543 c189.6543 421.9688 189.4365 420.9707 189.4648 419.668 c194.1621 420.3828 Lf*U*u0 D204.3521 425.1621 m203.8462 423.2871 L203.4673 423.4121 203.0732 423.4746 202.666 423.4746 c202.1753 423.4746 201.7676 423.3828 201.4438 423.2012 c201.4438 413.6328 L198.8838 413.6328 L198.8838 424.3633 l200.1313 424.9648 201.9546 425.2324 204.3521 425.1621 cf*U*u212.5254 416.8906 m212.5254 415.9375 212.1548 415.123 211.4106 414.4512 c210.6665 413.7754 209.6919 413.4395 208.4868 413.4395 c207.1953 413.4395 206.1499 413.7148 205.3506 414.2617 c206.0239 415.9023 L206.5708 415.4648 207.2788 415.2461 208.1499 415.2461 c208.6685 415.2461 209.0894 415.3984 209.4126 415.7012 c209.7349 416 209.8965 416.3828 209.8965 416.8457 c209.8965 417.3223 209.77 417.6973 209.519 417.9707 c209.2656 418.2441 208.8389 418.4941 208.2363 418.7168 c206.5137 419.377 205.6514 420.4355 205.6514 421.8945 c205.6514 422.8203 205.9834 423.5977 206.6494 424.2285 c207.3149 424.8594 208.1792 425.1758 209.2441 425.1758 c210.3931 425.1758 211.374 424.9102 212.186 424.377 c211.5547 422.8867 L211.0371 423.3086 210.4346 423.5195 209.749 423.5195 c209.2437 423.5195 208.8477 423.375 208.561 423.0879 c208.2739 422.7988 208.1309 422.4453 208.1309 422.0234 c208.1309 421.2813 208.6904 420.6855 209.813 420.2363 c211.6211 419.5059 212.5254 418.3906 212.5254 416.8906 cf*U*u217.541 428.1914 m217.541 427.8398 217.4038 427.541 217.1309 427.2969 c216.8579 427.0508 216.5244 426.9277 216.1323 426.9277 c215.7397 426.9277 215.4072 427.0508 215.1323 427.2969 c214.8599 427.541 214.7227 427.8398 214.7227 428.1914 c214.7227 428.543 214.8599 428.8438 215.1323 429.0957 c215.4072 429.3477 215.7397 429.4746 216.1323 429.4746 c216.5244 429.4746 216.8579 429.3516 217.1309 429.1074 c217.4038 428.8613 217.541 428.5566 217.541 428.1914 cf217.4072 413.6328 m214.8462 413.6328 L214.8462 424.9707 L217.4072 424.9707 l217.4072 413.6328 Lf*U*u229.0518 414.2461 m228.0708 413.6992 226.7534 413.4258 225.0986 413.4258 c223.4316 413.4258 222.1348 413.9316 221.209 414.9414 c220.2842 415.9492 219.8218 417.3594 219.8218 419.1699 c219.8218 420.9922 220.2852 422.4434 221.2104 423.5234 c222.1079 424.5605 223.3008 425.0801 224.7866 425.0801 c225.4458 425.0801 226.0142 425.0078 226.4912 424.8633 c226.4912 429.4414 L229.0518 429.4414 l229.0518 414.2461 Lf1 D226.4912 415.3223 m226.4912 423.4805 L226.1548 423.5781 225.7769 423.6289 225.3555 423.6289 c223.3643 423.6289 222.3691 422.1914 222.3691 419.3164 c222.3691 416.4844 223.3013 415.0684 225.166 415.0684 c225.7832 415.0684 226.2251 415.1543 226.4912 415.3223 cf*U*u0 D239.9692 414.2461 m238.9463 413.6992 237.5801 413.4258 235.8696 413.4258 c232.7871 413.4258 231.2461 414.5742 231.2461 416.873 c231.2461 418.2441 231.8701 419.2734 233.1172 419.9609 c234.0977 420.4922 235.5825 420.8574 237.5732 421.0527 c237.5732 421.6621 L237.5732 422.9082 236.8228 423.5313 235.3237 423.5313 c234.3848 423.5313 233.4399 423.3027 232.4863 422.8438 c231.8979 424.3145 L233.0747 424.8887 234.3711 425.1758 235.7866 425.1758 c238.5752 425.1758 239.9692 423.8711 239.9692 421.2656 c239.9692 414.2461 Lf1 D237.5732 415.166 m237.5732 419.8359 L236.2295 419.668 235.2788 419.4102 234.7188 419.0586 c234.02 418.623 233.6694 417.9219 233.6694 416.9531 c233.6694 415.5527 234.46 414.8496 236.0405 414.8496 c236.6426 414.8496 237.1523 414.9551 237.5732 415.166 cf*U*u0 D251.5151 414.2461 m250.5342 413.6992 249.2163 413.4258 247.563 413.4258 c245.8945 413.4258 244.5991 413.9316 243.6729 414.9414 c242.748 415.9492 242.2856 417.3594 242.2856 419.1699 c242.2856 420.9922 242.7485 422.4434 243.6743 423.5234 c244.5718 424.5605 245.7637 425.0801 247.251 425.0801 c247.9102 425.0801 248.478 425.0078 248.9546 424.8633 c248.9546 429.4414 L251.5151 429.4414 l251.5151 414.2461 Lf1 D248.9546 415.3223 m248.9546 423.4805 L248.6182 423.5781 248.2397 423.6289 247.8193 423.6289 c245.8281 423.6289 244.833 422.1914 244.833 419.3164 c244.833 416.4844 245.7651 415.0684 247.6309 415.0684 c248.2466 415.0684 248.6885 415.1543 248.9546 415.3223 cf*UU*u0 D147.4995 429.4141 m150.2266 429.4141 L150.2266 417.2266 L150.2266 415.8867 150.9482 415.2148 152.3921 415.2148 c153.0771 415.2148 153.7026 415.3281 154.2676 415.5508 c154.2676 429.4141 L156.9951 429.4141 L156.9951 414.3672 L155.7588 413.7871 154.1875 413.4961 152.2808 413.4961 c150.5977 413.4961 149.3535 413.8691 148.5488 414.6133 c147.8496 415.2383 147.4995 416.0957 147.4995 417.1836 c147.4995 429.4141 Lf*Uu*u153.583 369.418 m150.1548 369.418 L150.1548 365.9746 L153.2036 365.9746 L153.2036 364.5947 L150.1548 364.5947 L150.1548 359.4521 L148.0615 359.4521 L148.0615 370.8135 L153.583 370.8135 l153.583 369.418 Lf*U*u160.8335 359.8916 m160.0952 359.498 159.1094 359.3008 157.8755 359.3008 c155.6509 359.3008 154.5386 360.1299 154.5386 361.7881 c154.5386 362.8496 155.0693 363.6338 156.1313 364.1396 c156.7886 364.4531 157.7793 364.6748 159.1045 364.8066 c159.1045 365.2471 L159.1045 366.1465 158.563 366.5967 157.481 366.5967 c156.8037 366.5967 156.1211 366.4297 155.4336 366.0957 c155.0088 367.1582 L155.8579 367.5723 156.7935 367.7803 157.8149 367.7803 c159.8271 367.7803 160.8335 366.8398 160.8335 364.959 c160.8335 359.8916 Lf1 D159.1045 360.5596 m159.1045 363.9268 L158.1992 363.8154 157.5586 363.6592 157.1826 363.457 c156.5728 363.1328 156.2676 362.5967 156.2676 361.8486 c156.2676 360.8379 156.8418 360.332 157.9912 360.332 c158.4282 360.332 158.7993 360.4082 159.1045 360.5596 cf*U*u0 D167.644 359.8613 m167.2295 359.4873 166.5874 359.3008 165.7178 359.3008 c164.6255 359.3008 163.7915 359.7607 163.2148 360.6807 c162.7295 361.4492 162.4868 362.4102 162.4868 363.5625 c162.4868 364.7158 162.7344 365.6719 163.23 366.4297 c163.8066 367.3301 164.6406 367.7803 165.7329 367.7803 c166.5522 367.7803 167.1841 367.5928 167.6289 367.2188 c167.2349 366.1719 L166.9414 366.3945 166.5771 366.5059 166.1426 366.5059 c164.9492 366.5059 164.3525 365.5322 164.3525 363.5859 c164.3525 362.8389 164.4639 362.209 164.6865 361.6943 c164.9897 360.9883 165.4648 360.6357 166.1123 360.6357 c166.5571 360.6357 166.9263 360.7568 167.2197 360.999 c167.644 359.8613 Lf*U*u175.4106 359.9375 m174.5913 359.5029 173.5449 359.2852 172.2705 359.2852 c170.1567 359.2852 169.1001 360.2051 169.1001 362.0459 c169.1001 367.6279 L170.9658 367.6279 L170.9658 361.9395 L170.9658 361.0195 171.4204 360.5596 172.3301 360.5596 c172.8301 360.5596 173.2349 360.6504 173.5449 360.833 c173.5449 367.6279 L175.4106 367.6279 l175.4106 359.9375 Lf*U*u179.3242 359.4521 m177.4585 359.4521 L177.4585 370.9355 L179.3242 370.9355 l179.3242 359.4521 Lf*U*u185.0122 359.5283 m184.7695 359.417 184.4561 359.3613 184.0718 359.3613 c183.374 359.3613 182.8252 359.5557 182.4258 359.9453 c182.0264 360.334 181.8267 360.8779 181.8267 361.5762 c181.8267 366.4453 L180.9165 366.4453 L180.9165 367.6279 L181.8267 367.6279 L181.8267 370.3584 L183.6924 370.874 L183.6924 367.6279 L185.0122 367.6279 L185.0122 366.4453 L183.6924 366.4453 L183.6924 361.667 L183.6924 360.959 183.9873 360.6055 184.5776 360.6055 c184.6973 360.6055 184.8423 360.6299 185.0122 360.6807 c185.0122 359.5283 Lf*U*u192.4751 359.8916 m191.7368 359.498 190.751 359.3008 189.5171 359.3008 c187.2925 359.3008 186.1802 360.1299 186.1802 361.7881 c186.1802 362.8496 186.7109 363.6338 187.7729 364.1396 c188.4302 364.4531 189.4209 364.6748 190.7461 364.8066 c190.7461 365.2471 L190.7461 366.1465 190.2046 366.5967 189.1226 366.5967 c188.4453 366.5967 187.7627 366.4297 187.0752 366.0957 c186.6504 367.1582 L187.4995 367.5723 188.4351 367.7803 189.4565 367.7803 c191.4688 367.7803 192.4751 366.8398 192.4751 364.959 c192.4751 359.8916 Lf1 D190.7461 360.5596 m190.7461 363.9268 L189.8408 363.8154 189.2002 363.6592 188.8242 363.457 c188.2144 363.1328 187.9092 362.5967 187.9092 361.8486 c187.9092 360.8379 188.4834 360.332 189.6328 360.332 c190.0698 360.332 190.4409 360.4082 190.7461 360.5596 cf*U*u0 D200.7422 359.9531 m200.0342 359.5586 199.0835 359.3613 197.8901 359.3613 c196.6362 359.3613 195.6807 359.7461 195.0234 360.5156 c194.396 361.2451 194.083 362.2432 194.083 363.5098 c194.083 364.7256 194.3701 365.7178 194.9448 366.4883 c195.5801 367.3496 196.4819 367.7803 197.6514 367.7803 c198.125 367.7803 198.5337 367.7295 198.8765 367.6279 c198.8765 370.9961 L200.7422 370.9961 l200.7422 359.9531 Lf1 D198.8765 360.7266 m198.8765 366.627 L198.6348 366.6973 198.3633 366.7334 198.0615 366.7334 c196.6328 366.7334 195.9185 365.6943 195.9185 363.6162 c195.9185 361.5684 196.5874 360.5439 197.9258 360.5439 c198.3682 360.5439 198.6851 360.6055 198.8765 360.7266 cf*U*u0 D213.1958 359.9531 m212.4878 359.5586 211.5371 359.3613 210.3438 359.3613 c209.0898 359.3613 208.1343 359.7461 207.4771 360.5156 c206.8496 361.2451 206.5366 362.2432 206.5366 363.5098 c206.5366 364.7256 206.8237 365.7178 207.3984 366.4883 c208.0337 367.3496 208.9355 367.7803 210.105 367.7803 c210.5786 367.7803 210.9873 367.7295 211.3301 367.6279 c211.3301 370.9961 L213.1958 370.9961 l213.1958 359.9531 Lf1 D211.3301 360.7266 m211.3301 366.627 L211.0884 366.6973 210.8169 366.7334 210.5151 366.7334 c209.0864 366.7334 208.3721 365.6943 208.3721 363.6162 c208.3721 361.5684 209.041 360.5439 210.3794 360.5439 c210.8218 360.5439 211.1387 360.6055 211.3301 360.7266 cf*U*u0 D221.6758 363.5879 m216.6685 362.8711 L216.8203 361.3398 217.5635 360.5742 218.8984 360.5742 c219.6875 360.5742 220.375 360.7314 220.9619 361.0449 c221.4019 359.877 L220.7041 359.4922 219.8042 359.3008 218.7021 359.3008 c217.4478 359.3008 216.4873 359.7051 215.8198 360.5137 c215.2129 361.2627 214.9097 362.2783 214.9097 363.5625 c214.9097 364.7861 215.1772 365.7676 215.7134 366.5059 c216.3203 367.3555 217.2158 367.7803 218.3989 367.7803 c219.6025 367.7803 220.4771 367.3643 221.0234 366.5342 c221.4985 365.8154 221.7158 364.833 221.6758 363.5879 cf1 D219.9458 364.3213 m219.9458 365.8789 219.4097 366.6572 218.3379 366.6572 c217.6499 366.6572 217.1597 366.332 216.8667 365.6816 c216.644 365.1934 216.5425 364.5684 216.563 363.8057 c219.9458 364.3213 Lf*U*u0 D235.2964 365.2012 m235.2964 363.4316 234.9424 362.041 234.2349 361.0293 c233.4155 359.8467 232.1567 359.2549 230.4575 359.2549 c229.0518 359.2549 227.9751 359.4678 227.2266 359.8916 c227.2266 370.3584 L228.0659 370.7832 229.1074 370.9961 230.3516 370.9961 c232.0605 370.9961 233.3345 370.4395 234.1738 369.3271 c234.9224 368.3359 235.2964 366.9609 235.2964 365.2012 cf1 D233.1577 365.2471 m233.1577 368.1689 232.2373 369.6309 230.397 369.6309 c229.9619 369.6309 229.603 369.5752 229.3198 369.4639 c229.3198 360.8779 L229.6538 360.7666 230.0229 360.7109 230.4272 360.7109 c231.5498 360.7109 232.3184 361.2217 232.7329 362.2432 c233.0161 362.9307 233.1577 363.9316 233.1577 365.2471 cf*U*u0 D243.1396 363.5879 m238.1323 362.8711 L238.2842 361.3398 239.0273 360.5742 240.3623 360.5742 c241.1514 360.5742 241.8389 360.7314 242.4258 361.0449 c242.8657 359.877 L242.168 359.4922 241.2681 359.3008 240.166 359.3008 c238.9116 359.3008 237.9512 359.7051 237.2837 360.5137 c236.6768 361.2627 236.3735 362.2783 236.3735 363.5625 c236.3735 364.7861 236.6411 365.7676 237.1772 366.5059 c237.7842 367.3555 238.6797 367.7803 239.8628 367.7803 c241.0664 367.7803 241.9409 367.3643 242.4873 366.5342 c242.9624 365.8154 243.1797 364.833 243.1396 363.5879 cf1 D241.4097 364.3213 m241.4097 365.8789 240.8735 366.6572 239.8018 366.6572 c239.1138 366.6572 238.6235 366.332 238.3306 365.6816 c238.1079 365.1934 238.0063 364.5684 238.0269 363.8057 c241.4097 364.3213 Lf*U*u0 D248.7661 367.7646 m248.4048 366.415 L248.1338 366.5059 247.8525 366.5508 247.5615 366.5508 c247.21 366.5508 246.9189 366.4854 246.688 366.3545 c246.688 359.4521 L244.8223 359.4521 L244.8223 367.1885 l245.7222 367.623 247.0371 367.8154 248.7661 367.7646 cf*U*u256.4424 363.5879 m251.4351 362.8711 L251.5869 361.3398 252.3301 360.5742 253.665 360.5742 c254.4541 360.5742 255.1416 360.7314 255.7285 361.0449 c256.1685 359.877 L255.4707 359.4922 254.5708 359.3008 253.4688 359.3008 c252.2144 359.3008 251.2539 359.7051 250.5864 360.5137 c249.9795 361.2627 249.6763 362.2783 249.6763 363.5625 c249.6763 364.7861 249.9438 365.7676 250.48 366.5059 c251.0869 367.3555 251.9824 367.7803 253.1655 367.7803 c254.3691 367.7803 255.2437 367.3643 255.79 366.5342 c256.2651 365.8154 256.4824 364.833 256.4424 363.5879 cf1 D254.7124 364.3213 m254.7124 365.8789 254.1763 366.6572 253.1045 366.6572 c252.4165 366.6572 251.9263 366.332 251.6333 365.6816 c251.4106 365.1934 251.3091 364.5684 251.3296 363.8057 c254.7124 364.3213 Lf*U*u0 D262.979 359.8613 m262.5645 359.4873 261.9224 359.3008 261.0527 359.3008 c259.9604 359.3008 259.1265 359.7607 258.5498 360.6807 c258.0645 361.4492 257.8218 362.4102 257.8218 363.5625 c257.8218 364.7158 258.0693 365.6719 258.5649 366.4297 c259.1416 367.3301 259.9756 367.7803 261.0679 367.7803 c261.8872 367.7803 262.519 367.5928 262.9639 367.2188 c262.5698 366.1719 L262.2764 366.3945 261.9121 366.5059 261.4775 366.5059 c260.2842 366.5059 259.6875 365.5322 259.6875 363.5859 c259.6875 362.8389 259.7988 362.209 260.0215 361.6943 c260.3247 360.9883 260.7998 360.6357 261.4473 360.6357 c261.8921 360.6357 262.2612 360.7568 262.5547 360.999 c262.979 359.8613 Lf*U*u270.8818 359.4521 m269.0161 359.4521 L269.0161 365.2012 L269.0161 366.1211 268.541 366.582 267.5913 366.582 c267.1011 366.582 266.6709 366.4697 266.3008 366.248 c266.3008 359.4521 L264.4351 359.4521 L264.4351 370.9199 L266.3008 370.9199 L266.3008 367.2793 L266.8955 367.5625 267.5005 367.7041 268.1152 367.7041 c268.9619 367.7041 269.627 367.5068 270.1108 367.1133 c270.625 366.6895 270.8818 366.0635 270.8818 365.2363 c270.8818 359.4521 Lf*U*u279.3462 363.5322 m279.3462 362.3291 279.0879 361.3535 278.5723 360.6055 c277.9756 359.7354 277.1011 359.3008 275.9482 359.3008 c274.7954 359.3008 273.9204 359.7354 273.3237 360.6055 c272.8081 361.3535 272.5503 362.3291 272.5503 363.5322 c272.5503 364.7461 272.8081 365.7266 273.3237 366.4756 c273.9102 367.3447 274.7852 367.7803 275.9482 367.7803 c277.1108 367.7803 277.9858 367.3447 278.5723 366.4756 c279.0879 365.7266 279.3462 364.7461 279.3462 363.5322 cf1 D277.5107 363.5557 m277.5107 365.5928 276.9897 366.6123 275.9482 366.6123 c274.9063 366.6123 274.3857 365.5928 274.3857 363.5557 c274.3857 361.5684 274.9063 360.5742 275.9482 360.5742 c276.9897 360.5742 277.5107 361.5684 277.5107 363.5557 cf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF